{"version":3,"sources":["common/game-state.ts","app/contexts/auth.ts","common/map-generator.ts","app/App.tsx","app/routes/Account.tsx","app/routes/Default.tsx","app/routes/Settings.tsx","app/contexts/game.ts","common/name-generator.ts","app/routes/Games/Create.tsx","app/routes/Games/List.tsx","app/ui/Map.tsx","app/routes/Games/Lobby.tsx","app/ui/AsyncButton.tsx","app/ui/Header.tsx","app/routes/Games/Play/Fleets.tsx","app/routes/Games/Play/Systems.tsx","app/routes/Games/Play.tsx","app/routes/Games.tsx","index.tsx","common/utils.ts","common/game-client.ts","common/game-logic.ts","app/contexts/client.ts","common/game-server.ts","common/poisson-disk.ts"],"names":["Point","data","to","this","x","y","x1","y1","Array","x2","y2","parseFloat","Math","sqrt","pow","toFixed","TransitFleet","game","source","target","systems","s","name","destination","Error","stillNeeded","position","distance","movement","GlobalAuthContext","React","createContext","PoissonMapGenerator","sampler","prando","names","isArray","PoissonDiskSampler","undefined","players","fetchNames","sort","nextInt","points","result","i","length","push","max","ceil","home","pickFairestHomeSystem","reducePositionsToOrigin","Prando","amount","slice","maxDistance","isHome","weight","positions","lowSum","Number","MAX_SAFE_INTEGER","a","b","weights","computeDistanceWeight","sumWeight","reduce","p","c","open","filter","nextArrayItem","minX","minY","system","map","App","hot","module","useCookies","cookies","setCookies","useState","authState","setAuthState","Header","className","src","theme","mode","selectable","Item","disabled","icon","Provider","value","Content","path","component","GamesRoute","onChange","state","SettingsRoute","type","AccountRoute","props","context","useContext","labelCol","span","wrapperCol","onClick","danger","Default","client","GameClientContext","pendingGames","setPendingGames","useEffect","gamesList","gameList","localStorage","clear","location","replace","GameContext","SystemContext","NameGenerator","rng","adjectives","nouns","toString","padStart","CreateGames","Form","useForm","form","useHistory","saving","setSaving","setFieldsValue","next","onFinish","values","gamesCreate","label","extra","maxLength","min","Group","Button","LoadingOutlined","style","width","htmlType","ListGames","games","setGames","fetchGames","dataSource","lastUpdated","v","key","status","kind","PlusOutlined","columns","title","dataIndex","locale","emptyText","pagination","MapPreview","height","forEach","determineBounds","elements","matrix","decorators","toLowerCase","substring","toUpperCase","onSelect","repeat","ViewGameLobby","listAiPlayers","fill","seed","setSeed","pending","setPending","setSystems","preview","setPreview","ratio","generator","generateMap","Meta","avatar","UserOutlined","description","_","LaptopOutlined","onStart","readOnly","minLength","parseInt","gamesDelete","AsyncButton","avoidMultipleClicks","setAvoidMultipleClicks","clearTimer","clearTimeout","loading","handle","setTimeout","GameHeader","waitingForPlayers","endedTurn","onEndTurn","window","confirm","onResign","FleetsTab","fleets","f","fleet","guid","eta","computeEtaInTurns","exact","renderSystem","input","ViewSystem","float","paddingTop","bordered","size","column","layout","marginBottom","factories","orbit","warships","transports","troops","planets","grid","gutter","renderItem","item","count","backgroundColor","recruit","SystemsTab","render","routeProps","match","params","sorter","defaultSortOrder","filters","text","defaultFilteredValue","filterMultiple","onFilter","record","PlayGame","route","useRouteMatch","history","activeKey","tab","onTabClick","newTab","TabPane","ViewGameOrLobby","useParams","setGame","pullGameState","gamesFetch","fetchedGame","pollTimer","setInterval","clearInterval","goBack","gamesStart","gameResign","gameEndTurn","ReactDOM","document","getElementById","deepClone","JSON","parse","stringify","GameClient","viewGameStateAs","perspective","player","userId","fogOfWar","FogOfWar","serverAgent","playerId","currentTurn","revealSystem","determineStatus","owner","RandomSpawner","initialFactories","floor","v4","morale","settings","stub","splice","spawnPlayerFleet","spawnPlanet","spawnEmpireFleet","randomEmpireFactories","TurnProcessor","LocalGameServer","storage","getItem","setItem","spawner","turnProcessor","currentTime","Date","getTime","readState","writeState","Object","request","nextString","createdBy","_player","deleteState","shipSpeedATurn","spawnInitialSystems","initialState","stateWithFogOfWar","createInitialFogOfWar","writePlayer","every","nextTurn","LocalGameClient","server","onGamesFetch","onGamesList","onGamesDelete","onGamesCreate","onGamesStart","onGameEndTurn","onGameResign","viewport","minDistance","maxTries","xMin","yMin","xMax","yMax","radius","cellSize","k","queue","firstPoint","SQRT1_2","reset","index","point","col","row","j","createPoint","angle","PI","cos","sin","isValidPoint","nextPoint"],"mappings":"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","file":"static/js/main.575704c0.chunk.js","sourcesContent":["/**\n * Represents minimal information about a game for listing purposes.\n */\nexport interface GameListData {\n  /**\n   * Name of the game, used for matchmaking and reference purposes.\n   */\n  readonly name: string;\n\n  /**\n   * Number of players.\n   */\n  readonly players: number;\n\n  /**\n   * Last updated timestamp.\n   */\n  readonly lastUpdated: number;\n\n  /**\n   * Type of game saved data.\n   */\n  readonly kind: 'Lobby' | 'Game';\n}\n\n/**\n * Represents a game that has not yet been started.\n */\nexport interface GameLobbyData {\n  /**\n   * Name of the game, used for matchmaking and reference purposes.\n   */\n  readonly name: string;\n\n  /**\n   * Used to procedurally generate the map and empire.\n   */\n  readonly seed: string;\n\n  /**\n   * Which player created and administrates the game.\n   */\n  readonly createdBy: string;\n\n  /**\n   * Last updated timestamp.\n   */\n  readonly lastUpdated: number;\n\n  /**\n   * Number of players.\n   */\n  readonly players: number;\n\n  /**\n   * Type of game saved data.\n   */\n  readonly kind: 'Lobby';\n}\n\n/**\n * Represents the complete game state at a point of time.\n */\nexport interface GameStateData {\n  /**\n   * Name of the game, used for matchmaking and reference purposes.\n   */\n  readonly name: string;\n\n  /**\n   * Last updated timestamp.\n   */\n  readonly lastUpdated: number;\n\n  /**\n   * Which player created and administrates the game.\n   */\n  readonly createdBy: string;\n\n  /**\n   * Current turn number.\n   */\n  readonly currentTurn: number;\n\n  /**\n   * Players in the game.\n   */\n  readonly players: PlayerStateData[];\n\n  /**\n   * Systems in the game.\n   */\n  readonly systems: SystemData[];\n\n  /**\n   * Fleets in the game.\n   */\n  readonly fleets: TransitFleetData[];\n\n  /**\n   * Type of game saved data.\n   */\n  readonly kind: 'Game';\n\n  /**\n   * Settings in the game.\n   */\n  readonly settings: GameSettingsData;\n}\n\n/**\n * Represents settings in the game.\n */\nexport interface GameSettingsData {\n  /**\n   * How many factories initial systems start with.\n   *\n   * The more factories the faster a system can churn out units. This number\n   * is also used as the maximum number of factories that an imperial system\n   * will build.\n   */\n  readonly initialFactories: number;\n\n  /**\n   * How many units of distance a ship moves a turn, maximum.\n   *\n   * The faster the speed the farther ships can make it every \"tick\" of the game.\n   */\n  readonly shipSpeedATurn: number;\n}\n\n/**\n * Represents the state of a player within a game.\n */\nexport interface PlayerStateData {\n  /**\n   * Name of the player.\n   */\n  readonly name: string;\n\n  /**\n   * User ID of the player (guaranteed unique).\n   */\n  readonly userId: string;\n\n  /**\n   * Whether this player is run by a server-driven agent.\n   */\n  readonly serverAgent: boolean;\n\n  /**\n   * A view of the game revealed to the player.\n   */\n  readonly fogOfWar: FogOfWarGameData;\n}\n\n/**\n * Represents a player's view of @see GameStateData.\n */\nexport interface FogOfWarGameData {\n  /**\n   * @see GameStateData.kind.\n   */\n  readonly kind: 'Game';\n\n  /**\n   * @see GameStateData.name.\n   */\n  readonly name: string;\n\n  /**\n   * @see GameStateData.players.\n   */\n  readonly players: number;\n\n  /**\n   * @see GameStateData.currentTurn.\n   */\n  readonly currentTurn: number;\n\n  /**\n   * Whether player ended their turn.\n   */\n  readonly endedTurn: boolean;\n\n  /**\n   * Fleets belonging to the current player; @see GameStateData.fleets.\n   */\n  readonly fleets: TransitFleetData[];\n\n  /**\n   * @see GameStateData.systems.\n   */\n  readonly systems: FogOfWarSystemData[];\n}\n\n/**\n * How a @see SystemData is seen by another player.\n */\nexport type HudIndicatorTag = 'Self' | 'Empire' | 'Enemy' | undefined;\n\n/**\n * Represents an {X, Y} coordinate pair.\n */\nexport type PointData = [number, number];\n\n/**\n * A helper class for wrapping and manipulating @see {PointData} instances.\n */\nexport class Point {\n  constructor(private readonly data: PointData) {}\n\n  get x(): number {\n    return this.data[0];\n  }\n\n  get y(): number {\n    return this.data[1];\n  }\n\n  distance(to: Point | PointData): number {\n    const [x1, y1] = [this.x, this.y];\n    const [x2, y2] = to instanceof Array ? to : [to.x, to.y];\n    return parseFloat(\n      Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2)).toFixed(2),\n    );\n  }\n}\n\n/**\n * Represents a \"tag\" for control of an entity.\n */\nexport type OwnerData = 'Empire' | { player: string };\n\n/**\n * Represents a star system.\n */\nexport interface SystemData {\n  /**\n   * Position of the system.\n   */\n  readonly position: PointData;\n\n  /**\n   * Name of the system.\n   */\n  readonly name: string;\n\n  /**\n   * The userId of the which player this is a home system of.\n   */\n  readonly home: OwnerData;\n\n  /**\n   * The userId of which player controls the system.\n   *\n   * Note, this may conflict with @member home or individual planet control.\n   */\n  readonly owner: OwnerData;\n\n  /**\n   * Orbiting fleet controlled by @member owner.\n   */\n  readonly orbit: FleetData;\n\n  /**\n   * Number of factories present in the system.\n   */\n  readonly factories: number;\n\n  /**\n   * Planets in the system.\n   */\n  readonly planets: PlanetData[];\n}\n\n/**\n * Represents a planet in a star system.\n */\nexport interface PlanetData {\n  /**\n   * Unique ID.\n   */\n  readonly guid: string;\n\n  /**\n   * Troops garrisoned on the planet.\n   */\n  readonly troops: number;\n\n  /**\n   * Number of troops recruited per turn.\n   */\n  readonly recruit: number;\n\n  /**\n   * Morale of the planet.\n   */\n  readonly morale: number;\n\n  /**\n   * Owner of the planet.\n   */\n  readonly owner: OwnerData;\n}\n\n/**\n * Represents a player's view of @see SystemData.\n */\nexport interface FogOfWarSystemData {\n  /**\n   * @see SystemData.name.\n   */\n  readonly name: string;\n\n  /**\n   * @see SystemData.position.\n   */\n  readonly position: PointData;\n\n  /**\n   * @see HudIndicatorTag.\n   */\n  readonly status: HudIndicatorTag;\n\n  /**\n   * Number of factories present in the system.\n   *\n   * If `undefined`, then it is unknown to the current player.\n   */\n  readonly factories?: number;\n\n  /**\n   * Fleet information that is disclosed, if anything.\n   */\n  readonly orbit: Partial<FleetData>;\n\n  /**\n   * @see GameStateData.planets.\n   */\n  readonly planets?: Partial<PlanetData>[];\n}\n\n/**\n * Represents a collection of ships.\n */\nexport interface FleetData {\n  /**\n   * WarShips that are part of this fleet.\n   */\n  readonly warships: number;\n\n  /**\n   * Transports that are part of this fleet.\n   */\n  readonly transports: number;\n\n  /**\n   * Troops that are on board @member transports.\n   */\n  readonly troops: number;\n}\n\nexport interface TransitFleetData {\n  /**\n   * Unique ID.\n   */\n  readonly guid: string;\n\n  /**\n   * Type of movement.\n   */\n  readonly mission: 'Scout' | 'Transfer' | 'Conquest';\n\n  /**\n   * Which units are included in the fleet.\n   */\n  readonly fleet: FleetData;\n\n  /**\n   * Controlling player.\n   */\n  readonly owner: OwnerData;\n\n  /**\n   * Source system (by name).\n   */\n  readonly source: string;\n\n  /**\n   * Destination system (by name).\n   */\n  readonly destination: string;\n\n  /**\n   * Number of turns moved.\n   */\n  readonly movement: number;\n}\n\nexport class TransitFleet {\n  constructor(readonly data: TransitFleetData) {}\n\n  computeEtaInTurns(game: GameStateData | FogOfWarGameData): number {\n    let source: SystemData | FogOfWarSystemData | undefined;\n    let target: SystemData | FogOfWarSystemData | undefined;\n    for (const s of game.systems) {\n      if (s.name === this.data.source) {\n        source = s;\n        continue;\n      }\n      if (s.name === this.data.destination) {\n        target = s;\n        continue;\n      }\n    }\n    if (!source || !target) {\n      throw new Error(`Unexpected fleet data: ${this.data}`);\n    }\n    // TODO: Take a settings object instead.\n    const perTurn = 4;\n    const distance = new Point(source.position).distance(\n      new Point(target.position),\n    );\n    const movedSoFar = this.data.movement * perTurn;\n    const stillNeeded = distance - movedSoFar;\n    if (stillNeeded <= 1) {\n      return 1;\n    } else {\n      return stillNeeded / perTurn;\n    }\n  }\n}\n","import React from 'react';\n\n/**\n * Authentication state.\n *\n * Represents either logged out, logged in as a guest, logged in with Discord.\n */\nexport type GlobalAuthState = null | 'Guest' | { discordId: string };\nexport const GlobalAuthContext = React.createContext<GlobalAuthState>(null);\n","import Prando from 'prando';\nimport { Point, PointData } from './game-state';\nimport { PoissonDiskSampler } from './poisson-disk';\n\nexport abstract class MapGenerator {\n  constructor(\n    protected readonly prando = new Prando(),\n    protected readonly names = [\n      'Alfa',\n      'Bravo',\n      'Charlie',\n      'Delta',\n      'Echo',\n      'Foxtrot',\n      'Golf',\n      'Hotel',\n      'India',\n      'Juliett',\n      'Kilo',\n      'Lima',\n      'Mike',\n      'November',\n      'Oscar',\n      'Papa',\n      'Quebec',\n      'Romeo',\n      'Sierra',\n      'Tango',\n      'Uniform',\n      'Victor',\n      'Whiskey',\n      'Xray',\n      'Yankee',\n      'Zulu',\n    ],\n  ) {}\n\n  /**\n   * Returns a set @param amount of system names.\n   */\n  protected fetchNames(amount: number): string[] {\n    // TODO: Validate input (int, at least 1, at most names.length).\n    return this.names.slice(0, amount);\n  }\n\n  /**\n   * Given the inputs, determines an appropriate \"weighted\" @param distance.\n   */\n  protected computeDistanceWeight(\n    maxDistance: number,\n    distance: number,\n    isHome: boolean,\n  ): number {\n    let weight = maxDistance - distance;\n    if (isHome) {\n      weight = Math.pow(2, weight);\n    }\n    return weight;\n  }\n\n  /**\n   * Given @param positions, returns the farthest open system to use as a home.\n   */\n  protected pickFairestHomeSystem<\n    T extends {\n      position: PointData;\n      home?: unknown;\n    }\n  >(positions: T[]): T {\n    let result: T | undefined;\n    let lowSum = Number.MAX_SAFE_INTEGER;\n    let maxDistance = 0;\n    for (const a of positions) {\n      for (const b of positions) {\n        const distance = new Point(a.position).distance(b.position);\n        if (distance > maxDistance) {\n          maxDistance = distance;\n        }\n      }\n    }\n    for (const a of positions) {\n      if (a.home) {\n        continue;\n      }\n      const weights: number[] = [];\n      for (const b of positions) {\n        const distance = new Point(a.position).distance(b.position);\n        const weight = this.computeDistanceWeight(\n          maxDistance,\n          distance,\n          !!b.home,\n        );\n        weights.push(weight);\n      }\n      const sumWeight = weights.reduce((p, c) => p + c, 0);\n      if (sumWeight < lowSum) {\n        lowSum = sumWeight;\n        result = a;\n      }\n    }\n    if (!result) {\n      const open = positions.filter((s) => !s.home);\n      if (open.length === 0) {\n        throw new Error('Failed to find an open system.');\n      }\n      result = this.prando.nextArrayItem(open);\n    }\n    return result;\n  }\n\n  /**\n   * Given a set of @param positions where the `{x, y}` coordinate pairs might\n   * be scattered, finds the smallest `x` and `y` coordinate, and re-aligns all\n   * positions to be as close as possible to `{0, 0}`.\n   */\n  protected reducePositionsToOrigin<\n    T extends {\n      position: PointData;\n    }\n  >(positions: T[]): T[] {\n    let minX = Number.MAX_SAFE_INTEGER;\n    let minY = Number.MAX_SAFE_INTEGER;\n    for (const system of positions) {\n      const [x, y] = system.position;\n      if (x < minX) {\n        minX = x;\n      }\n      if (y < minY) {\n        minY = y;\n      }\n    }\n    return positions.map((system) => {\n      let [x, y] = system.position;\n      x -= minX;\n      y -= minY;\n      return {\n        ...system,\n        position: [x, y],\n      };\n    });\n  }\n\n  abstract generateMap(\n    systems: number,\n    players: number,\n  ): { position: PointData; name: string }[];\n}\n\nexport class PoissonMapGenerator extends MapGenerator {\n  private readonly sampler: PoissonDiskSampler;\n\n  constructor(\n    sampler: PoissonDiskSampler | [number, number],\n    prando?: Prando,\n    names?: string[],\n  ) {\n    super(prando, names);\n    this.sampler = Array.isArray(sampler)\n      ? new PoissonDiskSampler(sampler, 4, undefined, prando)\n      : sampler;\n  }\n\n  generateMap(\n    systems: number,\n    players: number,\n  ): { position: PointData; name: string; home: boolean }[] {\n    const names = this.fetchNames(systems);\n    names.sort(() => this.prando.nextInt(-1, 1));\n    const points = this.sampler.points(systems);\n    const result: { position: PointData; name: string; home: boolean }[] = [];\n    for (let i = 0; i < points.length; i++) {\n      result.push({\n        name: names[i],\n        position: [\n          Math.max(Math.ceil(points[i][0] - 1), 0),\n          Math.max(Math.ceil(points[i][1] - 1), 0),\n        ],\n        home: false,\n      });\n    }\n    while (players--) {\n      this.pickFairestHomeSystem(result).home = true;\n    }\n    return this.reducePositionsToOrigin(result);\n  }\n}\n","import {\n  DatabaseOutlined,\n  SettingOutlined,\n  UserOutlined,\n} from '@ant-design/icons';\nimport { Button, Layout, Menu } from 'antd';\nimport React, { useState } from 'react';\nimport { useCookies } from 'react-cookie';\nimport { hot } from 'react-hot-loader';\nimport { BrowserRouter as Router, Link, Route, Switch } from 'react-router-dom';\nimport './App.scss';\nimport { GlobalAuthContext, GlobalAuthState } from './contexts/auth';\nimport { AccountRoute } from './routes/Account';\nimport { Default } from './routes/Default';\nimport { GamesRoute } from './routes/Games';\nimport { SettingsRoute } from './routes/Settings';\n\nfunction app(): JSX.Element {\n  const [cookies, setCookies] = useCookies(['auth']);\n  const [authState, setAuthState] = useState<GlobalAuthState>(cookies['auth']);\n\n  const updateAuth = (state: GlobalAuthState) => {\n    setCookies('auth', state);\n    setAuthState(state);\n  };\n\n  return (\n    <Router>\n      <Layout>\n        <Layout.Header>\n          <div className=\"logo\">\n            <Link to=\"/\">\n              <img src=\"/images/logo.png\" />\n            </Link>\n          </div>\n          <Menu theme=\"dark\" mode=\"horizontal\" selectable={false}>\n            <Menu.Item disabled={!authState} icon={<DatabaseOutlined />}>\n              <Link to=\"/games\">Games</Link>\n            </Menu.Item>\n            <Menu.Item icon={<UserOutlined />}>\n              <Link to=\"/account\">Account</Link>\n            </Menu.Item>\n            <Menu.Item icon={<SettingOutlined />}>\n              <Link to=\"/settings\">Settings</Link>\n            </Menu.Item>\n          </Menu>\n        </Layout.Header>\n        <GlobalAuthContext.Provider value={authState}>\n          <Layout.Content>\n            <Switch>\n              <Route path=\"/games\" component={GamesRoute} />\n              <Route path=\"/account\">\n                <AccountRoute onChange={updateAuth} />\n              </Route>\n              <Route path=\"/settings\" component={SettingsRoute} />\n              <Route path=\"/\">\n                {!authState ? (\n                  <>\n                    <Button type=\"dashed\">\n                      <Link to=\"/account\">\n                        <UserOutlined /> Login Required\n                      </Link>\n                    </Button>\n                  </>\n                ) : (\n                  <Default />\n                )}\n              </Route>\n            </Switch>\n          </Layout.Content>\n        </GlobalAuthContext.Provider>\n      </Layout>\n    </Router>\n  );\n}\n\nexport const App = hot(module)(app);\n","import { Button, Form } from 'antd';\nimport React, { useContext } from 'react';\nimport { GlobalAuthContext, GlobalAuthState } from '../contexts/auth';\nimport './Account.scss';\n\nexport interface AccountRateProps {\n  onChange: (newState: GlobalAuthState) => void;\n}\n\nexport function AccountRoute(props: AccountRateProps): JSX.Element {\n  const context = useContext(GlobalAuthContext);\n\n  return (\n    <Form\n      className=\"account-form\"\n      labelCol={{ span: 8 }}\n      wrapperCol={{ span: 16 }}\n    >\n      <h1>Account</h1>\n      <p>\n        A login is required to play <strong>Third Conflict</strong>. Currently\n        you can login as a <strong>Guest</strong> and create and play games\n        locally. In <em>future</em> releases you will be able to login with{' '}\n        <strong>Discord</strong> and play online.\n      </p>\n      {!context && (\n        <Form.Item>\n          <Button type=\"primary\" onClick={() => props.onChange('Guest')}>\n            Login as Guest\n          </Button>\n          <Button type=\"ghost\" disabled>\n            Login with Discord\n          </Button>\n        </Form.Item>\n      )}\n      {context && (\n        <Button type=\"primary\" danger onClick={() => props.onChange(null)}>\n          Logout\n        </Button>\n      )}\n    </Form>\n  );\n}\n","import { useContext, useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { GameClientContext } from '../contexts/client';\nimport './Default.scss';\n\nexport function Default(): JSX.Element {\n  const client = useContext(GameClientContext);\n  const [pendingGames, setPendingGames] = useState<number | undefined>();\n  useEffect(() => {\n    (async () => {\n      const gameList = await client.gamesList();\n      setPendingGames(gameList.length);\n    })();\n  }, [client]);\n  return (\n    <>\n      <h1>\n        Welcome back to <strong>Third Conflict</strong>\n      </h1>\n      <p>\n        {/* TODO: Show loading indicator. */}\n        You have <Link to=\"/games\">{pendingGames} pending game(s)</Link>.\n      </p>\n    </>\n  );\n}\n","import { Button, Form } from 'antd';\nimport React from 'react';\nimport './Settings.scss';\n\nexport function SettingsRoute(): JSX.Element {\n  return (\n    <>\n      <h1>Settings</h1>\n      <p>\n        This game is in active development. As such, the data model is\n        constantly evolving, and it's possible to get into a state where you\n        have invalid data and the app/game is no longer functioning properly.\n      </p>\n      <Form\n        className=\"account-form\"\n        labelCol={{ span: 8 }}\n        wrapperCol={{ span: 16 }}\n      >\n        <Form.Item>\n          <Button\n            type=\"primary\"\n            danger\n            onClick={() => {\n              localStorage.clear();\n              location.replace('/');\n            }}\n          >\n            Reset all data\n          </Button>\n        </Form.Item>\n      </Form>\n    </>\n  );\n}\n","import React from 'react';\nimport { FogOfWarGameData, FogOfWarSystemData } from '../../common/game-state';\n\nexport const GameContext = React.createContext<FogOfWarGameData | undefined>(\n  undefined,\n);\n\nexport const SystemContext = React.createContext<\n  FogOfWarSystemData | undefined\n>(undefined);\n","import Prando from 'prando';\n\nexport class NameGenerator {\n  constructor(\n    private readonly rng = new Prando(),\n    private readonly adjectives: string[] = [\n      'angry',\n      'attractive',\n      'bald',\n      'big',\n      'brave',\n      'clumsy',\n      'fierce',\n      'happy',\n      'itchy',\n      'handsome',\n      'petite',\n      'repulsive',\n      'silly',\n      'stocky',\n      'tall',\n      'tiny',\n      'wonderful',\n      'zealous',\n    ],\n    private readonly nouns: string[] = [\n      'antelope',\n      'cat',\n      'dog',\n      'eagle',\n      'gorilla',\n      'lion',\n      'rabbit',\n      'snake',\n      'tiger',\n      'vulture',\n      'zebra',\n    ],\n  ) {}\n\n  next(): string {\n    return `${this.rng.nextArrayItem(this.adjectives)}-${this.rng.nextArrayItem(\n      this.nouns,\n    )}-${this.rng.nextInt(0, 99).toString().padStart(2, '0')}`;\n  }\n}\n","import { LoadingOutlined } from '@ant-design/icons';\nimport { Button, Form, Input, InputNumber, Radio } from 'antd';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { NameGenerator } from '../../../common/name-generator';\nimport { GameClientContext } from '../../contexts/client';\n\ninterface CreateGameForm {\n  name: string;\n  players: number;\n}\n\nexport function CreateGames(): JSX.Element {\n  const [form] = Form.useForm<CreateGameForm>();\n  const { replace } = useHistory();\n  const client = useContext(GameClientContext);\n  const [saving, setSaving] = useState(false);\n\n  function initializeForm() {\n    form.setFieldsValue({ name: new NameGenerator().next(), players: 2 });\n  }\n\n  useEffect(initializeForm, []);\n  return (\n    <>\n      <h1>Create a Game</h1>\n      <p>\n        Currently, you can create <strong>local</strong> (offline) games with AI\n        opponents. In future builds, once logged in with{' '}\n        <strong>Discord</strong>, you will be able to create and play online\n        games.\n      </p>\n      <Form\n        labelCol={{ span: 1 }}\n        wrapperCol={{ span: 4 }}\n        form={form}\n        onFinish={async (values) => {\n          setSaving(true);\n          const result = await client.gamesCreate(values.name, values.players);\n          replace(`/games/${result.name}`);\n        }}\n      >\n        <Form.Item\n          name=\"name\"\n          label=\"Name\"\n          extra={<>This name is just used for reference only.</>}\n        >\n          <Input maxLength={30} />\n        </Form.Item>\n        <Form.Item\n          name=\"players\"\n          label=\"Players\"\n          extra={<>2-4 players currently supported.</>}\n        >\n          <InputNumber min={2} max={4} />\n        </Form.Item>\n        <Form.Item\n          name=\"online\"\n          label=\"Connectivity\"\n          extra={<>Local games are versus AI and played offline.</>}\n        >\n          <Radio.Group>\n            <Radio.Button value={false}>Local</Radio.Button>\n            <Radio.Button value={true} disabled>\n              Online\n            </Radio.Button>\n          </Radio.Group>\n        </Form.Item>\n        <Form.Item wrapperCol={{ span: 5 }}>\n          <Button\n            disabled={saving}\n            icon={saving ? <LoadingOutlined /> : undefined}\n            type=\"primary\"\n            style={{ width: '100%' }}\n            htmlType=\"submit\"\n          >\n            {saving ? <>Saving</> : <>Create Game</>}\n          </Button>\n        </Form.Item>\n      </Form>\n    </>\n  );\n}\n","import { PlusOutlined } from '@ant-design/icons';\nimport { Button, Table } from 'antd';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport { GameListData } from '../../../common/game-state';\nimport { GameClientContext } from '../../contexts/client';\n\nexport function ListGames(): JSX.Element {\n  const client = useContext(GameClientContext);\n  const { push } = useHistory();\n  const [games, setGames] = useState<GameListData[]>([]);\n\n  async function fetchGames() {\n    setGames(await client.gamesList());\n  }\n\n  useEffect(() => {\n    fetchGames();\n  }, [client]);\n\n  const dataSource = games\n    .sort((a, b) => a.lastUpdated - b.lastUpdated)\n    .map((v) => {\n      return {\n        name: <Link to={`/games/${v.name}`}>{v.name}</Link>,\n        key: v.name,\n        players: v.players,\n        status: v.kind === 'Lobby' ? 'Not Started' : 'In Progress',\n      };\n    });\n\n  return (\n    <>\n      <h1>Games</h1>\n      <p className=\"games-buttons\">\n        <Button\n          icon={<PlusOutlined />}\n          type=\"dashed\"\n          onClick={() => {\n            push('/games/create');\n          }}\n        >\n          Create Game\n        </Button>\n\n        <Button\n          icon={<PlusOutlined />}\n          type=\"dashed\"\n          disabled\n          onClick={() => {\n            push('/games/join');\n          }}\n        >\n          Join Game\n        </Button>\n      </p>\n      <Table\n        columns={[\n          { title: 'Name', dataIndex: 'name' },\n          { title: 'Players', dataIndex: 'players' },\n          { title: 'Status', dataIndex: 'status' },\n        ]}\n        dataSource={dataSource}\n        locale={{ emptyText: 'You are not in any games.' }}\n        pagination={false}\n      />\n    </>\n  );\n}\n","import { HudIndicatorTag, PointData } from '../../common/game-state';\nimport { matrix, repeat } from '../../common/utils';\nimport './Map.scss';\n\ninterface StubSystem {\n  /**\n   * Position of the system (x, y).\n   */\n  position: PointData;\n\n  /**\n   * Name of the system.\n   */\n  name: string;\n\n  /**\n   * Last known reconnaissance information showing ownership.\n   *\n   * May be left `undefined` if unknown.\n   */\n  status?: HudIndicatorTag;\n}\n\nexport interface MapProps {\n  systems: StubSystem[];\n  onSelect?: (system: StubSystem) => void;\n}\n\nfunction determineBounds(\n  systems: { position: PointData }[],\n): { width: number; height: number } {\n  let width = 0;\n  let height = 0;\n  systems.forEach((system) => {\n    const [x, y] = system.position;\n    if (x > width) {\n      width = x;\n    }\n    if (y > height) {\n      height = y;\n    }\n  });\n  return { width, height };\n}\n\nexport function MapPreview(props: MapProps): JSX.Element {\n  let { width, height } = determineBounds(props.systems);\n  width += 1;\n  height += 1;\n  const elements: JSX.Element[][] = matrix(height, width);\n  const decorators: string[][] = matrix(height, width);\n  const systems: StubSystem[][] = matrix(height, width);\n  for (const system of props.systems) {\n    const [x, y] = system.position;\n    decorators[y][x] = `${(system.status || '').toLowerCase()}`;\n    elements[y][x] = <>{system.name.substring(0, 1).toUpperCase()}</>;\n    systems[y][x] = system;\n  }\n  return (\n    <table className={`map-preview ${props.onSelect ? 'selectable' : ''}`}>\n      <tbody>\n        {repeat(height).map((y) => {\n          return (\n            <tr key={y}>\n              {repeat(width).map((x) => {\n                return (\n                  <td\n                    key={x}\n                    className={decorators[y][x]}\n                    onClick={() => {\n                      if (props.onSelect) {\n                        props.onSelect(systems[y][x]);\n                      }\n                    }}\n                  >\n                    {elements[y][x]}\n                  </td>\n                );\n              })}\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n}\n","import { LaptopOutlined, UserOutlined } from '@ant-design/icons';\nimport { Button, Form, Input, InputNumber, List } from 'antd';\nimport Prando from 'prando';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { GameLobbyData, PointData } from '../../../common/game-state';\nimport { PoissonMapGenerator } from '../../../common/map-generator';\nimport { PoissonDiskSampler } from '../../../common/poisson-disk';\nimport { GameClientContext } from '../../contexts/client';\nimport { MapPreview } from '../../ui/Map';\n\nexport function ViewGameLobby(props: {\n  data: GameLobbyData;\n  onStart: (seed: string, systems: number) => void;\n}): JSX.Element {\n  const client = useContext(GameClientContext);\n  const { replace } = useHistory();\n  const listAiPlayers = new Array(props.data.players - 1).fill('');\n  const [seed, setSeed] = useState(props.data.seed);\n  const [pending, setPending] = useState(false);\n  const [systems, setSystems] = useState(Math.ceil(props.data.players * 3));\n  const [preview, setPreview] = useState<\n    { position: PointData; name: string; home: boolean }[]\n  >([]);\n\n  useEffect(() => {\n    const prando = new Prando(seed);\n    const ratio = systems / 26;\n    const sampler = new PoissonDiskSampler(\n      [Math.ceil(50 * ratio), Math.ceil(30 * ratio)],\n      4,\n      undefined,\n      prando,\n    );\n    const generator = new PoissonMapGenerator(sampler, prando);\n    setPreview(generator.generateMap(systems, props.data.players));\n  }, [seed, systems]);\n\n  return (\n    <>\n      <h3>Players</h3>\n      <List>\n        <List.Item>\n          <List.Item.Meta\n            avatar={<UserOutlined />}\n            title={'Human'}\n            description={'Ready'}\n          />\n        </List.Item>\n        {listAiPlayers.map((_, i) => {\n          return (\n            <List.Item key={i}>\n              <List.Item.Meta\n                avatar={<LaptopOutlined />}\n                title={`AI: ${i + 1}`}\n                description={'Ready'}\n              />\n            </List.Item>\n          );\n        })}\n      </List>\n      <h3>Settings</h3>\n      <Form\n        labelCol={{ span: 1 }}\n        wrapperCol={{ span: 4 }}\n        onFinish={() => {\n          setPending(true);\n          props.onStart(seed, systems);\n        }}\n      >\n        <Form.Item\n          label=\"Name\"\n          extra={<>Used for identifying the game only.</>}\n        >\n          <Input\n            readOnly\n            minLength={10}\n            maxLength={20}\n            value={props.data.name}\n          />\n        </Form.Item>\n        <Form.Item\n          label=\"Seed\"\n          extra={<>Used for procedural generation of systems.</>}\n        >\n          <Input\n            readOnly\n            minLength={10}\n            maxLength={20}\n            value={seed}\n            onChange={(v) => setSeed(v.target.value)}\n          />\n        </Form.Item>\n        <Form.Item label=\"Preview\">\n          <MapPreview systems={preview} />\n        </Form.Item>\n        <Form.Item\n          label=\"Maximum Systems\"\n          extra={<>A recommended number is 3 systems per player.</>}\n        >\n          <InputNumber\n            min={props.data.players}\n            max={26}\n            value={systems}\n            onChange={(v) => setSystems(parseInt(`${v}`))}\n          />\n        </Form.Item>\n        <p className=\"games-buttons\">\n          <Button type=\"primary\" htmlType=\"submit\" disabled={pending}>\n            Start\n          </Button>\n          <Button\n            danger\n            disabled={pending}\n            onClick={async () => {\n              setPending(true);\n              await client.gamesDelete(props.data.name);\n              replace('/games');\n            }}\n          >\n            Delete\n          </Button>\n        </p>\n      </Form>\n    </>\n  );\n}\n","import Button, { ButtonProps } from 'antd/lib/button';\nimport { useEffect, useState } from 'react';\n\nexport function AsyncButton(\n  props: ButtonProps & { onClick: () => Promise<void> },\n): JSX.Element {\n  const [avoidMultipleClicks, setAvoidMultipleClicks] = useState<\n    number | undefined\n  >();\n  function clearTimer() {\n    clearTimeout(avoidMultipleClicks);\n    setAvoidMultipleClicks(undefined);\n  }\n  useEffect(() => {\n    return clearTimer;\n  }, []);\n  return (\n    <Button\n      {...props}\n      disabled={props.disabled || avoidMultipleClicks !== undefined}\n      loading={!!avoidMultipleClicks}\n      onClick={async () => {\n        // Force the button to be disabled.\n        setAvoidMultipleClicks(-1);\n        try {\n          await props.onClick();\n        } finally {\n          // Wait 500ms after the promise completes to re-enable.\n          const handle = (setTimeout(clearTimer, 500) as unknown) as number;\n          setAvoidMultipleClicks(handle);\n        }\n      }}\n    />\n  );\n}\n","import { AsyncButton } from './AsyncButton';\nimport './Header.scss';\n\nexport interface GameHeaderProps {\n  name: string;\n  players: number;\n  systems: number;\n  endedTurn: boolean;\n\n  onEndTurn: () => Promise<void>;\n  onResign: () => Promise<void>;\n}\n\nexport function GameHeader(props: GameHeaderProps): JSX.Element {\n  const waitingForPlayers = props.endedTurn;\n  return (\n    <header className=\"game-header\">\n      <div>\n        <strong>{props.name}</strong>\n        <br />\n        <span>{props.players}</span> players, <span>{props.systems}</span>{' '}\n        systems.\n      </div>\n      <ul>\n        <li>\n          <AsyncButton\n            type=\"primary\"\n            disabled={waitingForPlayers}\n            onClick={props.onEndTurn}\n          >\n            {waitingForPlayers ? 'Waiting...' : 'End Turn'}\n          </AsyncButton>\n        </li>\n        <li>\n          <AsyncButton\n            danger\n            onClick={async () => {\n              if (\n                !window.confirm(\n                  'Are you sure? This will remove you from the game',\n                )\n              ) {\n                return;\n              }\n              return props.onResign();\n            }}\n          >\n            Resign\n          </AsyncButton>\n        </li>\n      </ul>\n    </header>\n  );\n}\n","import { Table } from 'antd';\nimport React, { useContext } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { TransitFleet } from '../../../../common/game-state';\nimport { GameContext } from '../../../contexts/game';\n\ninterface RenderFleetRow {\n  readonly key: string;\n  readonly destination: string;\n  readonly source: string;\n  readonly eta: string;\n}\n\nexport function FleetsTab(): JSX.Element {\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const game = useContext(GameContext)!;\n  const data: RenderFleetRow[] = game.fleets.map((f) => {\n    const fleet = new TransitFleet(f);\n    return {\n      key: f.guid,\n      destination: f.destination,\n      source: f.source,\n      eta: `${fleet.computeEtaInTurns(game).toFixed(1)}`,\n    };\n  });\n  return (\n    <>\n      <Switch>\n        <Route exact path=\"/games/:name/fleets\">\n          <Table\n            columns={[\n              {\n                title: 'Destination',\n                dataIndex: 'destination',\n                key: 'destination',\n              },\n              {\n                title: 'Source',\n                dataIndex: 'source',\n                key: 'source',\n              },\n              {\n                title: 'Strength',\n                dataIndex: 'strength',\n                key: 'strength',\n              },\n              {\n                title: 'ETA',\n                dataIndex: 'eta',\n                key: 'eta',\n              },\n            ]}\n            dataSource={data}\n            pagination={false}\n            locale={{ emptyText: 'You have no active fleets or scouts.' }}\n          />\n        </Route>\n      </Switch>\n    </>\n  );\n}\n","import { PlusOutlined } from '@ant-design/icons';\nimport { Badge, Button, Card, Descriptions, List, Space, Table } from 'antd';\nimport React, { useContext } from 'react';\nimport { Link, Route, Switch } from 'react-router-dom';\nimport { FogOfWarSystemData } from '../../../../common/game-state';\nimport { GameContext, SystemContext } from '../../../contexts/game';\nimport { AsyncButton } from '../../../ui/AsyncButton';\nimport './Systems.scss';\n\ninterface RenderSystemRow {\n  readonly name: string;\n  readonly key: string;\n  readonly status: string;\n}\n\nfunction renderSystem(input: FogOfWarSystemData): RenderSystemRow {\n  return {\n    name: input.name,\n    key: input.name,\n    status: input.status || 'Unknown',\n  };\n}\n\nfunction ViewSystem(): JSX.Element {\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const system = useContext(SystemContext)!;\n  // TODO: Consider adding a smaller preview of the system on the map?\n  return (\n    <>\n      <Space style={{ float: 'right', paddingTop: '5px' }}>\n        {system.status === 'Self' && (\n          <>\n            <Button type=\"dashed\">Launch Fleet</Button>\n          </>\n        )}\n        {system.status !== 'Self' && (\n          <>\n            <Button type=\"dashed\" disabled>\n              Attack\n            </Button>\n            <AsyncButton\n              type=\"dashed\"\n              onClick={async () => {\n                // Intentionally left blank.\n              }}\n            >\n              Scout\n            </AsyncButton>\n          </>\n        )}\n      </Space>\n      <h2>{system.name}</h2>\n      <Descriptions\n        title=\"Orbiting\"\n        bordered\n        size=\"small\"\n        column={2}\n        layout=\"vertical\"\n        style={{ marginBottom: '10px' }}\n      >\n        <Descriptions.Item label=\"Factories\">\n          {system.factories || '?'}\n        </Descriptions.Item>\n        <Descriptions.Item label=\"Warships\">\n          {system.orbit.warships || '?'}\n        </Descriptions.Item>\n        <Descriptions.Item label=\"Transports\">\n          {system.orbit.transports || '?'}\n        </Descriptions.Item>\n        <Descriptions.Item label=\"Troops\">\n          {system.orbit.troops || '?'}\n        </Descriptions.Item>\n      </Descriptions>\n      <Descriptions title=\"Planets\" extra={<>Morale, Troops, Recruitment.</>} />\n      {!system.planets && <p>No information available.</p>}\n      {system.planets && (\n        <List\n          grid={{ gutter: 8, column: 4 }}\n          className=\"planet-grid\"\n          dataSource={system.planets}\n          renderItem={(item) => (\n            <List.Item>\n              <Card>\n                <Badge count={1} style={{ backgroundColor: 'grey' }}>\n                  <img src={`/images/planets/${item.recruit}.png`} />\n                </Badge>\n                <br />\n                <div className=\"troops\">\n                  <div>{item.troops}</div>\n                  <div className=\"recruit\">\n                    <PlusOutlined /> {item.recruit}\n                  </div>\n                </div>\n              </Card>\n            </List.Item>\n          )}\n        />\n      )}\n    </>\n  );\n}\n\nexport function SystemsTab(): JSX.Element {\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const game = useContext(GameContext)!;\n  return (\n    <>\n      <Switch>\n        <Route\n          exact\n          path=\"/games/:name/systems/:system\"\n          render={(routeProps) => {\n            const name = routeProps.match.params['system'] as string;\n            let system!: FogOfWarSystemData;\n            for (const s of game.systems) {\n              if (s.name.toLowerCase() === name) {\n                system = s;\n                break;\n              }\n            }\n            return (\n              <SystemContext.Provider value={system}>\n                <ViewSystem />\n              </SystemContext.Provider>\n            );\n          }}\n        />\n        <Route path=\"/games/:name/systems\">\n          <Table\n            columns={[\n              {\n                title: 'Name',\n                dataIndex: 'name',\n                key: 'name',\n                sorter: (a, b) => (a.name > b.name ? 1 : -1),\n                defaultSortOrder: 'ascend',\n                render: (name) => (\n                  <Link\n                    to={`/games/${game.name}/systems/${name.toLowerCase()}`}\n                  >\n                    {name}\n                  </Link>\n                ),\n              },\n              {\n                title: 'HUD',\n                dataIndex: 'status',\n                key: 'status',\n                filters: [\n                  {\n                    text: 'Friendly',\n                    value: 'Self',\n                  },\n                ],\n                defaultFilteredValue: ['Self'],\n                filterMultiple: true,\n                onFilter: (value, record) => record.status === value,\n              },\n            ]}\n            dataSource={game.systems.map(renderSystem)}\n            pagination={false}\n          />\n        </Route>\n      </Switch>\n    </>\n  );\n}\n","import { Tabs } from 'antd';\nimport React, { useContext } from 'react';\nimport { useHistory, useRouteMatch } from 'react-router-dom';\nimport { GameContext } from '../../contexts/game';\nimport { GameHeader } from '../../ui/Header';\nimport { MapPreview } from '../../ui/Map';\nimport { FleetsTab } from './Play/Fleets';\nimport { SystemsTab } from './Play/Systems';\n\nexport function PlayGame(props: {\n  onEndTurn: () => Promise<void>;\n  onResign: () => Promise<void>;\n}): JSX.Element {\n  const state = useContext(GameContext);\n  if (!state) {\n    throw new Error(`No GameContext provided.`);\n  }\n  const route = useRouteMatch<{ name: string; tab: string }>(\n    '/games/:name/:tab?',\n  )?.params;\n  const history = useHistory();\n  return (\n    <>\n      <GameHeader\n        name={state.name}\n        players={state.players}\n        systems={state.systems.length}\n        endedTurn={state.endedTurn}\n        onEndTurn={props.onEndTurn}\n        onResign={props.onResign}\n      />\n      <Tabs\n        activeKey={route?.tab || ''}\n        onTabClick={(newTab) => {\n          if (route) {\n            history.replace(`/games/${route.name}/${newTab}`);\n          }\n        }}\n      >\n        <Tabs.TabPane tab=\"Overview\" key=\"\">\n          <MapPreview\n            systems={state.systems}\n            onSelect={(system) => {\n              history.push(\n                `/games/${route?.name}/systems/${system.name.toLowerCase()}`,\n              );\n            }}\n          />\n        </Tabs.TabPane>\n        <Tabs.TabPane tab=\"Reports\" key=\"reports\" disabled={true} />\n        <Tabs.TabPane tab=\"Systems\" key=\"systems\">\n          <SystemsTab />\n        </Tabs.TabPane>\n        <Tabs.TabPane tab=\"Fleets\" key=\"fleets\">\n          <FleetsTab />\n        </Tabs.TabPane>\n      </Tabs>\n    </>\n  );\n}\n","import { Button } from 'antd';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { Route, Switch, useHistory, useParams } from 'react-router-dom';\nimport {\n  FogOfWarGameData,\n  GameListData,\n  GameLobbyData,\n} from '../../common/game-state';\nimport { GameClientContext } from '../contexts/client';\nimport { GameContext } from '../contexts/game';\nimport './Games.scss';\nimport { CreateGames } from './Games/Create';\nimport { ListGames } from './Games/List';\nimport { ViewGameLobby } from './Games/Lobby';\nimport { PlayGame } from './Games/Play';\n\nfunction ViewGameOrLobby(): JSX.Element {\n  const params = useParams<{ readonly name: string }>();\n  const client = useContext(GameClientContext);\n\n  const [game, setGame] = useState<\n    GameListData | FogOfWarGameData | undefined\n  >();\n\n  async function pullGameState() {\n    const fetchedGame = await client.gamesFetch(params.name);\n    setGame(fetchedGame);\n  }\n\n  useEffect(() => {\n    pullGameState();\n    // TODO: Make the polling exponentially back-off when idle.\n    const pollTimer = setInterval(pullGameState, 1000);\n    return () => {\n      clearInterval(pollTimer);\n    };\n  }, [client]);\n\n  const { goBack } = useHistory();\n  if (!game) {\n    return (\n      <>\n        <h1>\n          Game <code>{params.name}</code> not found.\n        </h1>\n        <p>Either this game has been deleted, or the link is expired.</p>\n        <Button onClick={goBack}>Go Back</Button>\n      </>\n    );\n  } else if (game.kind === 'Lobby') {\n    return (\n      <ViewGameLobby\n        data={game as GameLobbyData}\n        onStart={async (seed, systems) => {\n          setGame(await client.gamesStart(params.name, seed, systems));\n        }}\n      />\n    );\n  } else {\n    return (\n      <GameContext.Provider value={game as FogOfWarGameData}>\n        <PlayGame\n          onResign={async () => {\n            await client.gameResign(game.name);\n          }}\n          onEndTurn={async () => {\n            // TODO: Make a context object tied to this game.\n            await client.gameEndTurn(game.name);\n          }}\n        />\n      </GameContext.Provider>\n    );\n  }\n}\n\nexport function GamesRoute(): JSX.Element {\n  return (\n    <>\n      <Switch>\n        <Route exact path=\"/games/create\" component={CreateGames} />\n        <Route path=\"/games/:name\" component={ViewGameOrLobby} />\n        <Route exact path=\"/games\" component={ListGames} />\n      </Switch>\n    </>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './app/App';\nimport './index.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","export function deepClone<T>(input: T): T {\n  return JSON.parse(JSON.stringify(input));\n}\n\nexport function repeat(length: number): number[] {\n  return new Array(length).fill(null).map((_, i) => i);\n}\n\nexport function matrix<T>(height: number, width: number): T[][] {\n  return new Array(height).fill(null).map(() => new Array(width).fill(null));\n}\n","import { FogOfWarGameData, GameListData, GameLobbyData } from './game-state';\n\n/**\n * Represents a connection to a game server.\n */\nexport abstract class GameClient {\n  /**\n   * Logs in the user.\n   */\n  abstract accountLogin(): Promise<void>;\n\n  /**\n   * Logs out the user.\n   */\n  abstract accountLogout(): Promise<void>;\n\n  /**\n   * Fetches a single game.\n   */\n  abstract gamesFetch(\n    name: string,\n  ): Promise<FogOfWarGameData | GameListData | undefined>;\n\n  /**\n   * Lists active games.\n   */\n  abstract gamesList(): Promise<GameListData[]>;\n\n  /**\n   * Deletes a game.\n   */\n  abstract gamesDelete(name: string): Promise<void>;\n\n  /**\n   * Creates a game (lobby).\n   */\n  abstract gamesCreate(name: string, players: number): Promise<GameLobbyData>;\n\n  /**\n   * Starts a game.\n   */\n  abstract gamesStart(\n    name: string,\n    seed: string,\n    systems: number,\n  ): Promise<FogOfWarGameData>;\n\n  /**\n   * Ends your turn.\n   */\n  abstract gameEndTurn(name: string): Promise<void>;\n\n  /**\n   * Resigns from the game.\n   */\n  abstract gameResign(name: string): Promise<void>;\n}\n","import Prando from 'prando';\nimport { v4 } from 'uuid';\nimport {\n  FleetData,\n  FogOfWarGameData,\n  FogOfWarSystemData,\n  GameSettingsData,\n  GameStateData,\n  HudIndicatorTag,\n  OwnerData,\n  PlanetData,\n  PlayerStateData,\n  SystemData,\n} from './game-state';\nimport { PoissonMapGenerator } from './map-generator';\nimport { PoissonDiskSampler } from './poisson-disk';\nimport { deepClone } from './utils';\n\nexport function viewGameStateAs(\n  state: GameStateData,\n  perspective: string,\n): FogOfWarGameData | undefined {\n  for (const player of state.players) {\n    if (player.userId === perspective) {\n      return player.fogOfWar;\n    }\n  }\n}\n\nexport class FogOfWar {\n  createInitialFogOfWar(\n    state: GameStateData,\n    serverAgent: boolean,\n    playerId: string,\n  ): FogOfWarGameData {\n    let player!: PlayerStateData;\n    for (const p of state.players) {\n      if (p.userId === playerId) {\n        player = p;\n        break;\n      }\n    }\n    return {\n      kind: 'Game',\n      currentTurn: state.currentTurn,\n      name: state.name,\n      players: state.players.length,\n      endedTurn: serverAgent,\n      fleets: [],\n      systems: state.systems.map((system) => {\n        return this.revealSystem(system, player);\n      }),\n    };\n  }\n\n  // TODO: Add an option to reveal a non-friendly system.\n  revealSystem(input: SystemData, player: PlayerStateData): FogOfWarSystemData {\n    const status = this.determineStatus(input, player.userId);\n    let fleet: Partial<FleetData> = {};\n    let factories: number | undefined;\n    let planets: PlanetData[] | undefined;\n    if (status === 'Self') {\n      fleet = input.orbit;\n      factories = input.factories;\n      planets = input.planets;\n    }\n    return {\n      name: input.name,\n      position: input.position,\n      status,\n      orbit: fleet,\n      factories,\n      planets,\n    };\n  }\n\n  private determineStatus(system: SystemData, player: string): HudIndicatorTag {\n    if (system.owner === 'Empire') {\n      return;\n    }\n    if (system.owner.player === player) {\n      return 'Self';\n    }\n  }\n}\n\nexport class RandomSpawner {\n  private randomEmpireFactories(\n    prando: Prando,\n    initialFactories: number,\n  ): number {\n    return prando.nextInt(\n      Math.floor(initialFactories / 4),\n      Math.floor(initialFactories / 2),\n    );\n  }\n\n  private spawnEmpireFleet(prando: Prando): FleetData {\n    // TODO: Make this scale with difficulty, once that's a thing.\n    const ratio = 1;\n    const warships = prando.nextInt(10, 30) * ratio;\n    return {\n      // TODO: Determine whether these are applicable for Empire.\n      transports: 0,\n      troops: 0,\n      warships,\n    };\n  }\n\n  private spawnPlayerFleet(prando: Prando): FleetData {\n    const warships = prando.nextInt(180, 240);\n    const transports = prando.nextInt(20, 30);\n    const troops = transports * 50;\n    return { transports, troops, warships };\n  }\n\n  spawnPlanet(prando: Prando, owner: OwnerData): PlanetData {\n    // TODO: Make initial generation more fair by giving players a chance to\n    // have a slight advantage in some area (i.e. better planets, more troops,\n    // more ships) without possibly having all of those or none of those.\n    return {\n      guid: v4(),\n      morale: 1,\n      owner,\n      troops: prando.nextInt(20, 80),\n      // TODO: Weight this, so it's more common to get ~4.\n      recruit: prando.nextInt(1, 10),\n    };\n  }\n\n  spawnInitialSystems(\n    prando: Prando,\n    systems: number,\n    settings: GameSettingsData,\n    players: PlayerStateData[],\n  ): SystemData[] {\n    const ratio = systems / 26;\n    const sampler = new PoissonDiskSampler(\n      [Math.ceil(50 * ratio), Math.ceil(30 * ratio)],\n      4,\n      undefined,\n      prando,\n    );\n    const generator = new PoissonMapGenerator(sampler, prando);\n    players = deepClone(players).sort(() => prando.nextInt(-1, 1));\n    return generator.generateMap(systems, players.length).map((stub) => {\n      let owner: OwnerData;\n      let orbit: FleetData;\n      let factories: number;\n      let planets: PlanetData[];\n      if (stub.home) {\n        owner = { player: players.splice(0, 1)[0].userId };\n        orbit = this.spawnPlayerFleet(prando);\n        factories = settings.initialFactories;\n        planets = new Array(10)\n          .fill(null)\n          .map(() => this.spawnPlanet(prando, owner));\n      } else {\n        owner = 'Empire';\n        orbit = this.spawnEmpireFleet(prando);\n        factories = this.randomEmpireFactories(\n          prando,\n          settings.initialFactories,\n        );\n        planets = new Array(prando.nextInt(2, 5))\n          .fill(null)\n          .map(() => this.spawnPlanet(prando, owner));\n      }\n      return {\n        name: stub.name,\n        home: owner,\n        owner,\n        position: stub.position,\n        orbit,\n        factories,\n        planets,\n      };\n    });\n  }\n}\n\nexport class TurnProcessor {\n  nextTurn(state: GameStateData): GameStateData {\n    return {\n      ...state,\n      currentTurn: state.currentTurn + 1,\n      players: state.players.map((player) => {\n        return {\n          ...player,\n          fogOfWar: {\n            ...player.fogOfWar,\n            currentTurn: player.fogOfWar.currentTurn + 1,\n            endedTurn: player.serverAgent,\n          },\n        };\n      }),\n    };\n  }\n}\n","import React from 'react';\nimport { GameClient } from '../../common/game-client';\nimport { GameServer } from '../../common/game-server';\nimport {\n  FogOfWarGameData,\n  GameListData,\n  GameLobbyData,\n  GameStateData,\n} from '../../common/game-state';\n\nexport class LocalGameServer extends GameServer {\n  constructor(private readonly storage = localStorage) {\n    super(\n      (() => {\n        const result = storage.getItem('games');\n        return result ? JSON.parse(result) : {};\n      })(),\n    );\n  }\n\n  protected async writeState<T extends GameLobbyData | GameStateData>(\n    name: string,\n    data: T,\n  ): Promise<T> {\n    const result = await super.writeState(name, data);\n    this.storage.setItem('games', JSON.stringify(this.games));\n    return result;\n  }\n\n  protected async deleteState(name: string): Promise<void> {\n    await super.deleteState(name);\n    this.storage.setItem('games', JSON.stringify(this.games));\n  }\n}\n\nexport class LocalGameClient extends GameClient {\n  constructor(\n    private player: string = 'Guest',\n    private readonly server: GameServer = new LocalGameServer(),\n  ) {\n    super();\n  }\n\n  async accountLogin(): Promise<void> {\n    // Intentionally left blank.\n  }\n\n  async accountLogout(): Promise<void> {\n    // Intentionally left blank.\n  }\n\n  async gamesFetch(\n    name: string,\n  ): Promise<GameLobbyData | GameListData | FogOfWarGameData | undefined> {\n    return this.server.onGamesFetch(this.player, name);\n  }\n\n  async gamesList(): Promise<GameListData[]> {\n    return this.server.onGamesList();\n  }\n\n  async gamesDelete(name: string): Promise<void> {\n    return this.server.onGamesDelete(this.player, { name });\n  }\n\n  async gamesCreate(name: string, players: number): Promise<GameLobbyData> {\n    return this.server.onGamesCreate(this.player, { name, players });\n  }\n\n  async gamesStart(\n    name: string,\n    seed: string,\n    systems: number,\n  ): Promise<FogOfWarGameData> {\n    return this.server.onGamesStart(this.player, { name, seed, systems });\n  }\n\n  async gameEndTurn(name: string): Promise<void> {\n    return this.server.onGameEndTurn(this.player, { name });\n  }\n\n  async gameResign(name: string): Promise<void> {\n    return this.server.onGameResign(this.player, { name });\n  }\n}\n\nexport const GameClientContext = React.createContext<GameClient>(\n  new LocalGameClient(),\n);\n","import Prando from 'prando';\nimport {\n  FogOfWar,\n  RandomSpawner,\n  TurnProcessor,\n  viewGameStateAs,\n} from './game-logic';\nimport {\n  FogOfWarGameData,\n  GameListData,\n  GameLobbyData,\n  GameSettingsData,\n  GameStateData,\n  PlayerStateData,\n} from './game-state';\nimport { deepClone } from './utils';\n\n/**\n * Represents a game server.\n */\nexport class GameServer {\n  private readonly fogOfWar = new FogOfWar();\n  private readonly spawner = new RandomSpawner();\n  private readonly turnProcessor = new TurnProcessor();\n\n  constructor(\n    protected readonly games: {\n      [key: string]: GameLobbyData | GameStateData;\n    },\n    protected readonly prando = new Prando(),\n  ) {}\n\n  protected async readState(\n    name: string,\n  ): Promise<GameLobbyData | GameStateData | undefined> {\n    const result = this.games[name];\n    return result ? deepClone(result) : undefined;\n  }\n\n  /**\n   * Implementations of @see GameServer that persist data should override.\n   */\n  protected async writeState<T extends GameLobbyData | GameStateData>(\n    name: string,\n    data: T,\n  ): Promise<T> {\n    data = { ...deepClone(data), lastUpdated: this.currentTime() };\n    return (this.games[name] = data);\n  }\n\n  /**\n   * Implementations of @see GameServer that persist data should override.\n   */\n  protected async deleteState(name: string): Promise<void> {\n    delete this.games[name];\n  }\n\n  /**\n   * Returns the current timestamp.\n   */\n  protected currentTime(): number {\n    return new Date().getTime();\n  }\n\n  /**\n   * Maps and replaces the @see PlayerStateData for @param game/@param player.\n   */\n  protected async writePlayer(\n    game: string,\n    player: string,\n    map: (data: PlayerStateData) => PlayerStateData,\n  ): Promise<GameStateData | undefined> {\n    const state = await this.readState(game);\n    if (state && state.kind === 'Game') {\n      for (let i = 0; i < state.players.length; i++) {\n        if (state.players[i].userId === player) {\n          state.players[i] = map(state.players[i]);\n        }\n      }\n      return this.writeState(game, state);\n    }\n    // TODO: Handle this case.\n    return;\n  }\n\n  /**\n   * Processes a login request.\n   *\n   * Implementations that want authorization should override this method.\n   */\n  async onAccountLogin(): Promise<void> {\n    // Intentionally left blank.\n  }\n\n  /**\n   * Processes a game fetch request.\n   */\n  async onGamesFetch(\n    player: string,\n    name: string,\n  ): Promise<GameLobbyData | GameListData | FogOfWarGameData | undefined> {\n    for (const game of Object.values(this.games)) {\n      if (game.name === name) {\n        if (game.kind === 'Lobby') {\n          return game;\n        } else {\n          return viewGameStateAs(game, player);\n        }\n      }\n    }\n  }\n\n  /**\n   * Processes a game list request.\n   */\n  async onGamesList(): Promise<GameListData[]> {\n    return Object.values(this.games).map((value) => {\n      return {\n        name: value.name,\n        kind: value.kind,\n        lastUpdated: value.lastUpdated,\n        players:\n          typeof value.players === 'number'\n            ? value.players\n            : value.players.length,\n      };\n    });\n  }\n\n  /**\n   * Processes a game creation request.\n   */\n  async onGamesCreate(\n    player: string,\n    request: {\n      name: string;\n      players: number;\n    },\n  ): Promise<GameLobbyData> {\n    return this.writeState(request.name, {\n      ...request,\n      seed: this.prando.nextString(10),\n      createdBy: player,\n      kind: 'Lobby',\n      lastUpdated: this.currentTime(),\n    });\n  }\n\n  /**\n   * Processes a game deletion request.\n   *\n   * @param _player\n   * @param request\n   */\n  async onGamesDelete(\n    _player: string,\n    request: {\n      name: string;\n    },\n  ): Promise<void> {\n    // TODO: Enforce player created the game being deleted or is an admin.\n    // TODO: Enforce the game exists.\n    return this.deleteState(request.name);\n  }\n\n  /**\n   * Processes a game start request.\n   *\n   * @param player\n   * @param request\n   */\n  async onGamesStart(\n    player: string,\n    request: {\n      name: string;\n      seed: string;\n      systems: number;\n    },\n  ): Promise<FogOfWarGameData> {\n    // TODO: Enforce player created the game being started.\n    // TODO: Enforce the game exists and hasn't already been started.\n    // TODO: Enforce the player is in the game that is starting.\n    // TODO: Enforce systems are valid.\n    const pending = (await this.readState(request.name)) as GameLobbyData;\n    // TODO: Support multiplayer.\n    const players: PlayerStateData[] = [\n      {\n        name: 'Human',\n        userId: 'Guest',\n        fogOfWar: {} as FogOfWarGameData,\n        serverAgent: false,\n      },\n      ...new Array(pending.players - 1).fill(null).map((_, i) => {\n        return {\n          name: `AI ${i + 1}`,\n          userId: `ai-${i + 1}`,\n          fogOfWar: {} as FogOfWarGameData,\n          serverAgent: true,\n        };\n      }),\n    ];\n    // TODO: Allow customization of these settings.\n    const settings: GameSettingsData = {\n      initialFactories: 10,\n      shipSpeedATurn: 4,\n    };\n    // TODO: Move all this logic into a logic class.\n    const systems = this.spawner.spawnInitialSystems(\n      new Prando(request.seed),\n      request.systems,\n      settings,\n      players,\n    );\n    const initialState: GameStateData = {\n      name: pending.name,\n      lastUpdated: this.currentTime(),\n      createdBy: player,\n      currentTurn: 1,\n      kind: 'Game',\n      players,\n      fleets: [],\n      systems,\n      settings,\n    };\n    const stateWithFogOfWar: GameStateData = {\n      ...initialState,\n      players: initialState.players.map((player) => {\n        return {\n          ...player,\n          fogOfWar: this.fogOfWar.createInitialFogOfWar(\n            initialState,\n            player.serverAgent,\n            player.userId,\n          ),\n        };\n      }),\n    };\n    await this.writeState(request.name, stateWithFogOfWar);\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return viewGameStateAs(stateWithFogOfWar, player)!;\n  }\n\n  /**\n   * Processes an \"end turn\" request.\n   */\n  async onGameEndTurn(\n    player: string,\n    request: { name: string },\n  ): Promise<void> {\n    const result = await this.writePlayer(request.name, player, (data) => {\n      return {\n        ...data,\n        fogOfWar: {\n          ...data.fogOfWar,\n          endedTurn: true,\n        },\n      };\n    });\n    if (result) {\n      const processTurn = result.players.every((p) => p.fogOfWar.endedTurn);\n      if (processTurn) {\n        await this.writeState(\n          request.name,\n          this.turnProcessor.nextTurn(result),\n        );\n      }\n    }\n  }\n\n  async onGameResign(player: string, request: { name: string }): Promise<void> {\n    const result = await this.writePlayer(request.name, player, (data) => {\n      return {\n        ...data,\n        serverAgent: true,\n        fogOfWar: {\n          ...data.fogOfWar,\n          endedTurn: true,\n        },\n      };\n    });\n    if (result) {\n      // TODO: Add this to the end-turn report for players.\n      const terminateGame = result.players.every((p) => p.serverAgent);\n      if (terminateGame) {\n        await this.deleteState(request.name);\n      } else {\n        const processTurn = result.players.every((p) => p.fogOfWar.endedTurn);\n        if (processTurn) {\n          await this.writeState(\n            request.name,\n            this.turnProcessor.nextTurn(result),\n          );\n        }\n      }\n    }\n  }\n}\n","import Prando from 'prando';\nimport { PointData } from './game-state';\n\nfunction dist2(x1: number, y1: number, x2: number, y2: number): number {\n  return (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);\n}\n\n/**\n * @see https://github.com/ogus/poisson-disk/blob/master/src/poisson-disk.js.\n */\nexport class PoissonDiskSampler {\n  private readonly xMin = 0;\n  private readonly yMin = 0;\n  private readonly xMax: number;\n  private readonly yMax: number;\n  private readonly radius: number;\n  private readonly cellSize: number;\n  private readonly k: number;\n\n  private state!: {\n    width: number;\n    height: number;\n    data: [number, number][];\n  };\n  private queue!: [number, number][];\n  private firstPoint = true;\n\n  constructor(\n    viewport: [number, number],\n    minDistance = 1,\n    maxTries = 30,\n    private readonly prando = new Prando(),\n  ) {\n    this.xMax = viewport[0];\n    this.yMax = viewport[1];\n    this.radius = Math.max(minDistance, 1);\n    this.cellSize = this.radius * Math.SQRT1_2;\n    this.k = Math.max(maxTries, 2);\n    this.reset();\n  }\n\n  /**\n   * Reset the sampler.\n   */\n  reset(): void {\n    const width = Math.ceil((this.xMax - this.xMin) / this.cellSize);\n    const height = Math.ceil((this.yMax - this.yMin) / this.cellSize);\n    this.state = {\n      width,\n      height,\n      data: new Array(width * height).fill(null),\n    };\n    this.queue = [];\n    this.firstPoint = true;\n  }\n\n  /**\n   * Creates and returns a new point.\n   *\n   * @param x\n   * @param y\n   */\n  private createPoint(x: number, y: number): PointData {\n    const index =\n      Math.floor(x / this.cellSize) +\n      Math.floor(y / this.cellSize) * this.state.width;\n    const point = (this.state.data[index] = [x, y]);\n    this.queue.push(point);\n    return point;\n  }\n\n  /**\n   * Returns whether the provided points are valid.\n   *\n   * @param x\n   * @param y\n   */\n  private isValidPoint(x: number, y: number): boolean {\n    if (x < this.xMin || x > this.xMax || y < this.yMin || y > this.yMax) {\n      return false;\n    }\n    const col = Math.floor((x - this.xMin) / this.cellSize);\n    const row = Math.floor((y - this.yMin) / this.cellSize);\n    let index = 0;\n    for (let i = col - 2; i <= col + 2; i++) {\n      for (let j = row - 2; j <= row + 2; j++) {\n        if (i >= 0 && i < this.state.width && j >= 0 && j < this.state.height) {\n          index = i + j * this.state.width;\n          if (\n            this.state.data[index] !== null &&\n            dist2(x, y, this.state.data[index][0], this.state.data[index][1]) <=\n              this.radius * this.radius\n          ) {\n            return false;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Returns a standard `Math.random()`-like result.\n   */\n  private rng(): number {\n    return this.prando.next();\n  }\n\n  /**\n   * Returns the next point in the sampling, or `null` if there is no more.\n   */\n  nextPoint(): PointData | null {\n    let x = 0;\n    let y = 0;\n    if (this.firstPoint) {\n      this.firstPoint = false;\n      x = this.xMin + (this.xMax - this.xMin) * this.rng();\n      y = this.yMin + (this.yMax - this.yMin) * this.rng();\n      return this.createPoint(x, y);\n    }\n    let index = 0;\n    let distance = 0;\n    let angle = 0;\n    while (this.queue.length) {\n      index = (this.queue.length * this.rng()) | 0;\n      for (let i = 0; i < this.k; i++) {\n        distance = this.radius * (this.rng() + 1);\n        angle = 2 * Math.PI * this.rng();\n        x = this.queue[index][0] + distance * Math.cos(angle);\n        y = this.queue[index][1] + distance * Math.sin(angle);\n        if (this.isValidPoint(x, y)) {\n          return this.createPoint(x, y);\n        }\n      }\n      this.queue.splice(index, 1);\n    }\n    return null;\n  }\n\n  /**\n   * Returns whether there are no points.\n   */\n  get done(): boolean {\n    return !this.firstPoint && this.queue.length === 0;\n  }\n\n  /**\n   * Returns all the points possible, up to a maximum requested.\n   *\n   * @param max\n   */\n  points(max: number = Number.MAX_SAFE_INTEGER): [number, number][] {\n    const result: [number, number][] = [];\n    for (let i = 0; i < max; i++) {\n      const point = this.nextPoint();\n      if (point) {\n        result.push(point);\n      }\n    }\n    return result;\n  }\n}\n"],"sourceRoot":""}