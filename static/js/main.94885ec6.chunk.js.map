{"version":3,"sources":["app/contexts/auth.ts","app/App.tsx","app/routes/Account.tsx","app/routes/Default.tsx","common/name-generator.ts","app/routes/Games/Create.tsx","app/routes/Games/List.tsx","common/game-state.ts","common/poisson-disk.ts","common/map-generator.ts","app/ui/Map.tsx","app/routes/Games/Lobby.tsx","app/routes/Games.tsx","index.tsx","common/game-client.ts","common/game-server.ts","app/contexts/client.ts"],"names":["GlobalAuthContext","React","createContext","App","hot","module","useCookies","cookies","setCookies","useState","authState","setAuthState","Header","className","to","src","theme","mode","selectable","Item","disabled","icon","Provider","value","Content","path","onChange","state","type","AccountRoute","props","context","useContext","labelCol","span","wrapperCol","onClick","danger","Default","client","GameClientContext","pendingGames","setPendingGames","useEffect","a","gamesList","gameList","length","NameGenerator","rng","Prando","adjectives","nouns","this","nextArrayItem","nextInt","toString","padStart","CreateGames","Form","useForm","form","replace","useHistory","saving","setSaving","setFieldsValue","name","next","players","onFinish","values","gamesCreate","result","label","extra","maxLength","min","max","Group","Button","LoadingOutlined","undefined","style","width","htmlType","ListGames","push","games","setGames","fetchGames","dataSource","sort","b","lastUpdated","map","v","key","status","kind","PlusOutlined","columns","title","dataIndex","locale","emptyText","pagination","Point","data","x","y","x1","y1","Array","x2","y2","parseFloat","Math","sqrt","pow","toFixed","PoissonDiskSampler","viewport","minDistance","maxTries","prando","xMin","yMin","xMax","yMax","radius","cellSize","k","queue","firstPoint","SQRT1_2","reset","ceil","height","fill","index","floor","point","col","row","i","j","createPoint","distance","angle","PI","cos","sin","isValidPoint","splice","Number","MAX_SAFE_INTEGER","nextPoint","PoissonMapGenerator","sampler","names","isArray","systems","fetchNames","points","position","home","pickFairestHomeSystem","reducePositionsToOrigin","amount","slice","maxDistance","isHome","weight","positions","lowSum","weights","computeDistanceWeight","sumWeight","reduce","p","c","open","filter","s","Error","minX","minY","system","simpleVisualize","forEach","grid","substring","MapPreview","border","padding","join","GameLobby","listAiPlayers","seed","setSeed","setSystems","preview","setPreview","ratio","generator","generateMap","Meta","avatar","UserOutlined","description","_","LaptopOutlined","readOnly","minLength","target","parseInt","gamesDelete","ViewGameOrLobby","params","useParams","game","setGame","gamesFetch","goBack","onStart","GamesRoute","exact","component","ReactDOM","render","document","getElementById","GameClient","deepClone","input","JSON","parse","stringify","LocalGameServer","storage","localStorage","getItem","setItem","Date","getTime","Object","player","request","writeState","nextString","createdBy","currentTime","_player","deleteState","LocalGameClient","server","onGamesFetch","onGamesList","onGamesDelete","onGamesCreate"],"mappings":"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","file":"static/js/main.94885ec6.chunk.js","sourcesContent":["import React from 'react';\n\n/**\n * Authentication state.\n *\n * Represents either logged out, logged in as a guest, logged in with Discord.\n */\nexport type GlobalAuthState = null | 'Guest' | { discordId: string };\nexport const GlobalAuthContext = React.createContext<GlobalAuthState>(null);\n","import {\n  DatabaseOutlined,\n  SettingOutlined,\n  UserOutlined,\n} from '@ant-design/icons';\nimport { Button, Layout, Menu } from 'antd';\nimport React, { useState } from 'react';\nimport { useCookies } from 'react-cookie';\nimport { hot } from 'react-hot-loader';\nimport { BrowserRouter as Router, Link, Route, Switch } from 'react-router-dom';\nimport './App.scss';\nimport { GlobalAuthContext, GlobalAuthState } from './contexts/auth';\nimport { AccountRoute } from './routes/Account';\nimport { Default } from './routes/Default';\nimport { GamesRoute } from './routes/Games';\n\nfunction app(): JSX.Element {\n  const [cookies, setCookies] = useCookies(['auth']);\n  const [authState, setAuthState] = useState<GlobalAuthState>(cookies['auth']);\n\n  const updateAuth = (state: GlobalAuthState) => {\n    setCookies('auth', state);\n    setAuthState(state);\n  };\n\n  return (\n    <Router>\n      <Layout>\n        <Layout.Header>\n          <div className=\"logo\">\n            <Link to=\"/\">\n              <img src=\"/images/logo.png\" />\n            </Link>\n          </div>\n          <Menu theme=\"dark\" mode=\"horizontal\" selectable={false}>\n            <Menu.Item disabled={!authState} icon={<DatabaseOutlined />}>\n              <Link to=\"/games\">Games</Link>\n            </Menu.Item>\n            <Menu.Item icon={<UserOutlined />}>\n              <Link to=\"/account\">Account</Link>\n            </Menu.Item>\n            <Menu.Item disabled icon={<SettingOutlined />}>\n              <Link to=\"/settings\">Settings</Link>\n            </Menu.Item>\n          </Menu>\n        </Layout.Header>\n        <GlobalAuthContext.Provider value={authState}>\n          <Layout.Content>\n            <Switch>\n              <Route path=\"/games\">\n                <GamesRoute />\n              </Route>\n              <Route path=\"/account\">\n                <AccountRoute onChange={updateAuth} />\n              </Route>\n              <Route path=\"/settings\">Hello Settings</Route>\n              <Route path=\"/\">\n                {!authState ? (\n                  <>\n                    <Button type=\"dashed\">\n                      <Link to=\"/account\">\n                        <UserOutlined /> Login Required\n                      </Link>\n                    </Button>\n                  </>\n                ) : (\n                  <Default />\n                )}\n              </Route>\n            </Switch>\n          </Layout.Content>\n        </GlobalAuthContext.Provider>\n      </Layout>\n    </Router>\n  );\n}\n\nexport const App = hot(module)(app);\n","import { Button, Form } from 'antd';\nimport React, { useContext } from 'react';\nimport { GlobalAuthContext, GlobalAuthState } from '../contexts/auth';\nimport './Account.scss';\n\nexport interface AccountRateProps {\n  onChange: (newState: GlobalAuthState) => void;\n}\n\nexport function AccountRoute(props: AccountRateProps): JSX.Element {\n  const context = useContext(GlobalAuthContext);\n\n  return (\n    <Form\n      className=\"account-form\"\n      labelCol={{ span: 8 }}\n      wrapperCol={{ span: 16 }}\n    >\n      <h1>Account</h1>\n      <p>\n        A login is required to play <strong>Third Conflict</strong>. Currently\n        you can login as a <strong>Guest</strong> and create and play games\n        locally. In <em>future</em> releases you will be able to login with{' '}\n        <strong>Discord</strong> and play online.\n      </p>\n      {!context && (\n        <Form.Item>\n          <Button type=\"primary\" onClick={() => props.onChange('Guest')}>\n            Login as Guest\n          </Button>\n          <Button type=\"ghost\" disabled>\n            Login with Discord\n          </Button>\n        </Form.Item>\n      )}\n      {context && (\n        <Button type=\"primary\" danger onClick={() => props.onChange(null)}>\n          Logout\n        </Button>\n      )}\n    </Form>\n  );\n}\n","import { useContext, useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { GameClientContext } from '../contexts/client';\nimport './Default.scss';\n\nexport function Default(): JSX.Element {\n  const client = useContext(GameClientContext);\n  const [pendingGames, setPendingGames] = useState<number | undefined>();\n  useEffect(() => {\n    (async () => {\n      const gameList = await client.gamesList();\n      setPendingGames(gameList.length);\n    })();\n  }, [client]);\n  return (\n    <>\n      <h1>\n        Welcome back to <strong>Third Conflict</strong>\n      </h1>\n      <p>\n        {/* TODO: Show loading indicator. */}\n        You have <Link to=\"/games\">{pendingGames} pending game(s)</Link>.\n      </p>\n    </>\n  );\n}\n","import Prando from 'prando';\n\nexport class NameGenerator {\n  constructor(\n    private readonly rng = new Prando(),\n    private readonly adjectives: string[] = [\n      'angry',\n      'attractive',\n      'bald',\n      'big',\n      'brave',\n      'clumsy',\n      'fierce',\n      'happy',\n      'itchy',\n      'handsome',\n      'petite',\n      'repulsive',\n      'silly',\n      'stocky',\n      'tall',\n      'tiny',\n      'wonderful',\n      'zealous',\n    ],\n    private readonly nouns: string[] = [\n      'antelope',\n      'cat',\n      'dog',\n      'eagle',\n      'gorilla',\n      'lion',\n      'rabbit',\n      'snake',\n      'tiger',\n      'vulture',\n      'zebra',\n    ],\n  ) {}\n\n  next(): string {\n    return `${this.rng.nextArrayItem(this.adjectives)}-${this.rng.nextArrayItem(\n      this.nouns,\n    )}-${this.rng.nextInt(0, 99).toString().padStart(2, '0')}`;\n  }\n}\n","import { LoadingOutlined } from '@ant-design/icons';\nimport { Button, Form, Input, InputNumber, Radio } from 'antd';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { NameGenerator } from '../../../common/name-generator';\nimport { GameClientContext } from '../../contexts/client';\n\ninterface CreateGameForm {\n  name: string;\n  players: number;\n}\n\nexport function CreateGames(): JSX.Element {\n  const [form] = Form.useForm<CreateGameForm>();\n  const { replace } = useHistory();\n  const client = useContext(GameClientContext);\n  const [saving, setSaving] = useState(false);\n\n  function initializeForm() {\n    form.setFieldsValue({ name: new NameGenerator().next(), players: 2 });\n  }\n\n  useEffect(initializeForm, []);\n  return (\n    <>\n      <h1>Create a Game</h1>\n      <p>\n        Currently, you can create <strong>local</strong> (offline) games with AI\n        opponents. In future builds, once logged in with{' '}\n        <strong>Discord</strong>, you will be able to create and play online\n        games.\n      </p>\n      <Form\n        labelCol={{ span: 1 }}\n        wrapperCol={{ span: 4 }}\n        form={form}\n        onFinish={async (values) => {\n          setSaving(true);\n          const result = await client.gamesCreate(values.name, values.players);\n          replace(`/games/${result.name}`);\n        }}\n      >\n        <Form.Item\n          name=\"name\"\n          label=\"Name\"\n          extra={<>This name is just used for reference only.</>}\n        >\n          <Input maxLength={30} />\n        </Form.Item>\n        <Form.Item\n          name=\"players\"\n          label=\"Players\"\n          extra={<>2-4 players currently supported.</>}\n        >\n          <InputNumber min={2} max={4} />\n        </Form.Item>\n        <Form.Item\n          name=\"online\"\n          label=\"Connectivity\"\n          extra={<>Local games are versus AI and played offline.</>}\n        >\n          <Radio.Group>\n            <Radio.Button value={false}>Local</Radio.Button>\n            <Radio.Button value={true} disabled>\n              Online\n            </Radio.Button>\n          </Radio.Group>\n        </Form.Item>\n        <Form.Item wrapperCol={{ span: 5 }}>\n          <Button\n            disabled={saving}\n            icon={saving ? <LoadingOutlined /> : undefined}\n            type=\"primary\"\n            style={{ width: '100%' }}\n            htmlType=\"submit\"\n          >\n            {saving ? <>Saving</> : <>Create Game</>}\n          </Button>\n        </Form.Item>\n      </Form>\n    </>\n  );\n}\n","import { PlusOutlined } from '@ant-design/icons';\nimport { Button, Table } from 'antd';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport { GameListData } from '../../../common/game-state';\nimport { GameClientContext } from '../../contexts/client';\n\nexport function ListGames(): JSX.Element {\n  const client = useContext(GameClientContext);\n  const { push } = useHistory();\n  const [games, setGames] = useState<GameListData[]>([]);\n\n  async function fetchGames() {\n    setGames(await client.gamesList());\n  }\n\n  useEffect(() => {\n    fetchGames();\n  }, [client]);\n\n  const dataSource = games\n    .sort((a, b) => a.lastUpdated - b.lastUpdated)\n    .map((v) => {\n      return {\n        name: <Link to={`/games/${v.name}`}>{v.name}</Link>,\n        key: v.name,\n        players: v.players,\n        status: v.kind === 'Lobby' ? 'Not Started' : 'In Progress',\n      };\n    });\n\n  return (\n    <>\n      <h1>Games</h1>\n      <p className=\"games-buttons\">\n        <Button\n          icon={<PlusOutlined />}\n          type=\"dashed\"\n          onClick={() => {\n            push('/games/create');\n          }}\n        >\n          Create Game\n        </Button>\n\n        <Button\n          icon={<PlusOutlined />}\n          type=\"dashed\"\n          disabled\n          onClick={() => {\n            push('/games/join');\n          }}\n        >\n          Join Game\n        </Button>\n      </p>\n      <Table\n        columns={[\n          { title: 'Name', dataIndex: 'name' },\n          { title: 'Players', dataIndex: 'players' },\n          { title: 'Status', dataIndex: 'status' },\n        ]}\n        dataSource={dataSource}\n        locale={{ emptyText: 'You are not in any games.' }}\n        pagination={false}\n      />\n    </>\n  );\n}\n","/**\n * Represents minimal information about a game for listing purposes.\n */\nexport interface GameListData {\n  /**\n   * Name of the game, used for matchmaking and reference purposes.\n   */\n  readonly name: string;\n\n  /**\n   * Number of players.\n   */\n  readonly players: number;\n\n  /**\n   * Last updated timestamp.\n   */\n  readonly lastUpdated: number;\n\n  /**\n   * Type of game saved data.\n   */\n  readonly kind: 'Lobby' | 'Game';\n}\n\n/**\n * Represents a game that has not yet been started.\n */\nexport interface GameLobbyData {\n  /**\n   * Name of the game, used for matchmaking and reference purposes.\n   */\n  readonly name: string;\n\n  /**\n   * Used to procedurally generate the map and empire.\n   */\n  readonly seed: string;\n\n  /**\n   * Which player created and administrates the game.\n   */\n  readonly createdBy: string;\n\n  /**\n   * Last updated timestamp.\n   */\n  readonly lastUpdated: number;\n\n  /**\n   * Number of players.\n   */\n  readonly players: number;\n\n  /**\n   * Type of game saved data.\n   */\n  readonly kind: 'Lobby';\n}\n\n/**\n * Represents the complete game state at a point of time.\n */\nexport interface GameStateData {\n  /**\n   * Name of the game, used for matchmaking and reference purposes.\n   */\n  readonly name: string;\n\n  /**\n   * Last updated timestamp.\n   */\n  readonly lastUpdated: number;\n\n  /**\n   * Players in the game.\n   */\n  readonly players: PlayerStateData[];\n\n  /**\n   * Systems in the game.\n   */\n  readonly systems: SystemData[];\n\n  /**\n   * Type of game saved data.\n   */\n  readonly kind: 'Game';\n}\n\n/**\n * Represents the state of a player within a game.\n */\nexport interface PlayerStateData {\n  /**\n   * Name of the player.\n   */\n  readonly name: string;\n\n  /**\n   * User ID of the player (guaranteed unique).\n   */\n  readonly userId: string;\n}\n\n/**\n * Represents an {X, Y} coordinate pair.\n */\nexport type PointData = [number, number];\n\n/**\n * A helper class for wrapping and manipulating @see {PointData} instances.\n */\nexport class Point {\n  constructor(private readonly data: PointData) {}\n\n  get x(): number {\n    return this.data[0];\n  }\n\n  get y(): number {\n    return this.data[1];\n  }\n\n  distance(to: Point | PointData): number {\n    const [x1, y1] = [this.x, this.y];\n    const [x2, y2] = to instanceof Array ? to : [to.x, to.y];\n    return parseFloat(\n      Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2)).toFixed(2),\n    );\n  }\n}\n\n/**\n * Represents a \"tag\" for control of an entity.\n */\nexport type OwnerData = 'empire' | { player: string };\n\n/**\n * Represents a star system.\n */\nexport interface SystemData {\n  /**\n   * Position of the system.\n   */\n  readonly position: PointData;\n\n  /**\n   * Name of the system.\n   */\n  readonly name: string;\n\n  /**\n   * If defined, the userId of the which player this is a home system of.\n   */\n  readonly home: OwnerData | undefined;\n\n  /**\n   * The userId of which player controls the system.\n   *\n   * Note, this may conflict with @member home or individual planet control.\n   */\n  readonly owner: OwnerData;\n}\n","import Prando from 'prando';\nimport { PointData } from './game-state';\n\nfunction dist2(x1: number, y1: number, x2: number, y2: number): number {\n  return (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);\n}\n\n/**\n * @see https://github.com/ogus/poisson-disk/blob/master/src/poisson-disk.js.\n */\nexport class PoissonDiskSampler {\n  private readonly xMin = 0;\n  private readonly yMin = 0;\n  private readonly xMax: number;\n  private readonly yMax: number;\n  private readonly radius: number;\n  private readonly cellSize: number;\n  private readonly k: number;\n\n  private state!: {\n    width: number;\n    height: number;\n    data: [number, number][];\n  };\n  private queue!: [number, number][];\n  private firstPoint = true;\n\n  constructor(\n    viewport: [number, number],\n    minDistance = 1,\n    maxTries = 30,\n    private readonly prando = new Prando(),\n  ) {\n    this.xMax = viewport[0];\n    this.yMax = viewport[1];\n    this.radius = Math.max(minDistance, 1);\n    this.cellSize = this.radius * Math.SQRT1_2;\n    this.k = Math.max(maxTries, 2);\n    this.reset();\n  }\n\n  /**\n   * Reset the sampler.\n   */\n  reset(): void {\n    const width = Math.ceil((this.xMax - this.xMin) / this.cellSize);\n    const height = Math.ceil((this.yMax - this.yMin) / this.cellSize);\n    this.state = {\n      width,\n      height,\n      data: new Array(width * height).fill(null),\n    };\n    this.queue = [];\n    this.firstPoint = true;\n  }\n\n  /**\n   * Creates and returns a new point.\n   *\n   * @param x\n   * @param y\n   */\n  private createPoint(x: number, y: number): PointData {\n    const index =\n      Math.floor(x / this.cellSize) +\n      Math.floor(y / this.cellSize) * this.state.width;\n    const point = (this.state.data[index] = [x, y]);\n    this.queue.push(point);\n    return point;\n  }\n\n  /**\n   * Returns whether the provided points are valid.\n   *\n   * @param x\n   * @param y\n   */\n  private isValidPoint(x: number, y: number): boolean {\n    if (x < this.xMin || x > this.xMax || y < this.yMin || y > this.yMax) {\n      return false;\n    }\n    const col = Math.floor((x - this.xMin) / this.cellSize);\n    const row = Math.floor((y - this.yMin) / this.cellSize);\n    let index = 0;\n    for (let i = col - 2; i <= col + 2; i++) {\n      for (let j = row - 2; j <= row + 2; j++) {\n        if (i >= 0 && i < this.state.width && j >= 0 && j < this.state.height) {\n          index = i + j * this.state.width;\n          if (\n            this.state.data[index] !== null &&\n            dist2(x, y, this.state.data[index][0], this.state.data[index][1]) <=\n              this.radius * this.radius\n          ) {\n            return false;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Returns a standard `Math.random()`-like result.\n   */\n  private rng(): number {\n    return this.prando.next();\n  }\n\n  /**\n   * Returns the next point in the sampling, or `null` if there is no more.\n   */\n  nextPoint(): PointData | null {\n    let x = 0;\n    let y = 0;\n    if (this.firstPoint) {\n      this.firstPoint = false;\n      x = this.xMin + (this.xMax - this.xMin) * this.rng();\n      y = this.yMin + (this.yMax - this.yMin) * this.rng();\n      return this.createPoint(x, y);\n    }\n    let index = 0;\n    let distance = 0;\n    let angle = 0;\n    while (this.queue.length) {\n      index = (this.queue.length * this.rng()) | 0;\n      for (let i = 0; i < this.k; i++) {\n        distance = this.radius * (this.rng() + 1);\n        angle = 2 * Math.PI * this.rng();\n        x = this.queue[index][0] + distance * Math.cos(angle);\n        y = this.queue[index][1] + distance * Math.sin(angle);\n        if (this.isValidPoint(x, y)) {\n          return this.createPoint(x, y);\n        }\n      }\n      this.queue.splice(index, 1);\n    }\n    return null;\n  }\n\n  /**\n   * Returns whether there are no points.\n   */\n  get done(): boolean {\n    return !this.firstPoint && this.queue.length === 0;\n  }\n\n  /**\n   * Returns all the points possible, up to a maximum requested.\n   *\n   * @param max\n   */\n  points(max: number = Number.MAX_SAFE_INTEGER): [number, number][] {\n    const result: [number, number][] = [];\n    for (let i = 0; i < max; i++) {\n      const point = this.nextPoint();\n      if (point) {\n        result.push(point);\n      }\n    }\n    return result;\n  }\n}\n","import Prando from 'prando';\nimport { Point, PointData } from './game-state';\nimport { PoissonDiskSampler } from './poisson-disk';\n\nexport abstract class MapGenerator {\n  constructor(\n    protected readonly prando = new Prando(),\n    protected readonly names = [\n      'Alfa',\n      'Bravo',\n      'Charlie',\n      'Delta',\n      'Echo',\n      'Foxtrot',\n      'Golf',\n      'Hotel',\n      'India',\n      'Juliett',\n      'Kilo',\n      'Lima',\n      'Mike',\n      'November',\n      'Oscar',\n      'Papa',\n      'Quebec',\n      'Romeo',\n      'Sierra',\n      'Tango',\n      'Uniform',\n      'Victor',\n      'Whiskey',\n      'Xray',\n      'Yankee',\n      'Zulu',\n    ],\n  ) {}\n\n  /**\n   * Returns a set @param amount of system names.\n   */\n  protected fetchNames(amount: number): string[] {\n    // TODO: Validate input (int, at least 1, at most names.length).\n    return this.names.slice(0, amount);\n  }\n\n  /**\n   * Given the inputs, determines an appropriate \"weighted\" @param distance.\n   */\n  protected computeDistanceWeight(\n    maxDistance: number,\n    distance: number,\n    isHome: boolean,\n  ): number {\n    let weight = maxDistance - distance;\n    if (isHome) {\n      weight = Math.pow(2, weight);\n    }\n    return weight;\n  }\n\n  /**\n   * Given @param positions, returns the farthest open system to use as a home.\n   */\n  protected pickFairestHomeSystem<\n    T extends {\n      position: PointData;\n      home?: unknown;\n    }\n  >(positions: T[]): T {\n    let result: T | undefined;\n    let lowSum = Number.MAX_SAFE_INTEGER;\n    let maxDistance = 0;\n    for (const a of positions) {\n      for (const b of positions) {\n        const distance = new Point(a.position).distance(b.position);\n        if (distance > maxDistance) {\n          maxDistance = distance;\n        }\n      }\n    }\n    for (const a of positions) {\n      if (a.home) {\n        continue;\n      }\n      const weights: number[] = [];\n      for (const b of positions) {\n        const distance = new Point(a.position).distance(b.position);\n        const weight = this.computeDistanceWeight(\n          maxDistance,\n          distance,\n          !!b.home,\n        );\n        weights.push(weight);\n      }\n      const sumWeight = weights.reduce((p, c) => p + c, 0);\n      if (sumWeight < lowSum) {\n        lowSum = sumWeight;\n        result = a;\n      }\n    }\n    if (!result) {\n      const open = positions.filter((s) => !s.home);\n      if (open.length === 0) {\n        throw new Error('Failed to find an open system.');\n      }\n      result = this.prando.nextArrayItem(open);\n    }\n    return result;\n  }\n\n  /**\n   * Given a set of @param positions where the `{x, y}` coordinate pairs might\n   * be scattered, finds the smallest `x` and `y` coordinate, and re-aligns all\n   * positions to be as close as possible to `{0, 0}`.\n   */\n  protected reducePositionsToOrigin<\n    T extends {\n      position: PointData;\n    }\n  >(positions: T[]): T[] {\n    let minX = Number.MAX_SAFE_INTEGER;\n    let minY = Number.MAX_SAFE_INTEGER;\n    for (const system of positions) {\n      const [x, y] = system.position;\n      if (x < minX) {\n        minX = x;\n      }\n      if (y < minY) {\n        minY = y;\n      }\n    }\n    return positions.map((system) => {\n      let [x, y] = system.position;\n      x -= minX;\n      y -= minY;\n      return {\n        ...system,\n        position: [x, y],\n      };\n    });\n  }\n\n  abstract generateMap(\n    systems: number,\n    players: number,\n  ): { position: PointData; name: string }[];\n}\n\nexport class PoissonMapGenerator extends MapGenerator {\n  private readonly sampler: PoissonDiskSampler;\n\n  constructor(\n    sampler: PoissonDiskSampler | [number, number],\n    prando?: Prando,\n    names?: string[],\n  ) {\n    super(prando, names);\n    this.sampler = Array.isArray(sampler)\n      ? new PoissonDiskSampler(sampler, 4, undefined, prando)\n      : sampler;\n  }\n\n  generateMap(\n    systems: number,\n    players: number,\n  ): { position: PointData; name: string; home: boolean }[] {\n    const names = this.fetchNames(systems);\n    names.sort(() => this.prando.nextInt(-1, 1));\n    const points = this.sampler.points(systems);\n    const result: { position: PointData; name: string; home: boolean }[] = [];\n    for (let i = 0; i < points.length; i++) {\n      result.push({\n        name: names[i],\n        position: [\n          Math.max(Math.ceil(points[i][0] - 1), 0),\n          Math.max(Math.ceil(points[i][1] - 1), 0),\n        ],\n        home: false,\n      });\n    }\n    while (players--) {\n      this.pickFairestHomeSystem(result).home = true;\n    }\n    return this.reducePositionsToOrigin(result);\n  }\n}\n","import { PointData } from '../../common/game-state';\n\nfunction simpleVisualize(\n  systems: { position: PointData; name: string }[],\n): string[][] {\n  let width = 0;\n  let height = 0;\n  systems.forEach((system) => {\n    const [x, y] = system.position;\n    if (x > width) {\n      width = x;\n    }\n    if (y > height) {\n      height = y;\n    }\n  });\n  if (width === 0 || height === 0) {\n    return [];\n  }\n  const grid: string[][] = new Array(height + 1);\n  for (let i = 0; i < grid.length; i++) {\n    grid[i] = new Array(width + 1).fill('');\n  }\n  systems.forEach((system) => {\n    const [x, y] = system.position;\n    const s = system.name.substring(0, 1);\n    grid[y][x] = s;\n  });\n  return grid;\n}\n\nexport interface MapProps {\n  systems: { position: PointData; name: string }[];\n}\n\nexport function MapPreview(props: MapProps): JSX.Element {\n  return (\n    <pre style={{ border: '1px dashed #666', padding: '5px' }}>\n      {simpleVisualize(props.systems)\n        .map((row) => row.map((col) => (col === '' ? '•' : col)).join(' '))\n        .join('\\n') + '\\n'}\n    </pre>\n  );\n}\n","import { LaptopOutlined, UserOutlined } from '@ant-design/icons';\nimport { Button, Form, Input, InputNumber, List } from 'antd';\nimport Prando from 'prando';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { GameLobbyData, PointData } from '../../../common/game-state';\nimport { PoissonMapGenerator } from '../../../common/map-generator';\nimport { PoissonDiskSampler } from '../../../common/poisson-disk';\nimport { GameClientContext } from '../../contexts/client';\nimport { MapPreview } from '../../ui/Map';\n\nexport function GameLobby(props: {\n  data: GameLobbyData;\n  onStart: () => void;\n}): JSX.Element {\n  const client = useContext(GameClientContext);\n  const { replace } = useHistory();\n  const listAiPlayers = new Array(props.data.players - 1).fill('');\n  const [seed, setSeed] = useState(props.data.seed);\n  const [systems, setSystems] = useState(Math.ceil(props.data.players * 3));\n  const [preview, setPreview] = useState<\n    { position: PointData; name: string; home: boolean }[]\n  >([]);\n\n  useEffect(() => {\n    const prando = new Prando(seed);\n    const ratio = systems / 26;\n    const sampler = new PoissonDiskSampler(\n      [Math.ceil(50 * ratio), Math.ceil(30 * ratio)],\n      4,\n      undefined,\n      prando,\n    );\n    const generator = new PoissonMapGenerator(sampler, prando);\n    setPreview(generator.generateMap(systems, props.data.players));\n  }, [seed, systems]);\n\n  return (\n    <>\n      <h3>Players</h3>\n      <List>\n        <List.Item>\n          <List.Item.Meta\n            avatar={<UserOutlined />}\n            title={'Human'}\n            description={'Ready'}\n          />\n        </List.Item>\n        {listAiPlayers.map((_, i) => {\n          return (\n            <List.Item key={i}>\n              <List.Item.Meta\n                avatar={<LaptopOutlined />}\n                title={`AI: ${i + 1}`}\n                description={'Ready'}\n              />\n            </List.Item>\n          );\n        })}\n      </List>\n      <h3>Settings</h3>\n      <Form\n        labelCol={{ span: 1 }}\n        wrapperCol={{ span: 4 }}\n        onFinish={() => {\n          // FIXME: Implement.\n        }}\n      >\n        <Form.Item\n          label=\"Name\"\n          extra={<>Used for identifying the game only.</>}\n        >\n          <Input\n            readOnly\n            minLength={10}\n            maxLength={20}\n            value={props.data.name}\n          />\n        </Form.Item>\n        <Form.Item\n          label=\"Seed\"\n          extra={<>Used for procedural generation of systems.</>}\n        >\n          <Input\n            readOnly\n            minLength={10}\n            maxLength={20}\n            value={seed}\n            onChange={(v) => setSeed(v.target.value)}\n          />\n        </Form.Item>\n        <Form.Item label=\"Preview\">\n          <MapPreview systems={preview} />\n        </Form.Item>\n        <Form.Item\n          label=\"Maximum Systems\"\n          extra={<>A recommended number is 3 systems per player.</>}\n        >\n          <InputNumber\n            min={props.data.players}\n            max={26}\n            value={systems}\n            onChange={(v) => setSystems(parseInt(`${v}`))}\n          />\n        </Form.Item>\n        <p className=\"games-buttons\">\n          <Button type=\"primary\" htmlType=\"submit\">\n            Start\n          </Button>\n          <Button\n            danger\n            onClick={async () => {\n              await client.gamesDelete(props.data.name);\n              replace('/games');\n            }}\n          >\n            Delete\n          </Button>\n        </p>\n      </Form>\n    </>\n  );\n}\n","import { Button } from 'antd';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { Route, Switch, useHistory, useParams } from 'react-router-dom';\nimport { GameListData, GameLobbyData } from '../../common/game-state';\nimport { GameClientContext } from '../contexts/client';\nimport './Games.scss';\nimport { CreateGames } from './Games/Create';\nimport { ListGames } from './Games/List';\nimport { GameLobby } from './Games/Lobby';\n\nfunction ViewGameOrLobby(): JSX.Element {\n  const params = useParams<{ readonly name: string }>();\n  const client = useContext(GameClientContext);\n  const [game, setGame] = useState<GameListData | GameLobbyData | undefined>();\n  useEffect(() => {\n    (async () => {\n      setGame(await client.gamesFetch(params.name));\n    })();\n  }, [client]);\n  const { goBack } = useHistory();\n  if (!game) {\n    return (\n      <>\n        <h1>\n          Game <code>{params.name}</code> not found.\n        </h1>\n        <p>Either this game has been deleted, or the link is expired.</p>\n        <Button onClick={goBack}>Go Back</Button>\n      </>\n    );\n  } else if (game.kind === 'Lobby') {\n    return (\n      <GameLobby\n        data={game as GameLobbyData}\n        onStart={async () => {\n          setGame(await client.gamesCreate(params.name, game.players));\n        }}\n      />\n    );\n  } else {\n    return (\n      <>\n        Game for <code>{params.name}</code>\n      </>\n    );\n  }\n}\n\nexport function GamesRoute(): JSX.Element {\n  return (\n    <>\n      <Switch>\n        <Route exact path=\"/games/create\" component={CreateGames} />\n        <Route path=\"/games/:name\" component={ViewGameOrLobby} />\n        <Route exact path=\"/games\" component={ListGames} />\n      </Switch>\n    </>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './app/App';\nimport './index.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","import { GameListData, GameLobbyData } from './game-state';\n\n/**\n * Represents a connection to a game server.\n */\nexport abstract class GameClient {\n  /**\n   * Logs in the user.\n   */\n  abstract accountLogin(): Promise<void>;\n\n  /**\n   * Logs out the user.\n   */\n  abstract accountLogout(): Promise<void>;\n\n  /**\n   * Fetches a single game.\n   */\n  abstract gamesFetch(name: string): Promise<GameListData | undefined>;\n\n  /**\n   * Lists active games.\n   */\n  abstract gamesList(): Promise<GameListData[]>;\n\n  /**\n   * Deletes a game.\n   */\n  abstract gamesDelete(name: string): Promise<void>;\n\n  /**\n   * Creates a game (lobby).\n   */\n  abstract gamesCreate(name: string, players: number): Promise<GameLobbyData>;\n}\n","import Prando from 'prando';\nimport { GameListData, GameLobbyData, GameStateData } from './game-state';\n\nfunction deepClone<T>(input: T): T {\n  return JSON.parse(JSON.stringify(input));\n}\n\n/**\n * Represents a game server.\n */\nexport class GameServer {\n  constructor(\n    protected readonly games: {\n      [key: string]: GameLobbyData | GameStateData;\n    },\n    protected readonly prando = new Prando(),\n  ) {}\n\n  protected async readState(\n    name: string,\n  ): Promise<GameLobbyData | GameStateData | undefined> {\n    const result = this.games[name];\n    return result ? deepClone(result) : undefined;\n  }\n\n  /**\n   * Implementations of @see GameServer that persist data should override.\n   */\n  protected async writeState<T extends GameLobbyData | GameStateData>(\n    name: string,\n    data: T,\n  ): Promise<T> {\n    return (this.games[name] = deepClone(data));\n  }\n\n  /**\n   * Implementations of @see GameServer that persist data should override.\n   */\n  protected async deleteState(name: string): Promise<void> {\n    delete this.games[name];\n  }\n\n  protected currentTime(): number {\n    return new Date().getTime();\n  }\n\n  /**\n   * Processes a login request.\n   *\n   * Implementations that want authorization should override this method.\n   */\n  async onAccountLogin(): Promise<void> {\n    // Intentionally left blank.\n  }\n\n  /**\n   * Processes a game fetch request.\n   */\n  async onGamesFetch(\n    name: string,\n  ): Promise<GameLobbyData | GameListData | undefined> {\n    for (const game of Object.values(this.games)) {\n      if (game.name === name) {\n        if (game.kind === 'Lobby') {\n          return game;\n        } else {\n          return {\n            name: game.name,\n            kind: game.kind,\n            lastUpdated: game.lastUpdated,\n            players: game.players.length,\n          };\n        }\n      }\n    }\n  }\n\n  /**\n   * Processes a game list request.\n   */\n  async onGamesList(): Promise<GameListData[]> {\n    return Object.values(this.games).map((value) => {\n      return {\n        name: value.name,\n        kind: value.kind,\n        lastUpdated: value.lastUpdated,\n        players:\n          typeof value.players === 'number'\n            ? value.players\n            : value.players.length,\n      };\n    });\n  }\n\n  /**\n   * Processes a game creation request.\n   */\n  async onGamesCreate(\n    player: string,\n    request: {\n      name: string;\n      players: number;\n    },\n  ): Promise<GameLobbyData> {\n    return this.writeState(request.name, {\n      ...request,\n      seed: this.prando.nextString(10),\n      createdBy: player,\n      kind: 'Lobby',\n      lastUpdated: this.currentTime(),\n    });\n  }\n\n  /**\n   * Processes a game deletion request.\n   *\n   * @param _player\n   * @param request\n   */\n  onGamesDelete(\n    _player: string,\n    request: {\n      name: string;\n    },\n  ): Promise<void> {\n    // TODO: Enforce player created the game being deleted or is an admin.\n    return this.deleteState(request.name);\n  }\n}\n","import React from 'react';\nimport { GameClient } from '../../common/game-client';\nimport { GameServer } from '../../common/game-server';\nimport {\n  GameListData,\n  GameLobbyData,\n  GameStateData,\n} from '../../common/game-state';\n\nexport class LocalGameServer extends GameServer {\n  constructor(private readonly storage = localStorage) {\n    super(\n      (() => {\n        const result = storage.getItem('games');\n        return result ? JSON.parse(result) : {};\n      })(),\n    );\n  }\n\n  protected async writeState<T extends GameLobbyData | GameStateData>(\n    name: string,\n    data: T,\n  ): Promise<T> {\n    const result = await super.writeState(name, data);\n    this.storage.setItem('games', JSON.stringify(this.games));\n    return result;\n  }\n\n  protected async deleteState(name: string): Promise<void> {\n    await super.deleteState(name);\n    this.storage.setItem('games', JSON.stringify(this.games));\n  }\n}\n\nexport class LocalGameClient extends GameClient {\n  constructor(\n    private player: string = 'Guest',\n    private readonly server: GameServer = new LocalGameServer(),\n  ) {\n    super();\n  }\n\n  async accountLogin(): Promise<void> {\n    // Intentionally left blank.\n  }\n\n  async accountLogout(): Promise<void> {\n    // Intentionally left blank.\n  }\n\n  async gamesFetch(\n    name: string,\n  ): Promise<GameLobbyData | GameListData | undefined> {\n    return this.server.onGamesFetch(name);\n  }\n\n  async gamesList(): Promise<GameListData[]> {\n    return this.server.onGamesList();\n  }\n\n  async gamesDelete(name: string): Promise<void> {\n    return this.server.onGamesDelete(this.player, { name });\n  }\n\n  async gamesCreate(name: string, players: number): Promise<GameLobbyData> {\n    return this.server.onGamesCreate(this.player, { name, players });\n  }\n}\n\nexport const GameClientContext = React.createContext<GameClient>(\n  new LocalGameClient(),\n);\n"],"sourceRoot":""}