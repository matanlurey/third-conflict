{"version":3,"sources":["app/App.tsx","app/routes/Account.tsx","app/routes/Default.tsx","common/game-state.ts","common/poisson-disk.ts","common/map-generator.ts","common/name-generator.ts","app/ui/Map.tsx","app/routes/Games.tsx","index.tsx","common/local-game-storage.ts","app/contexts/storage.ts","app/contexts/auth.ts"],"names":["App","hot","module","useCookies","cookies","setCookies","useState","authState","setAuthState","Header","className","to","src","theme","mode","selectable","Item","disabled","icon","Provider","value","Content","path","onChange","state","type","AccountRoute","props","context","useContext","GlobalAuthContext","labelCol","span","wrapperCol","onClick","danger","Default","storage","LocalStorageContext","games","length","Point","data","this","x","y","x1","y1","Array","x2","y2","parseFloat","Math","sqrt","pow","toFixed","PoissonDiskSampler","viewport","minDistance","maxTries","prando","Prando","xMin","yMin","xMax","yMax","radius","cellSize","k","queue","firstPoint","max","SQRT1_2","reset","width","ceil","height","fill","index","floor","point","push","col","row","i","j","next","rng","createPoint","distance","angle","PI","cos","sin","isValidPoint","splice","Number","MAX_SAFE_INTEGER","result","nextPoint","PoissonMapGenerator","sampler","names","isArray","undefined","systems","fetchNames","points","name","position","reducePositionsToOrigin","amount","slice","maxDistance","isHome","weight","positions","lowSum","a","b","home","weights","computeDistanceWeight","sumWeight","reduce","p","c","open","filter","s","Error","nextArrayItem","minX","minY","system","map","NameGenerator","adjectives","nouns","nextInt","toString","padStart","simpleVisualize","forEach","grid","substring","Map","style","border","padding","join","CreateGame","Form","useForm","form","replace","useHistory","useEffect","setFieldsValue","players","online","onFinish","values","set","kind","label","extra","maxLength","min","Group","Button","htmlType","ViewLobby","aiPlayers","nextString","seed","setSeed","setSystems","preview","setPreview","ratio","generator","generateMap","Meta","avatar","UserOutlined","title","description","_","LaptopOutlined","readOnly","minLength","v","target","parseInt","remove","ViewGameOrLobby","params","useParams","localGame","get","goBack","ListGames","dataSource","sort","lastUpdate","key","status","PlusOutlined","columns","dataIndex","locale","emptyText","pagination","GamesRoute","exact","component","ReactDOM","render","document","getElementById","LocalGameStorage","localStorage","getItem","JSON","parse","e","console","warn","setItem","stringify","Date","getTime","writeChanges","lobby","React","createContext"],"mappings":"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","file":"static/js/main.37547ebb.chunk.js","sourcesContent":["import {\n  DatabaseOutlined,\n  SettingOutlined,\n  UserOutlined,\n} from '@ant-design/icons';\nimport { Button, Layout, Menu } from 'antd';\nimport React, { useState } from 'react';\nimport { useCookies } from 'react-cookie';\nimport { hot } from 'react-hot-loader';\nimport { BrowserRouter as Router, Link, Route, Switch } from 'react-router-dom';\nimport './App.scss';\nimport { GlobalAuthContext, GlobalAuthState } from './contexts/auth';\nimport { AccountRoute } from './routes/Account';\nimport { Default } from './routes/Default';\nimport { GamesRoute } from './routes/Games';\n\nfunction app(): JSX.Element {\n  const [cookies, setCookies] = useCookies(['auth']);\n  const [authState, setAuthState] = useState<GlobalAuthState>(cookies['auth']);\n\n  const updateAuth = (state: GlobalAuthState) => {\n    setCookies('auth', state);\n    setAuthState(state);\n  };\n\n  return (\n    <Router>\n      <Layout>\n        <Layout.Header>\n          <div className=\"logo\">\n            <Link to=\"/\">\n              <img src=\"/images/logo.png\" />\n            </Link>\n          </div>\n          <Menu theme=\"dark\" mode=\"horizontal\" selectable={false}>\n            <Menu.Item disabled={!authState} icon={<DatabaseOutlined />}>\n              <Link to=\"/games\">Games</Link>\n            </Menu.Item>\n            <Menu.Item icon={<UserOutlined />}>\n              <Link to=\"/account\">Account</Link>\n            </Menu.Item>\n            <Menu.Item disabled icon={<SettingOutlined />}>\n              <Link to=\"/settings\">Settings</Link>\n            </Menu.Item>\n          </Menu>\n        </Layout.Header>\n        <GlobalAuthContext.Provider value={authState}>\n          <Layout.Content>\n            <Switch>\n              <Route path=\"/games\">\n                <GamesRoute />\n              </Route>\n              <Route path=\"/account\">\n                <AccountRoute onChange={updateAuth} />\n              </Route>\n              <Route path=\"/settings\">Hello Settings</Route>\n              <Route path=\"/\">\n                {!authState ? (\n                  <>\n                    <Button type=\"dashed\">\n                      <Link to=\"/account\">\n                        <UserOutlined /> Login Required\n                      </Link>\n                    </Button>\n                  </>\n                ) : (\n                  <Default />\n                )}\n              </Route>\n            </Switch>\n          </Layout.Content>\n        </GlobalAuthContext.Provider>\n      </Layout>\n    </Router>\n  );\n}\n\nexport const App = hot(module)(app);\n","import { Button, Form } from 'antd';\nimport React, { useContext } from 'react';\nimport { GlobalAuthContext, GlobalAuthState } from '../contexts/auth';\nimport './Account.scss';\n\nexport interface AccountRateProps {\n  onChange: (newState: GlobalAuthState) => void;\n}\n\nexport function AccountRoute(props: AccountRateProps): JSX.Element {\n  const context = useContext(GlobalAuthContext);\n\n  return (\n    <Form\n      className=\"account-form\"\n      labelCol={{ span: 8 }}\n      wrapperCol={{ span: 16 }}\n    >\n      <h1>Account</h1>\n      <p>\n        A login is required to play <strong>Third Conflict</strong>. Currently\n        you can login as a <strong>Guest</strong> and create and play games\n        locally. In <em>future</em> releases you will be able to login with{' '}\n        <strong>Discord</strong> and play online.\n      </p>\n      {!context && (\n        <Form.Item>\n          <Button type=\"primary\" onClick={() => props.onChange('Guest')}>\n            Login as Guest\n          </Button>\n          <Button type=\"ghost\" disabled>\n            Login with Discord\n          </Button>\n        </Form.Item>\n      )}\n      {context && (\n        <Button type=\"primary\" danger onClick={() => props.onChange(null)}>\n          Logout\n        </Button>\n      )}\n    </Form>\n  );\n}\n","import { useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport { LocalStorageContext } from '../contexts/storage';\nimport './Default.scss';\n\nexport function Default(): JSX.Element {\n  const storage = useContext(LocalStorageContext);\n  return (\n    <>\n      <h1>\n        Welcome back to <strong>Third Conflict</strong>\n      </h1>\n      <p>\n        You have <Link to=\"/games\">{storage.games.length} pending game(s)</Link>\n        .\n      </p>\n    </>\n  );\n}\n","/**\n * Represents the complete game state at a point of time.\n */\nexport interface GameStateData {\n  /**\n   * Name of the game, used for matchmaking and reference purposes.\n   */\n  readonly name: string;\n\n  /**\n   * Whether the game is played online or offline.\n   */\n  readonly online: boolean;\n\n  /**\n   * Last updated timestamp.\n   */\n  readonly lastUpdate: number;\n\n  /**\n   * Players in the game.\n   */\n  readonly players: PlayerStateData[];\n\n  /**\n   * Type of game saved data.\n   */\n  readonly kind: 'Game';\n}\n\n/**\n * Represents the state of a player within a game.\n */\nexport interface PlayerStateData {\n  /**\n   * Name of the player.\n   */\n  readonly name: string;\n\n  /**\n   * User ID of the player (guaranteed unique).\n   */\n  readonly userId: string;\n}\n\n/**\n * Represents an {X, Y} coordinate pair.\n */\nexport type PointData = [number, number];\n\n/**\n * A helper class for wrapping and manipulating @see {PointData} instances.\n */\nexport class Point {\n  constructor(private readonly data: PointData) {}\n\n  get x(): number {\n    return this.data[0];\n  }\n\n  get y(): number {\n    return this.data[1];\n  }\n\n  distance(to: Point | PointData): number {\n    const [x1, y1] = [this.x, this.y];\n    const [x2, y2] = to instanceof Array ? to : [to.x, to.y];\n    return parseFloat(\n      Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2)).toFixed(2),\n    );\n  }\n}\n","import Prando from 'prando';\nimport { PointData } from './game-state';\n\nfunction dist2(x1: number, y1: number, x2: number, y2: number): number {\n  return (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);\n}\n\n/**\n * @see https://github.com/ogus/poisson-disk/blob/master/src/poisson-disk.js.\n */\nexport class PoissonDiskSampler {\n  private readonly xMin = 0;\n  private readonly yMin = 0;\n  private readonly xMax: number;\n  private readonly yMax: number;\n  private readonly radius: number;\n  private readonly cellSize: number;\n  private readonly k: number;\n\n  private state!: {\n    width: number;\n    height: number;\n    data: [number, number][];\n  };\n  private queue!: [number, number][];\n  private firstPoint = true;\n\n  constructor(\n    viewport: [number, number],\n    minDistance = 1,\n    maxTries = 30,\n    private readonly prando = new Prando(),\n  ) {\n    this.xMax = viewport[0];\n    this.yMax = viewport[1];\n    this.radius = Math.max(minDistance, 1);\n    this.cellSize = this.radius * Math.SQRT1_2;\n    this.k = Math.max(maxTries, 2);\n    this.reset();\n  }\n\n  /**\n   * Reset the sampler.\n   */\n  reset(): void {\n    const width = Math.ceil((this.xMax - this.xMin) / this.cellSize);\n    const height = Math.ceil((this.yMax - this.yMin) / this.cellSize);\n    this.state = {\n      width,\n      height,\n      data: new Array(width * height).fill(null),\n    };\n    this.queue = [];\n    this.firstPoint = true;\n  }\n\n  /**\n   * Creates and returns a new point.\n   *\n   * @param x\n   * @param y\n   */\n  private createPoint(x: number, y: number): PointData {\n    const index =\n      Math.floor(x / this.cellSize) +\n      Math.floor(y / this.cellSize) * this.state.width;\n    const point = (this.state.data[index] = [x, y]);\n    this.queue.push(point);\n    return point;\n  }\n\n  /**\n   * Returns whether the provided points are valid.\n   *\n   * @param x\n   * @param y\n   */\n  private isValidPoint(x: number, y: number): boolean {\n    if (x < this.xMin || x > this.xMax || y < this.yMin || y > this.yMax) {\n      return false;\n    }\n    const col = Math.floor((x - this.xMin) / this.cellSize);\n    const row = Math.floor((y - this.yMin) / this.cellSize);\n    let index = 0;\n    for (let i = col - 2; i <= col + 2; i++) {\n      for (let j = row - 2; j <= row + 2; j++) {\n        if (i >= 0 && i < this.state.width && j >= 0 && j < this.state.height) {\n          index = i + j * this.state.width;\n          if (\n            this.state.data[index] !== null &&\n            dist2(x, y, this.state.data[index][0], this.state.data[index][1]) <=\n              this.radius * this.radius\n          ) {\n            return false;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Returns a standard `Math.random()`-like result.\n   */\n  private rng(): number {\n    return this.prando.next();\n  }\n\n  /**\n   * Returns the next point in the sampling, or `null` if there is no more.\n   */\n  nextPoint(): PointData | null {\n    let x = 0;\n    let y = 0;\n    if (this.firstPoint) {\n      this.firstPoint = false;\n      x = this.xMin + (this.xMax - this.xMin) * this.rng();\n      y = this.yMin + (this.yMax - this.yMin) * this.rng();\n      return this.createPoint(x, y);\n    }\n    let index = 0;\n    let distance = 0;\n    let angle = 0;\n    while (this.queue.length) {\n      index = (this.queue.length * this.rng()) | 0;\n      for (let i = 0; i < this.k; i++) {\n        distance = this.radius * (this.rng() + 1);\n        angle = 2 * Math.PI * this.rng();\n        x = this.queue[index][0] + distance * Math.cos(angle);\n        y = this.queue[index][1] + distance * Math.sin(angle);\n        if (this.isValidPoint(x, y)) {\n          return this.createPoint(x, y);\n        }\n      }\n      this.queue.splice(index, 1);\n    }\n    return null;\n  }\n\n  /**\n   * Returns whether there are no points.\n   */\n  get done(): boolean {\n    return !this.firstPoint && this.queue.length === 0;\n  }\n\n  /**\n   * Returns all the points possible, up to a maximum requested.\n   *\n   * @param max\n   */\n  points(max: number = Number.MAX_SAFE_INTEGER): [number, number][] {\n    const result: [number, number][] = [];\n    for (let i = 0; i < max; i++) {\n      const point = this.nextPoint();\n      if (point) {\n        result.push(point);\n      }\n    }\n    return result;\n  }\n}\n","import Prando from 'prando';\nimport { Point, PointData } from './game-state';\nimport { PoissonDiskSampler } from './poisson-disk';\n\nexport abstract class MapGenerator {\n  constructor(\n    protected readonly prando = new Prando(),\n    protected readonly names = [\n      'Alfa',\n      'Bravo',\n      'Charlie',\n      'Delta',\n      'Echo',\n      'Foxtrot',\n      'Golf',\n      'Hotel',\n      'India',\n      'Juliett',\n      'Kilo',\n      'Lima',\n      'Mike',\n      'November',\n      'Oscar',\n      'Papa',\n      'Quebec',\n      'Romeo',\n      'Sierra',\n      'Tango',\n      'Uniform',\n      'Victor',\n      'Whiskey',\n      'Xray',\n      'Yankee',\n      'Zulu',\n    ],\n  ) {}\n\n  /**\n   * Returns a set @param amount of system names.\n   */\n  protected fetchNames(amount: number): string[] {\n    // TODO: Validate input (int, at least 1, at most names.length).\n    return this.names.slice(0, amount);\n  }\n\n  /**\n   * Given the inputs, determines an appropriate \"weighted\" @param distance.\n   */\n  protected computeDistanceWeight(\n    maxDistance: number,\n    distance: number,\n    isHome: boolean,\n  ): number {\n    let weight = maxDistance - distance;\n    if (isHome) {\n      weight = Math.pow(2, weight);\n    }\n    return weight;\n  }\n\n  /**\n   * Given @param positions, returns the farthest open system to use as a home.\n   */\n  protected pickFairestHomeSystem<\n    T extends {\n      position: PointData;\n      home?: unknown;\n    }\n  >(positions: T[]): T {\n    let result: T | undefined;\n    let lowSum = Number.MAX_SAFE_INTEGER;\n    let maxDistance = 0;\n    for (const a of positions) {\n      for (const b of positions) {\n        const distance = new Point(a.position).distance(b.position);\n        if (distance > maxDistance) {\n          maxDistance = distance;\n        }\n      }\n    }\n    for (const a of positions) {\n      if (a.home) {\n        continue;\n      }\n      const weights: number[] = [];\n      for (const b of positions) {\n        const distance = new Point(a.position).distance(b.position);\n        const weight = this.computeDistanceWeight(\n          maxDistance,\n          distance,\n          !!b.home,\n        );\n        weights.push(weight);\n      }\n      const sumWeight = weights.reduce((p, c) => p + c, 0);\n      if (sumWeight < lowSum) {\n        lowSum = sumWeight;\n        result = a;\n      }\n    }\n    if (!result) {\n      const open = positions.filter((s) => !s.home);\n      if (open.length === 0) {\n        throw new Error('Failed to find an open system.');\n      }\n      result = this.prando.nextArrayItem(open);\n    }\n    return result;\n  }\n\n  /**\n   * Given a set of @param positions where the `{x, y}` coordinate pairs might\n   * be scattered, finds the smallest `x` and `y` coordinate, and re-aligns all\n   * positions to be as close as possible to `{0, 0}`.\n   */\n  protected reducePositionsToOrigin<\n    T extends {\n      position: PointData;\n    }\n  >(positions: T[]): T[] {\n    let minX = Number.MAX_SAFE_INTEGER;\n    let minY = Number.MAX_SAFE_INTEGER;\n    for (const system of positions) {\n      const [x, y] = system.position;\n      if (x < minX) {\n        minX = x;\n      }\n      if (y < minY) {\n        minY = y;\n      }\n    }\n    return positions.map((system) => {\n      let [x, y] = system.position;\n      x -= minX;\n      y -= minY;\n      return {\n        ...system,\n        position: [x, y],\n      };\n    });\n  }\n\n  abstract generateMap(\n    systems: number,\n  ): { position: PointData; name: string }[];\n}\n\nexport class PoissonMapGenerator extends MapGenerator {\n  private readonly sampler: PoissonDiskSampler;\n\n  constructor(\n    sampler: PoissonDiskSampler | [number, number],\n    prando?: Prando,\n    names?: string[],\n  ) {\n    super(prando, names);\n    this.sampler = Array.isArray(sampler)\n      ? new PoissonDiskSampler(sampler, 4, undefined, prando)\n      : sampler;\n  }\n\n  generateMap(systems: number): { position: PointData; name: string }[] {\n    // TODO: Shuffle this list based on the seed.\n    const names = this.fetchNames(systems);\n    const points = this.sampler.points(systems);\n    const result: { position: PointData; name: string }[] = [];\n    for (let i = 0; i < points.length; i++) {\n      result.push({\n        name: names[i],\n        position: [\n          Math.max(Math.ceil(points[i][0] - 1), 0),\n          Math.max(Math.ceil(points[i][1] - 1), 0),\n        ],\n      });\n    }\n    return this.reducePositionsToOrigin(result);\n  }\n}\n","import Prando from 'prando';\n\nexport class NameGenerator {\n  constructor(\n    private readonly rng = new Prando(),\n    private readonly adjectives: string[] = [\n      'angry',\n      'attractive',\n      'bald',\n      'big',\n      'brave',\n      'clumsy',\n      'fierce',\n      'happy',\n      'itchy',\n      'handsome',\n      'petite',\n      'repulsive',\n      'silly',\n      'stocky',\n      'tall',\n      'tiny',\n      'wonderful',\n      'zealous',\n    ],\n    private readonly nouns: string[] = [\n      'antelope',\n      'cat',\n      'dog',\n      'eagle',\n      'gorilla',\n      'lion',\n      'rabbit',\n      'snake',\n      'tiger',\n      'vulture',\n      'zebra',\n    ],\n  ) {}\n\n  next(): string {\n    return `${this.rng.nextArrayItem(this.adjectives)}-${this.rng.nextArrayItem(\n      this.nouns,\n    )}-${this.rng.nextInt(0, 99).toString().padStart(2, '0')}`;\n  }\n}\n","import { PointData } from '../../common/game-state';\n\nfunction simpleVisualize(\n  systems: { position: PointData; name: string }[],\n): string[][] {\n  let width = 0;\n  let height = 0;\n  systems.forEach((system) => {\n    const [x, y] = system.position;\n    if (x > width) {\n      width = x;\n    }\n    if (y > height) {\n      height = y;\n    }\n  });\n  if (width === 0 || height === 0) {\n    return [];\n  }\n  const grid: string[][] = new Array(height + 1);\n  for (let i = 0; i < grid.length; i++) {\n    grid[i] = new Array(width + 1).fill('');\n  }\n  systems.forEach((system) => {\n    const [x, y] = system.position;\n    const s = system.name.substring(0, 1);\n    grid[y][x] = s;\n  });\n  return grid;\n}\n\nexport interface MapProps {\n  systems: { position: PointData; name: string }[];\n}\n\nexport function Map(props: MapProps): JSX.Element {\n  return (\n    <pre style={{ border: '1px dashed #666', padding: '5px' }}>\n      {simpleVisualize(props.systems)\n        .map((row) => row.map((col) => (col === '' ? '•' : col)).join(' '))\n        .join('\\n') + '\\n'}\n    </pre>\n  );\n}\n","import { LaptopOutlined, PlusOutlined, UserOutlined } from '@ant-design/icons';\nimport { Button, Form, Input, InputNumber, List, Radio, Table } from 'antd';\nimport Prando from 'prando';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { Link, Route, Switch, useHistory, useParams } from 'react-router-dom';\nimport { GameLobbyData } from '../../common/game-lobby';\nimport { PointData } from '../../common/game-state';\nimport { PoissonMapGenerator } from '../../common/map-generator';\nimport { NameGenerator } from '../../common/name-generator';\nimport { PoissonDiskSampler } from '../../common/poisson-disk';\nimport { GlobalAuthContext } from '../contexts/auth';\nimport { LocalStorageContext } from '../contexts/storage';\nimport { Map } from '../ui/Map';\nimport './Games.scss';\n\nfunction CreateGame(): JSX.Element {\n  const [form] = Form.useForm<GameLobbyData>();\n  const { replace } = useHistory();\n  const storage = useContext(LocalStorageContext);\n  useEffect(() => {\n    form.setFieldsValue({\n      name: new NameGenerator().next(),\n      players: 2,\n      online: false,\n    });\n  }, []);\n  return (\n    <>\n      <h1>Create a Game</h1>\n      <p>\n        Currently, you can create <strong>local</strong> (offline) games with AI\n        opponents. In future builds, once logged in with{' '}\n        <strong>Discord</strong>, you will be able to create and play online\n        games.\n      </p>\n      <Form\n        labelCol={{ span: 1 }}\n        wrapperCol={{ span: 4 }}\n        form={form}\n        onFinish={(values) => {\n          storage.set({ ...values, kind: 'Lobby' });\n          replace(`/games/${values.name}`);\n        }}\n      >\n        <Form.Item\n          name=\"name\"\n          label=\"Name\"\n          extra={<>This name is just used for reference only.</>}\n        >\n          <Input maxLength={30} />\n        </Form.Item>\n        <Form.Item\n          name=\"players\"\n          label=\"Players\"\n          extra={<>2-4 players currently supported.</>}\n        >\n          <InputNumber min={2} max={4} />\n        </Form.Item>\n        <Form.Item\n          name=\"online\"\n          label=\"Connectivity\"\n          extra={<>Local games are versus AI and played offline.</>}\n        >\n          <Radio.Group>\n            <Radio.Button value={false}>Local</Radio.Button>\n            <Radio.Button value={true} disabled>\n              Online\n            </Radio.Button>\n          </Radio.Group>\n        </Form.Item>\n        <Form.Item wrapperCol={{ span: 5 }}>\n          <Button type=\"primary\" style={{ width: '100%' }} htmlType=\"submit\">\n            Create\n          </Button>\n        </Form.Item>\n      </Form>\n    </>\n  );\n}\n\nfunction ViewLobby(props: GameLobbyData): JSX.Element {\n  const storage = useContext(LocalStorageContext);\n  const { replace } = useHistory();\n  const aiPlayers = new Array(props.players - 1).fill('');\n  const [seed, setSeed] = useState(() => new Prando().nextString(10));\n  const [systems, setSystems] = useState(Math.ceil(props.players * 3));\n  const [preview, setPreview] = useState<\n    { position: PointData; name: string }[]\n  >([]);\n  useEffect(() => {\n    const prando = new Prando(seed);\n    const ratio = systems / 26;\n    const sampler = new PoissonDiskSampler(\n      [Math.ceil(50 * ratio), Math.ceil(30 * ratio)],\n      4,\n      undefined,\n      prando,\n    );\n    const generator = new PoissonMapGenerator(sampler, prando);\n    setPreview(generator.generateMap(systems));\n  }, [seed, systems]);\n  return (\n    <>\n      <h3>Players</h3>\n      <List>\n        <List.Item>\n          <List.Item.Meta\n            avatar={<UserOutlined />}\n            title={'Human'}\n            description={'Ready'}\n          />\n        </List.Item>\n        {aiPlayers.map((_, i) => {\n          return (\n            <List.Item key={i}>\n              <List.Item.Meta\n                avatar={<LaptopOutlined />}\n                title={`AI: ${i + 1}`}\n                description={'Ready'}\n              />\n            </List.Item>\n          );\n        })}\n      </List>\n      <h3>Settings</h3>\n      <Form labelCol={{ span: 1 }} wrapperCol={{ span: 4 }}>\n        <Form.Item\n          label=\"Name\"\n          extra={<>Used for identifying the game only.</>}\n        >\n          <Input readOnly minLength={10} maxLength={20} />\n        </Form.Item>\n        <Form.Item\n          label=\"Seed\"\n          extra={<>Used for procedural generation of systems.</>}\n        >\n          <Input\n            readOnly\n            minLength={10}\n            maxLength={20}\n            value={seed}\n            onChange={(v) => setSeed(v.target.value)}\n          />\n        </Form.Item>\n        <Form.Item label=\"Preview\">\n          <Map systems={preview} />\n        </Form.Item>\n        <Form.Item\n          label=\"Maximum Systems\"\n          extra={<>A recommended number is 3 systems per player.</>}\n        >\n          <InputNumber\n            min={props.players}\n            max={26}\n            value={systems}\n            onChange={(v) => setSystems(parseInt(`${v}`))}\n          />\n        </Form.Item>\n        <p className=\"games-buttons\">\n          <Button type=\"primary\" disabled htmlType=\"submit\">\n            Start\n          </Button>\n          <Button\n            danger\n            onClick={() => {\n              storage.remove(props.name);\n              replace('/games');\n            }}\n          >\n            Delete\n          </Button>\n        </p>\n      </Form>\n    </>\n  );\n}\n\nfunction ViewGameOrLobby(): JSX.Element {\n  const params = useParams<{ readonly name: string }>();\n  const storage = useContext(LocalStorageContext);\n  const localGame = storage.get(params.name);\n  const { goBack } = useHistory();\n  if (!localGame) {\n    return (\n      <>\n        <h1>\n          Game <code>{params.name}</code> not found.\n        </h1>\n        <p>Either this game has been deleted, or the link is expired.</p>\n        <Button onClick={goBack}>Go Back</Button>\n      </>\n    );\n  } else if (localGame.kind === 'Lobby') {\n    return <ViewLobby {...localGame} />;\n  } else {\n    return (\n      <>\n        Game for <code>{params.name}</code>\n      </>\n    );\n  }\n}\n\nfunction ListGames(): JSX.Element {\n  const context = useContext(GlobalAuthContext);\n  const storage = useContext(LocalStorageContext);\n  const { push } = useHistory();\n  const dataSource = storage.games\n    .sort((a, b) => a.lastUpdate - b.lastUpdate)\n    .map((v) => {\n      return {\n        name: <Link to={`/games/${v.name}`}>{v.name}</Link>,\n        key: v.name,\n        players: v.players,\n        status: v.kind === 'Lobby' && !v.online ? 'Lobby (Host)' : 'Unknown',\n      };\n    });\n  return (\n    <>\n      <h1>Games</h1>\n      <p className=\"games-buttons\">\n        <Button\n          icon={<PlusOutlined />}\n          type=\"dashed\"\n          disabled={!context}\n          onClick={() => {\n            push('/games/create');\n          }}\n        >\n          Create Game\n        </Button>\n\n        <Button\n          icon={<PlusOutlined />}\n          type=\"dashed\"\n          disabled\n          onClick={() => {\n            push('/games/join');\n          }}\n        >\n          Join Game\n        </Button>\n      </p>\n      <Table\n        columns={[\n          { title: 'Name', dataIndex: 'name' },\n          { title: 'Players', dataIndex: 'players' },\n          { title: 'Status', dataIndex: 'status' },\n        ]}\n        dataSource={dataSource}\n        locale={{ emptyText: 'You are not in any games.' }}\n        pagination={false}\n      />\n    </>\n  );\n}\n\nexport function GamesRoute(): JSX.Element {\n  return (\n    <>\n      <Switch>\n        <Route path=\"/games/create\">\n          <CreateGame />\n        </Route>\n        <Route path=\"/games/join\">Join</Route>\n        <Route path=\"/games/:name\">\n          <ViewGameOrLobby />\n        </Route>\n        <Route exact path=\"/games\" component={ListGames} />\n      </Switch>\n    </>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './app/App';\nimport './index.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","import { GameLobbyData } from './game-lobby';\nimport { GameStateData } from './game-state';\n\nexport class LocalGameStorage {\n  public readonly games: (GameStateData | GameLobbyData)[];\n\n  constructor() {\n    const data = localStorage.getItem('games') || '[]';\n    try {\n      this.games = JSON.parse(data);\n    } catch (e) {\n      console.warn(e);\n      this.games = [];\n    }\n  }\n\n  protected writeChanges(): void {\n    localStorage.setItem('games', JSON.stringify(this.games));\n  }\n\n  set(data: GameLobbyData | GameStateData): void {\n    for (let i = 0; i < this.games.length; i++) {\n      if (this.games[i].name === data.name) {\n        this.games[i] = {\n          ...data,\n          lastUpdate: new Date().getTime(),\n        };\n        this.writeChanges();\n        return;\n      }\n    }\n    this.games.push(data);\n    this.writeChanges();\n  }\n\n  get(name: string): GameLobbyData | GameStateData | undefined {\n    for (const lobby of this.games) {\n      if (lobby.name === name) {\n        return lobby;\n      }\n    }\n  }\n\n  remove(name: string): void {\n    for (let i = 0; i < this.games.length; i++) {\n      if (this.games[i].name === name) {\n        this.games.splice(i, 1);\n        break;\n      }\n    }\n    this.writeChanges();\n  }\n}\n","import React from 'react';\nimport { LocalGameStorage } from '../../common/local-game-storage';\n\nexport const LocalStorageContext = React.createContext(new LocalGameStorage());\n","import React from 'react';\n\n/**\n * Authentication state.\n *\n * Represents either logged out, logged in as a guest, logged in with Discord.\n */\nexport type GlobalAuthState = null | 'Guest' | { discordId: string };\nexport const GlobalAuthContext = React.createContext<GlobalAuthState>(null);\n"],"sourceRoot":""}