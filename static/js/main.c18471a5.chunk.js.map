{"version":3,"sources":["app/contexts/auth.ts","common/game-state.ts","common/map-generator.ts","app/App.tsx","app/routes/Account.tsx","app/routes/Default.tsx","common/name-generator.ts","app/routes/Games/Create.tsx","app/routes/Games/List.tsx","app/ui/Map.tsx","app/routes/Games/Lobby.tsx","app/routes/Games.tsx","index.tsx","common/game-client.ts","common/utils.ts","common/game-logic.ts","app/contexts/client.ts","common/game-server.ts","common/poisson-disk.ts"],"names":["GlobalAuthContext","React","createContext","Point","data","to","this","x","y","x1","y1","Array","x2","y2","parseFloat","Math","sqrt","pow","toFixed","PoissonMapGenerator","sampler","prando","names","isArray","PoissonDiskSampler","undefined","systems","players","fetchNames","sort","nextInt","points","result","i","length","push","name","position","max","ceil","home","pickFairestHomeSystem","reducePositionsToOrigin","Prando","amount","slice","maxDistance","distance","isHome","weight","positions","lowSum","Number","MAX_SAFE_INTEGER","a","b","weights","computeDistanceWeight","sumWeight","reduce","p","c","open","filter","s","Error","nextArrayItem","minX","minY","system","map","App","hot","module","useCookies","cookies","setCookies","useState","authState","setAuthState","Header","className","src","theme","mode","selectable","Item","disabled","icon","Provider","value","Content","path","onChange","state","type","AccountRoute","props","context","useContext","labelCol","span","wrapperCol","onClick","danger","Default","client","GameClientContext","pendingGames","setPendingGames","useEffect","gamesList","gameList","NameGenerator","rng","adjectives","nouns","toString","padStart","CreateGames","Form","useForm","form","replace","useHistory","saving","setSaving","setFieldsValue","next","onFinish","values","gamesCreate","label","extra","maxLength","min","Group","Button","LoadingOutlined","style","width","htmlType","ListGames","games","setGames","fetchGames","dataSource","lastUpdated","v","key","status","kind","PlusOutlined","columns","title","dataIndex","locale","emptyText","pagination","simpleVisualize","height","forEach","grid","fill","substring","MapPreview","border","padding","row","col","join","GameLobby","listAiPlayers","seed","setSeed","pending","setPending","setSystems","preview","setPreview","ratio","generator","generateMap","Meta","avatar","UserOutlined","description","_","LaptopOutlined","onStart","readOnly","minLength","target","parseInt","gamesDelete","ViewGameOrLobby","params","useParams","game","setGame","gamesFetch","goBack","gamesStart","GamesRoute","exact","component","ReactDOM","render","document","getElementById","GameClient","deepClone","input","JSON","parse","stringify","RandomSpawner","stub","owner","player","splice","userId","LocalGameServer","storage","localStorage","getItem","setItem","spawner","Date","getTime","Object","request","writeState","nextString","createdBy","currentTime","_player","deleteState","readState","spawnInitialSystems","settings","initialFactories","shipSpeedATurn","LocalGameClient","server","onGamesFetch","onGamesList","onGamesDelete","onGamesCreate","onGamesStart","viewport","minDistance","maxTries","xMin","yMin","xMax","yMax","radius","cellSize","k","queue","firstPoint","SQRT1_2","reset","index","floor","point","j","createPoint","angle","PI","cos","sin","isValidPoint","nextPoint"],"mappings":"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","file":"static/js/main.c18471a5.chunk.js","sourcesContent":["import React from 'react';\n\n/**\n * Authentication state.\n *\n * Represents either logged out, logged in as a guest, logged in with Discord.\n */\nexport type GlobalAuthState = null | 'Guest' | { discordId: string };\nexport const GlobalAuthContext = React.createContext<GlobalAuthState>(null);\n","/**\n * Represents minimal information about a game for listing purposes.\n */\nexport interface GameListData {\n  /**\n   * Name of the game, used for matchmaking and reference purposes.\n   */\n  readonly name: string;\n\n  /**\n   * Number of players.\n   */\n  readonly players: number;\n\n  /**\n   * Last updated timestamp.\n   */\n  readonly lastUpdated: number;\n\n  /**\n   * Type of game saved data.\n   */\n  readonly kind: 'Lobby' | 'Game';\n}\n\n/**\n * Represents a game that has not yet been started.\n */\nexport interface GameLobbyData {\n  /**\n   * Name of the game, used for matchmaking and reference purposes.\n   */\n  readonly name: string;\n\n  /**\n   * Used to procedurally generate the map and empire.\n   */\n  readonly seed: string;\n\n  /**\n   * Which player created and administrates the game.\n   */\n  readonly createdBy: string;\n\n  /**\n   * Last updated timestamp.\n   */\n  readonly lastUpdated: number;\n\n  /**\n   * Number of players.\n   */\n  readonly players: number;\n\n  /**\n   * Type of game saved data.\n   */\n  readonly kind: 'Lobby';\n}\n\n/**\n * Represents the complete game state at a point of time.\n */\nexport interface GameStateData {\n  /**\n   * Name of the game, used for matchmaking and reference purposes.\n   */\n  readonly name: string;\n\n  /**\n   * Last updated timestamp.\n   */\n  readonly lastUpdated: number;\n\n  /**\n   * Which player created and administrates the game.\n   */\n  readonly createdBy: string;\n\n  /**\n   * Players in the game.\n   */\n  readonly players: PlayerStateData[];\n\n  /**\n   * Systems in the game.\n   */\n  readonly systems: SystemData[];\n\n  /**\n   * Type of game saved data.\n   */\n  readonly kind: 'Game';\n\n  /**\n   * Settings in the game.\n   */\n  readonly settings: GameSettingsData;\n}\n\n/**\n * Represents settings in the game.\n */\nexport interface GameSettingsData {\n  /**\n   * How many factories initial systems start with.\n   *\n   * The more factories the faster a system can churn out units. This number\n   * is also used as the maximum number of factories that an imperial system\n   * will build.\n   */\n  readonly initialFactories: number;\n\n  /**\n   * How many units of distance a ship moves a turn, maximum.\n   *\n   * The faster the speed the farther ships can make it every \"tick\" of the game.\n   */\n  readonly shipSpeedATurn: number;\n}\n\n/**\n * Represents the state of a player within a game.\n */\nexport interface PlayerStateData {\n  /**\n   * Name of the player.\n   */\n  readonly name: string;\n\n  /**\n   * User ID of the player (guaranteed unique).\n   */\n  readonly userId: string;\n}\n\n/**\n * Represents an {X, Y} coordinate pair.\n */\nexport type PointData = [number, number];\n\n/**\n * A helper class for wrapping and manipulating @see {PointData} instances.\n */\nexport class Point {\n  constructor(private readonly data: PointData) {}\n\n  get x(): number {\n    return this.data[0];\n  }\n\n  get y(): number {\n    return this.data[1];\n  }\n\n  distance(to: Point | PointData): number {\n    const [x1, y1] = [this.x, this.y];\n    const [x2, y2] = to instanceof Array ? to : [to.x, to.y];\n    return parseFloat(\n      Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2)).toFixed(2),\n    );\n  }\n}\n\n/**\n * Represents a \"tag\" for control of an entity.\n */\nexport type OwnerData = 'Empire' | { player: string };\n\n/**\n * Represents a star system.\n */\nexport interface SystemData {\n  /**\n   * Position of the system.\n   */\n  readonly position: PointData;\n\n  /**\n   * Name of the system.\n   */\n  readonly name: string;\n\n  /**\n   * The userId of the which player this is a home system of.\n   */\n  readonly home: OwnerData;\n\n  /**\n   * The userId of which player controls the system.\n   *\n   * Note, this may conflict with @member home or individual planet control.\n   */\n  readonly owner: OwnerData;\n}\n","import Prando from 'prando';\nimport { Point, PointData } from './game-state';\nimport { PoissonDiskSampler } from './poisson-disk';\n\nexport abstract class MapGenerator {\n  constructor(\n    protected readonly prando = new Prando(),\n    protected readonly names = [\n      'Alfa',\n      'Bravo',\n      'Charlie',\n      'Delta',\n      'Echo',\n      'Foxtrot',\n      'Golf',\n      'Hotel',\n      'India',\n      'Juliett',\n      'Kilo',\n      'Lima',\n      'Mike',\n      'November',\n      'Oscar',\n      'Papa',\n      'Quebec',\n      'Romeo',\n      'Sierra',\n      'Tango',\n      'Uniform',\n      'Victor',\n      'Whiskey',\n      'Xray',\n      'Yankee',\n      'Zulu',\n    ],\n  ) {}\n\n  /**\n   * Returns a set @param amount of system names.\n   */\n  protected fetchNames(amount: number): string[] {\n    // TODO: Validate input (int, at least 1, at most names.length).\n    return this.names.slice(0, amount);\n  }\n\n  /**\n   * Given the inputs, determines an appropriate \"weighted\" @param distance.\n   */\n  protected computeDistanceWeight(\n    maxDistance: number,\n    distance: number,\n    isHome: boolean,\n  ): number {\n    let weight = maxDistance - distance;\n    if (isHome) {\n      weight = Math.pow(2, weight);\n    }\n    return weight;\n  }\n\n  /**\n   * Given @param positions, returns the farthest open system to use as a home.\n   */\n  protected pickFairestHomeSystem<\n    T extends {\n      position: PointData;\n      home?: unknown;\n    }\n  >(positions: T[]): T {\n    let result: T | undefined;\n    let lowSum = Number.MAX_SAFE_INTEGER;\n    let maxDistance = 0;\n    for (const a of positions) {\n      for (const b of positions) {\n        const distance = new Point(a.position).distance(b.position);\n        if (distance > maxDistance) {\n          maxDistance = distance;\n        }\n      }\n    }\n    for (const a of positions) {\n      if (a.home) {\n        continue;\n      }\n      const weights: number[] = [];\n      for (const b of positions) {\n        const distance = new Point(a.position).distance(b.position);\n        const weight = this.computeDistanceWeight(\n          maxDistance,\n          distance,\n          !!b.home,\n        );\n        weights.push(weight);\n      }\n      const sumWeight = weights.reduce((p, c) => p + c, 0);\n      if (sumWeight < lowSum) {\n        lowSum = sumWeight;\n        result = a;\n      }\n    }\n    if (!result) {\n      const open = positions.filter((s) => !s.home);\n      if (open.length === 0) {\n        throw new Error('Failed to find an open system.');\n      }\n      result = this.prando.nextArrayItem(open);\n    }\n    return result;\n  }\n\n  /**\n   * Given a set of @param positions where the `{x, y}` coordinate pairs might\n   * be scattered, finds the smallest `x` and `y` coordinate, and re-aligns all\n   * positions to be as close as possible to `{0, 0}`.\n   */\n  protected reducePositionsToOrigin<\n    T extends {\n      position: PointData;\n    }\n  >(positions: T[]): T[] {\n    let minX = Number.MAX_SAFE_INTEGER;\n    let minY = Number.MAX_SAFE_INTEGER;\n    for (const system of positions) {\n      const [x, y] = system.position;\n      if (x < minX) {\n        minX = x;\n      }\n      if (y < minY) {\n        minY = y;\n      }\n    }\n    return positions.map((system) => {\n      let [x, y] = system.position;\n      x -= minX;\n      y -= minY;\n      return {\n        ...system,\n        position: [x, y],\n      };\n    });\n  }\n\n  abstract generateMap(\n    systems: number,\n    players: number,\n  ): { position: PointData; name: string }[];\n}\n\nexport class PoissonMapGenerator extends MapGenerator {\n  private readonly sampler: PoissonDiskSampler;\n\n  constructor(\n    sampler: PoissonDiskSampler | [number, number],\n    prando?: Prando,\n    names?: string[],\n  ) {\n    super(prando, names);\n    this.sampler = Array.isArray(sampler)\n      ? new PoissonDiskSampler(sampler, 4, undefined, prando)\n      : sampler;\n  }\n\n  generateMap(\n    systems: number,\n    players: number,\n  ): { position: PointData; name: string; home: boolean }[] {\n    const names = this.fetchNames(systems);\n    names.sort(() => this.prando.nextInt(-1, 1));\n    const points = this.sampler.points(systems);\n    const result: { position: PointData; name: string; home: boolean }[] = [];\n    for (let i = 0; i < points.length; i++) {\n      result.push({\n        name: names[i],\n        position: [\n          Math.max(Math.ceil(points[i][0] - 1), 0),\n          Math.max(Math.ceil(points[i][1] - 1), 0),\n        ],\n        home: false,\n      });\n    }\n    while (players--) {\n      this.pickFairestHomeSystem(result).home = true;\n    }\n    return this.reducePositionsToOrigin(result);\n  }\n}\n","import {\n  DatabaseOutlined,\n  SettingOutlined,\n  UserOutlined,\n} from '@ant-design/icons';\nimport { Button, Layout, Menu } from 'antd';\nimport React, { useState } from 'react';\nimport { useCookies } from 'react-cookie';\nimport { hot } from 'react-hot-loader';\nimport { BrowserRouter as Router, Link, Route, Switch } from 'react-router-dom';\nimport './App.scss';\nimport { GlobalAuthContext, GlobalAuthState } from './contexts/auth';\nimport { AccountRoute } from './routes/Account';\nimport { Default } from './routes/Default';\nimport { GamesRoute } from './routes/Games';\n\nfunction app(): JSX.Element {\n  const [cookies, setCookies] = useCookies(['auth']);\n  const [authState, setAuthState] = useState<GlobalAuthState>(cookies['auth']);\n\n  const updateAuth = (state: GlobalAuthState) => {\n    setCookies('auth', state);\n    setAuthState(state);\n  };\n\n  return (\n    <Router>\n      <Layout>\n        <Layout.Header>\n          <div className=\"logo\">\n            <Link to=\"/\">\n              <img src=\"/images/logo.png\" />\n            </Link>\n          </div>\n          <Menu theme=\"dark\" mode=\"horizontal\" selectable={false}>\n            <Menu.Item disabled={!authState} icon={<DatabaseOutlined />}>\n              <Link to=\"/games\">Games</Link>\n            </Menu.Item>\n            <Menu.Item icon={<UserOutlined />}>\n              <Link to=\"/account\">Account</Link>\n            </Menu.Item>\n            <Menu.Item disabled icon={<SettingOutlined />}>\n              <Link to=\"/settings\">Settings</Link>\n            </Menu.Item>\n          </Menu>\n        </Layout.Header>\n        <GlobalAuthContext.Provider value={authState}>\n          <Layout.Content>\n            <Switch>\n              <Route path=\"/games\">\n                <GamesRoute />\n              </Route>\n              <Route path=\"/account\">\n                <AccountRoute onChange={updateAuth} />\n              </Route>\n              <Route path=\"/settings\">Hello Settings</Route>\n              <Route path=\"/\">\n                {!authState ? (\n                  <>\n                    <Button type=\"dashed\">\n                      <Link to=\"/account\">\n                        <UserOutlined /> Login Required\n                      </Link>\n                    </Button>\n                  </>\n                ) : (\n                  <Default />\n                )}\n              </Route>\n            </Switch>\n          </Layout.Content>\n        </GlobalAuthContext.Provider>\n      </Layout>\n    </Router>\n  );\n}\n\nexport const App = hot(module)(app);\n","import { Button, Form } from 'antd';\nimport React, { useContext } from 'react';\nimport { GlobalAuthContext, GlobalAuthState } from '../contexts/auth';\nimport './Account.scss';\n\nexport interface AccountRateProps {\n  onChange: (newState: GlobalAuthState) => void;\n}\n\nexport function AccountRoute(props: AccountRateProps): JSX.Element {\n  const context = useContext(GlobalAuthContext);\n\n  return (\n    <Form\n      className=\"account-form\"\n      labelCol={{ span: 8 }}\n      wrapperCol={{ span: 16 }}\n    >\n      <h1>Account</h1>\n      <p>\n        A login is required to play <strong>Third Conflict</strong>. Currently\n        you can login as a <strong>Guest</strong> and create and play games\n        locally. In <em>future</em> releases you will be able to login with{' '}\n        <strong>Discord</strong> and play online.\n      </p>\n      {!context && (\n        <Form.Item>\n          <Button type=\"primary\" onClick={() => props.onChange('Guest')}>\n            Login as Guest\n          </Button>\n          <Button type=\"ghost\" disabled>\n            Login with Discord\n          </Button>\n        </Form.Item>\n      )}\n      {context && (\n        <Button type=\"primary\" danger onClick={() => props.onChange(null)}>\n          Logout\n        </Button>\n      )}\n    </Form>\n  );\n}\n","import { useContext, useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { GameClientContext } from '../contexts/client';\nimport './Default.scss';\n\nexport function Default(): JSX.Element {\n  const client = useContext(GameClientContext);\n  const [pendingGames, setPendingGames] = useState<number | undefined>();\n  useEffect(() => {\n    (async () => {\n      const gameList = await client.gamesList();\n      setPendingGames(gameList.length);\n    })();\n  }, [client]);\n  return (\n    <>\n      <h1>\n        Welcome back to <strong>Third Conflict</strong>\n      </h1>\n      <p>\n        {/* TODO: Show loading indicator. */}\n        You have <Link to=\"/games\">{pendingGames} pending game(s)</Link>.\n      </p>\n    </>\n  );\n}\n","import Prando from 'prando';\n\nexport class NameGenerator {\n  constructor(\n    private readonly rng = new Prando(),\n    private readonly adjectives: string[] = [\n      'angry',\n      'attractive',\n      'bald',\n      'big',\n      'brave',\n      'clumsy',\n      'fierce',\n      'happy',\n      'itchy',\n      'handsome',\n      'petite',\n      'repulsive',\n      'silly',\n      'stocky',\n      'tall',\n      'tiny',\n      'wonderful',\n      'zealous',\n    ],\n    private readonly nouns: string[] = [\n      'antelope',\n      'cat',\n      'dog',\n      'eagle',\n      'gorilla',\n      'lion',\n      'rabbit',\n      'snake',\n      'tiger',\n      'vulture',\n      'zebra',\n    ],\n  ) {}\n\n  next(): string {\n    return `${this.rng.nextArrayItem(this.adjectives)}-${this.rng.nextArrayItem(\n      this.nouns,\n    )}-${this.rng.nextInt(0, 99).toString().padStart(2, '0')}`;\n  }\n}\n","import { LoadingOutlined } from '@ant-design/icons';\nimport { Button, Form, Input, InputNumber, Radio } from 'antd';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { NameGenerator } from '../../../common/name-generator';\nimport { GameClientContext } from '../../contexts/client';\n\ninterface CreateGameForm {\n  name: string;\n  players: number;\n}\n\nexport function CreateGames(): JSX.Element {\n  const [form] = Form.useForm<CreateGameForm>();\n  const { replace } = useHistory();\n  const client = useContext(GameClientContext);\n  const [saving, setSaving] = useState(false);\n\n  function initializeForm() {\n    form.setFieldsValue({ name: new NameGenerator().next(), players: 2 });\n  }\n\n  useEffect(initializeForm, []);\n  return (\n    <>\n      <h1>Create a Game</h1>\n      <p>\n        Currently, you can create <strong>local</strong> (offline) games with AI\n        opponents. In future builds, once logged in with{' '}\n        <strong>Discord</strong>, you will be able to create and play online\n        games.\n      </p>\n      <Form\n        labelCol={{ span: 1 }}\n        wrapperCol={{ span: 4 }}\n        form={form}\n        onFinish={async (values) => {\n          setSaving(true);\n          const result = await client.gamesCreate(values.name, values.players);\n          replace(`/games/${result.name}`);\n        }}\n      >\n        <Form.Item\n          name=\"name\"\n          label=\"Name\"\n          extra={<>This name is just used for reference only.</>}\n        >\n          <Input maxLength={30} />\n        </Form.Item>\n        <Form.Item\n          name=\"players\"\n          label=\"Players\"\n          extra={<>2-4 players currently supported.</>}\n        >\n          <InputNumber min={2} max={4} />\n        </Form.Item>\n        <Form.Item\n          name=\"online\"\n          label=\"Connectivity\"\n          extra={<>Local games are versus AI and played offline.</>}\n        >\n          <Radio.Group>\n            <Radio.Button value={false}>Local</Radio.Button>\n            <Radio.Button value={true} disabled>\n              Online\n            </Radio.Button>\n          </Radio.Group>\n        </Form.Item>\n        <Form.Item wrapperCol={{ span: 5 }}>\n          <Button\n            disabled={saving}\n            icon={saving ? <LoadingOutlined /> : undefined}\n            type=\"primary\"\n            style={{ width: '100%' }}\n            htmlType=\"submit\"\n          >\n            {saving ? <>Saving</> : <>Create Game</>}\n          </Button>\n        </Form.Item>\n      </Form>\n    </>\n  );\n}\n","import { PlusOutlined } from '@ant-design/icons';\nimport { Button, Table } from 'antd';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport { GameListData } from '../../../common/game-state';\nimport { GameClientContext } from '../../contexts/client';\n\nexport function ListGames(): JSX.Element {\n  const client = useContext(GameClientContext);\n  const { push } = useHistory();\n  const [games, setGames] = useState<GameListData[]>([]);\n\n  async function fetchGames() {\n    setGames(await client.gamesList());\n  }\n\n  useEffect(() => {\n    fetchGames();\n  }, [client]);\n\n  const dataSource = games\n    .sort((a, b) => a.lastUpdated - b.lastUpdated)\n    .map((v) => {\n      return {\n        name: <Link to={`/games/${v.name}`}>{v.name}</Link>,\n        key: v.name,\n        players: v.players,\n        status: v.kind === 'Lobby' ? 'Not Started' : 'In Progress',\n      };\n    });\n\n  return (\n    <>\n      <h1>Games</h1>\n      <p className=\"games-buttons\">\n        <Button\n          icon={<PlusOutlined />}\n          type=\"dashed\"\n          onClick={() => {\n            push('/games/create');\n          }}\n        >\n          Create Game\n        </Button>\n\n        <Button\n          icon={<PlusOutlined />}\n          type=\"dashed\"\n          disabled\n          onClick={() => {\n            push('/games/join');\n          }}\n        >\n          Join Game\n        </Button>\n      </p>\n      <Table\n        columns={[\n          { title: 'Name', dataIndex: 'name' },\n          { title: 'Players', dataIndex: 'players' },\n          { title: 'Status', dataIndex: 'status' },\n        ]}\n        dataSource={dataSource}\n        locale={{ emptyText: 'You are not in any games.' }}\n        pagination={false}\n      />\n    </>\n  );\n}\n","import { PointData } from '../../common/game-state';\n\nfunction simpleVisualize(\n  systems: { position: PointData; name: string }[],\n): string[][] {\n  let width = 0;\n  let height = 0;\n  systems.forEach((system) => {\n    const [x, y] = system.position;\n    if (x > width) {\n      width = x;\n    }\n    if (y > height) {\n      height = y;\n    }\n  });\n  if (width === 0 || height === 0) {\n    return [];\n  }\n  const grid: string[][] = new Array(height + 1);\n  for (let i = 0; i < grid.length; i++) {\n    grid[i] = new Array(width + 1).fill('');\n  }\n  systems.forEach((system) => {\n    const [x, y] = system.position;\n    const s = system.name.substring(0, 1);\n    grid[y][x] = s;\n  });\n  return grid;\n}\n\nexport interface MapProps {\n  systems: { position: PointData; name: string }[];\n}\n\nexport function MapPreview(props: MapProps): JSX.Element {\n  return (\n    <pre style={{ border: '1px dashed #666', padding: '5px' }}>\n      {simpleVisualize(props.systems)\n        .map((row) => row.map((col) => (col === '' ? '•' : col)).join(' '))\n        .join('\\n') + '\\n'}\n    </pre>\n  );\n}\n","import { LaptopOutlined, UserOutlined } from '@ant-design/icons';\nimport { Button, Form, Input, InputNumber, List } from 'antd';\nimport Prando from 'prando';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { GameLobbyData, PointData } from '../../../common/game-state';\nimport { PoissonMapGenerator } from '../../../common/map-generator';\nimport { PoissonDiskSampler } from '../../../common/poisson-disk';\nimport { GameClientContext } from '../../contexts/client';\nimport { MapPreview } from '../../ui/Map';\n\nexport function GameLobby(props: {\n  data: GameLobbyData;\n  onStart: (seed: string, systems: number) => void;\n}): JSX.Element {\n  const client = useContext(GameClientContext);\n  const { replace } = useHistory();\n  const listAiPlayers = new Array(props.data.players - 1).fill('');\n  const [seed, setSeed] = useState(props.data.seed);\n  const [pending, setPending] = useState(false);\n  const [systems, setSystems] = useState(Math.ceil(props.data.players * 3));\n  const [preview, setPreview] = useState<\n    { position: PointData; name: string; home: boolean }[]\n  >([]);\n\n  useEffect(() => {\n    const prando = new Prando(seed);\n    const ratio = systems / 26;\n    const sampler = new PoissonDiskSampler(\n      [Math.ceil(50 * ratio), Math.ceil(30 * ratio)],\n      4,\n      undefined,\n      prando,\n    );\n    const generator = new PoissonMapGenerator(sampler, prando);\n    setPreview(generator.generateMap(systems, props.data.players));\n  }, [seed, systems]);\n\n  return (\n    <>\n      <h3>Players</h3>\n      <List>\n        <List.Item>\n          <List.Item.Meta\n            avatar={<UserOutlined />}\n            title={'Human'}\n            description={'Ready'}\n          />\n        </List.Item>\n        {listAiPlayers.map((_, i) => {\n          return (\n            <List.Item key={i}>\n              <List.Item.Meta\n                avatar={<LaptopOutlined />}\n                title={`AI: ${i + 1}`}\n                description={'Ready'}\n              />\n            </List.Item>\n          );\n        })}\n      </List>\n      <h3>Settings</h3>\n      <Form\n        labelCol={{ span: 1 }}\n        wrapperCol={{ span: 4 }}\n        onFinish={() => {\n          setPending(true);\n          props.onStart(seed, systems);\n        }}\n      >\n        <Form.Item\n          label=\"Name\"\n          extra={<>Used for identifying the game only.</>}\n        >\n          <Input\n            readOnly\n            minLength={10}\n            maxLength={20}\n            value={props.data.name}\n          />\n        </Form.Item>\n        <Form.Item\n          label=\"Seed\"\n          extra={<>Used for procedural generation of systems.</>}\n        >\n          <Input\n            readOnly\n            minLength={10}\n            maxLength={20}\n            value={seed}\n            onChange={(v) => setSeed(v.target.value)}\n          />\n        </Form.Item>\n        <Form.Item label=\"Preview\">\n          <MapPreview systems={preview} />\n        </Form.Item>\n        <Form.Item\n          label=\"Maximum Systems\"\n          extra={<>A recommended number is 3 systems per player.</>}\n        >\n          <InputNumber\n            min={props.data.players}\n            max={26}\n            value={systems}\n            onChange={(v) => setSystems(parseInt(`${v}`))}\n          />\n        </Form.Item>\n        <p className=\"games-buttons\">\n          <Button type=\"primary\" htmlType=\"submit\" disabled={pending}>\n            Start\n          </Button>\n          <Button\n            danger\n            disabled={pending}\n            onClick={async () => {\n              setPending(true);\n              await client.gamesDelete(props.data.name);\n              replace('/games');\n            }}\n          >\n            Delete\n          </Button>\n        </p>\n      </Form>\n    </>\n  );\n}\n","import { Button } from 'antd';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { Route, Switch, useHistory, useParams } from 'react-router-dom';\nimport { GameListData, GameLobbyData } from '../../common/game-state';\nimport { GameClientContext } from '../contexts/client';\nimport './Games.scss';\nimport { CreateGames } from './Games/Create';\nimport { ListGames } from './Games/List';\nimport { GameLobby } from './Games/Lobby';\n\nfunction ViewGameOrLobby(): JSX.Element {\n  const params = useParams<{ readonly name: string }>();\n  const client = useContext(GameClientContext);\n  const [game, setGame] = useState<GameListData | GameLobbyData | undefined>();\n  useEffect(() => {\n    (async () => {\n      setGame(await client.gamesFetch(params.name));\n    })();\n  }, [client]);\n  const { goBack } = useHistory();\n  if (!game) {\n    return (\n      <>\n        <h1>\n          Game <code>{params.name}</code> not found.\n        </h1>\n        <p>Either this game has been deleted, or the link is expired.</p>\n        <Button onClick={goBack}>Go Back</Button>\n      </>\n    );\n  } else if (game.kind === 'Lobby') {\n    return (\n      <GameLobby\n        data={game as GameLobbyData}\n        onStart={async (seed, systems) => {\n          setGame(await client.gamesStart(params.name, seed, systems));\n        }}\n      />\n    );\n  } else {\n    return (\n      <>\n        Game for <code>{params.name}</code>\n      </>\n    );\n  }\n}\n\nexport function GamesRoute(): JSX.Element {\n  return (\n    <>\n      <Switch>\n        <Route exact path=\"/games/create\" component={CreateGames} />\n        <Route path=\"/games/:name\" component={ViewGameOrLobby} />\n        <Route exact path=\"/games\" component={ListGames} />\n      </Switch>\n    </>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './app/App';\nimport './index.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","import { GameListData, GameLobbyData } from './game-state';\n\n/**\n * Represents a connection to a game server.\n */\nexport abstract class GameClient {\n  /**\n   * Logs in the user.\n   */\n  abstract accountLogin(): Promise<void>;\n\n  /**\n   * Logs out the user.\n   */\n  abstract accountLogout(): Promise<void>;\n\n  /**\n   * Fetches a single game.\n   */\n  abstract gamesFetch(name: string): Promise<GameListData | undefined>;\n\n  /**\n   * Lists active games.\n   */\n  abstract gamesList(): Promise<GameListData[]>;\n\n  /**\n   * Deletes a game.\n   */\n  abstract gamesDelete(name: string): Promise<void>;\n\n  /**\n   * Creates a game (lobby).\n   */\n  abstract gamesCreate(name: string, players: number): Promise<GameLobbyData>;\n\n  /**\n   * Starts a game.\n   */\n  abstract gamesStart(\n    name: string,\n    seed: string,\n    systems: number,\n  ): Promise<GameListData>;\n}\n","export function deepClone<T>(input: T): T {\n  return JSON.parse(JSON.stringify(input));\n}\n","import Prando from 'prando';\nimport { OwnerData, PlayerStateData, SystemData } from './game-state';\nimport { PoissonMapGenerator } from './map-generator';\nimport { PoissonDiskSampler } from './poisson-disk';\nimport { deepClone } from './utils';\n\nexport class RandomSpawner {\n  private spawnEmpireSystem(): SystemData {\n    throw new Error('Unimplemented');\n  }\n\n  private spawnPlayerSystem(): SystemData {\n    throw new Error('Unimplemented');\n  }\n\n  spawnInitialSystems(\n    prando: Prando,\n    systems: number,\n    players: PlayerStateData[],\n  ): SystemData[] {\n    const ratio = systems / 26;\n    const sampler = new PoissonDiskSampler(\n      [Math.ceil(50 * ratio), Math.ceil(30 * ratio)],\n      4,\n      undefined,\n      prando,\n    );\n    const generator = new PoissonMapGenerator(sampler, prando);\n    players = deepClone(players).sort(() => prando.nextInt(-1, 1));\n    return generator.generateMap(systems, players.length).map((stub) => {\n      let owner: OwnerData;\n      if (stub.home) {\n        owner = { player: players.splice(0, 1)[0].userId };\n      } else {\n        owner = 'Empire';\n      }\n      return {\n        name: stub.name,\n        home: owner,\n        owner,\n        position: stub.position,\n      };\n    });\n  }\n}\n","import React from 'react';\nimport { GameClient } from '../../common/game-client';\nimport { GameServer } from '../../common/game-server';\nimport {\n  GameListData,\n  GameLobbyData,\n  GameStateData,\n} from '../../common/game-state';\n\nexport class LocalGameServer extends GameServer {\n  constructor(private readonly storage = localStorage) {\n    super(\n      (() => {\n        const result = storage.getItem('games');\n        return result ? JSON.parse(result) : {};\n      })(),\n    );\n  }\n\n  protected async writeState<T extends GameLobbyData | GameStateData>(\n    name: string,\n    data: T,\n  ): Promise<T> {\n    const result = await super.writeState(name, data);\n    this.storage.setItem('games', JSON.stringify(this.games));\n    return result;\n  }\n\n  protected async deleteState(name: string): Promise<void> {\n    await super.deleteState(name);\n    this.storage.setItem('games', JSON.stringify(this.games));\n  }\n}\n\nexport class LocalGameClient extends GameClient {\n  constructor(\n    private player: string = 'Guest',\n    private readonly server: GameServer = new LocalGameServer(),\n  ) {\n    super();\n  }\n\n  async accountLogin(): Promise<void> {\n    // Intentionally left blank.\n  }\n\n  async accountLogout(): Promise<void> {\n    // Intentionally left blank.\n  }\n\n  async gamesFetch(\n    name: string,\n  ): Promise<GameLobbyData | GameListData | undefined> {\n    return this.server.onGamesFetch(name);\n  }\n\n  async gamesList(): Promise<GameListData[]> {\n    return this.server.onGamesList();\n  }\n\n  async gamesDelete(name: string): Promise<void> {\n    return this.server.onGamesDelete(this.player, { name });\n  }\n\n  async gamesCreate(name: string, players: number): Promise<GameLobbyData> {\n    return this.server.onGamesCreate(this.player, { name, players });\n  }\n\n  async gamesStart(\n    name: string,\n    seed: string,\n    systems: number,\n  ): Promise<GameListData> {\n    return this.server.onGamesStart(this.player, { name, seed, systems });\n  }\n}\n\nexport const GameClientContext = React.createContext<GameClient>(\n  new LocalGameClient(),\n);\n","import Prando from 'prando';\nimport { RandomSpawner } from './game-logic';\nimport { GameListData, GameLobbyData, GameStateData } from './game-state';\nimport { deepClone } from './utils';\n\n/**\n * Represents a game server.\n */\nexport class GameServer {\n  private readonly spawner = new RandomSpawner();\n\n  constructor(\n    protected readonly games: {\n      [key: string]: GameLobbyData | GameStateData;\n    },\n    protected readonly prando = new Prando(),\n  ) {}\n\n  protected async readState(\n    name: string,\n  ): Promise<GameLobbyData | GameStateData | undefined> {\n    const result = this.games[name];\n    return result ? deepClone(result) : undefined;\n  }\n\n  /**\n   * Implementations of @see GameServer that persist data should override.\n   */\n  protected async writeState<T extends GameLobbyData | GameStateData>(\n    name: string,\n    data: T,\n  ): Promise<T> {\n    return (this.games[name] = deepClone(data));\n  }\n\n  /**\n   * Implementations of @see GameServer that persist data should override.\n   */\n  protected async deleteState(name: string): Promise<void> {\n    delete this.games[name];\n  }\n\n  protected currentTime(): number {\n    return new Date().getTime();\n  }\n\n  /**\n   * Processes a login request.\n   *\n   * Implementations that want authorization should override this method.\n   */\n  async onAccountLogin(): Promise<void> {\n    // Intentionally left blank.\n  }\n\n  /**\n   * Processes a game fetch request.\n   */\n  async onGamesFetch(\n    name: string,\n  ): Promise<GameLobbyData | GameListData | undefined> {\n    for (const game of Object.values(this.games)) {\n      if (game.name === name) {\n        if (game.kind === 'Lobby') {\n          return game;\n        } else {\n          return {\n            name: game.name,\n            kind: game.kind,\n            lastUpdated: game.lastUpdated,\n            players: game.players.length,\n          };\n        }\n      }\n    }\n  }\n\n  /**\n   * Processes a game list request.\n   */\n  async onGamesList(): Promise<GameListData[]> {\n    return Object.values(this.games).map((value) => {\n      return {\n        name: value.name,\n        kind: value.kind,\n        lastUpdated: value.lastUpdated,\n        players:\n          typeof value.players === 'number'\n            ? value.players\n            : value.players.length,\n      };\n    });\n  }\n\n  /**\n   * Processes a game creation request.\n   */\n  async onGamesCreate(\n    player: string,\n    request: {\n      name: string;\n      players: number;\n    },\n  ): Promise<GameLobbyData> {\n    return this.writeState(request.name, {\n      ...request,\n      seed: this.prando.nextString(10),\n      createdBy: player,\n      kind: 'Lobby',\n      lastUpdated: this.currentTime(),\n    });\n  }\n\n  /**\n   * Processes a game deletion request.\n   *\n   * @param _player\n   * @param request\n   */\n  async onGamesDelete(\n    _player: string,\n    request: {\n      name: string;\n    },\n  ): Promise<void> {\n    // TODO: Enforce player created the game being deleted or is an admin.\n    // TODO: Enforce the game exists.\n    return this.deleteState(request.name);\n  }\n\n  /**\n   * Processes a game start request.\n   *\n   * @param player\n   * @param request\n   */\n  async onGamesStart(\n    player: string,\n    request: {\n      name: string;\n      seed: string;\n      systems: number;\n    },\n  ): Promise<GameListData> {\n    // TODO: Enforce player created the game being started.\n    // TODO: Enforce the game exists and hasn't already been started.\n    // TODO: Enforce the player is in the game that is starting.\n    // TODO: Enforce systems are valid.\n    const pending = (await this.readState(request.name)) as GameLobbyData;\n    // TODO: Support multiplayer.\n    const players = [\n      { name: 'Human', userId: 'Guest' },\n      ...new Array(pending.players - 1).fill(null).map((_, i) => {\n        return {\n          name: `AI ${i + 1}`,\n          userId: `ai-${i + 1}`,\n        };\n      }),\n    ];\n    const systems = this.spawner.spawnInitialSystems(\n      new Prando(request.seed),\n      request.systems,\n      players,\n    );\n    const result = await this.writeState(request.name, {\n      name: pending.name,\n      lastUpdated: this.currentTime(),\n      createdBy: player,\n      kind: 'Game',\n      players,\n      systems,\n      settings: {\n        // TODO: Allow customization of these settings.\n        initialFactories: 10,\n        shipSpeedATurn: 4,\n      },\n    });\n    return {\n      name: result.name,\n      kind: result.kind,\n      lastUpdated: result.lastUpdated,\n      players: result.players.length,\n    };\n  }\n}\n","import Prando from 'prando';\nimport { PointData } from './game-state';\n\nfunction dist2(x1: number, y1: number, x2: number, y2: number): number {\n  return (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);\n}\n\n/**\n * @see https://github.com/ogus/poisson-disk/blob/master/src/poisson-disk.js.\n */\nexport class PoissonDiskSampler {\n  private readonly xMin = 0;\n  private readonly yMin = 0;\n  private readonly xMax: number;\n  private readonly yMax: number;\n  private readonly radius: number;\n  private readonly cellSize: number;\n  private readonly k: number;\n\n  private state!: {\n    width: number;\n    height: number;\n    data: [number, number][];\n  };\n  private queue!: [number, number][];\n  private firstPoint = true;\n\n  constructor(\n    viewport: [number, number],\n    minDistance = 1,\n    maxTries = 30,\n    private readonly prando = new Prando(),\n  ) {\n    this.xMax = viewport[0];\n    this.yMax = viewport[1];\n    this.radius = Math.max(minDistance, 1);\n    this.cellSize = this.radius * Math.SQRT1_2;\n    this.k = Math.max(maxTries, 2);\n    this.reset();\n  }\n\n  /**\n   * Reset the sampler.\n   */\n  reset(): void {\n    const width = Math.ceil((this.xMax - this.xMin) / this.cellSize);\n    const height = Math.ceil((this.yMax - this.yMin) / this.cellSize);\n    this.state = {\n      width,\n      height,\n      data: new Array(width * height).fill(null),\n    };\n    this.queue = [];\n    this.firstPoint = true;\n  }\n\n  /**\n   * Creates and returns a new point.\n   *\n   * @param x\n   * @param y\n   */\n  private createPoint(x: number, y: number): PointData {\n    const index =\n      Math.floor(x / this.cellSize) +\n      Math.floor(y / this.cellSize) * this.state.width;\n    const point = (this.state.data[index] = [x, y]);\n    this.queue.push(point);\n    return point;\n  }\n\n  /**\n   * Returns whether the provided points are valid.\n   *\n   * @param x\n   * @param y\n   */\n  private isValidPoint(x: number, y: number): boolean {\n    if (x < this.xMin || x > this.xMax || y < this.yMin || y > this.yMax) {\n      return false;\n    }\n    const col = Math.floor((x - this.xMin) / this.cellSize);\n    const row = Math.floor((y - this.yMin) / this.cellSize);\n    let index = 0;\n    for (let i = col - 2; i <= col + 2; i++) {\n      for (let j = row - 2; j <= row + 2; j++) {\n        if (i >= 0 && i < this.state.width && j >= 0 && j < this.state.height) {\n          index = i + j * this.state.width;\n          if (\n            this.state.data[index] !== null &&\n            dist2(x, y, this.state.data[index][0], this.state.data[index][1]) <=\n              this.radius * this.radius\n          ) {\n            return false;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Returns a standard `Math.random()`-like result.\n   */\n  private rng(): number {\n    return this.prando.next();\n  }\n\n  /**\n   * Returns the next point in the sampling, or `null` if there is no more.\n   */\n  nextPoint(): PointData | null {\n    let x = 0;\n    let y = 0;\n    if (this.firstPoint) {\n      this.firstPoint = false;\n      x = this.xMin + (this.xMax - this.xMin) * this.rng();\n      y = this.yMin + (this.yMax - this.yMin) * this.rng();\n      return this.createPoint(x, y);\n    }\n    let index = 0;\n    let distance = 0;\n    let angle = 0;\n    while (this.queue.length) {\n      index = (this.queue.length * this.rng()) | 0;\n      for (let i = 0; i < this.k; i++) {\n        distance = this.radius * (this.rng() + 1);\n        angle = 2 * Math.PI * this.rng();\n        x = this.queue[index][0] + distance * Math.cos(angle);\n        y = this.queue[index][1] + distance * Math.sin(angle);\n        if (this.isValidPoint(x, y)) {\n          return this.createPoint(x, y);\n        }\n      }\n      this.queue.splice(index, 1);\n    }\n    return null;\n  }\n\n  /**\n   * Returns whether there are no points.\n   */\n  get done(): boolean {\n    return !this.firstPoint && this.queue.length === 0;\n  }\n\n  /**\n   * Returns all the points possible, up to a maximum requested.\n   *\n   * @param max\n   */\n  points(max: number = Number.MAX_SAFE_INTEGER): [number, number][] {\n    const result: [number, number][] = [];\n    for (let i = 0; i < max; i++) {\n      const point = this.nextPoint();\n      if (point) {\n        result.push(point);\n      }\n    }\n    return result;\n  }\n}\n"],"sourceRoot":""}