{"version":3,"sources":["app/App.tsx","app/routes/Account.tsx","app/routes/Default.tsx","common/name-generator.ts","app/routes/Games.tsx","index.tsx","common/local-game-storage.ts","app/contexts/storage.ts","app/contexts/auth.ts"],"names":["App","hot","module","useState","result","document","head","baseURI","indexOf","undefined","baseName","useCookies","cookies","setCookies","authState","setAuthState","basename","Header","className","to","src","theme","mode","selectable","Item","disabled","icon","Provider","value","Content","path","onChange","state","type","AccountRoute","props","context","useContext","GlobalAuthContext","labelCol","span","wrapperCol","onClick","danger","Default","storage","LocalStorageContext","games","length","NameGenerator","rng","Prando","adjectives","nouns","this","nextArrayItem","nextInt","toString","padStart","CreateGame","Form","useForm","form","replace","useHistory","useEffect","setFieldsValue","name","next","players","online","onFinish","values","set","kind","label","extra","maxLength","min","max","Group","Button","style","width","htmlType","ViewLobby","aiPlayers","Array","fill","seed","nextString","systems","Math","ceil","Meta","avatar","UserOutlined","title","description","map","_","i","LaptopOutlined","readOnly","minLength","remove","ViewGameOrLobby","params","useParams","localGame","get","goBack","ListGames","push","dataSource","sort","a","b","lastUpdate","v","key","status","PlusOutlined","columns","dataIndex","locale","emptyText","pagination","GamesRoute","exact","component","ReactDOM","render","getElementById","LocalGameStorage","data","localStorage","getItem","JSON","parse","e","console","warn","setItem","stringify","Date","getTime","writeChanges","lobby","splice","React","createContext"],"mappings":"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","file":"static/js/main.88a834d1.chunk.js","sourcesContent":["import {\n  DatabaseOutlined,\n  SettingOutlined,\n  UserOutlined,\n} from '@ant-design/icons';\nimport { Button, Layout, Menu } from 'antd';\nimport React, { useState } from 'react';\nimport { useCookies } from 'react-cookie';\nimport { hot } from 'react-hot-loader';\nimport { BrowserRouter as Router, Link, Route, Switch } from 'react-router-dom';\nimport './App.scss';\nimport { GlobalAuthContext, GlobalAuthState } from './contexts/auth';\nimport { AccountRoute } from './routes/Account';\nimport { Default } from './routes/Default';\nimport { GamesRoute } from './routes/Games';\n\nfunction app(): JSX.Element {\n  const [baseName] = useState(() => {\n    const result = document.head.baseURI;\n    return result.indexOf('localhost') ? undefined : result;\n  });\n  const [cookies, setCookies] = useCookies(['auth']);\n  const [authState, setAuthState] = useState<GlobalAuthState>(cookies['auth']);\n\n  const updateAuth = (state: GlobalAuthState) => {\n    setCookies('auth', state);\n    setAuthState(state);\n  };\n\n  return (\n    <Router basename={baseName}>\n      <Layout>\n        <Layout.Header>\n          <div className=\"logo\">\n            <Link to=\"/\">\n              <img src={`${baseName || ''}/images/logo.png`} />\n            </Link>\n          </div>\n          <Menu theme=\"dark\" mode=\"horizontal\" selectable={false}>\n            <Menu.Item disabled={!authState} icon={<DatabaseOutlined />}>\n              <Link to=\"/games\">Games</Link>\n            </Menu.Item>\n            <Menu.Item icon={<UserOutlined />}>\n              <Link to=\"/account\">Account</Link>\n            </Menu.Item>\n            <Menu.Item disabled icon={<SettingOutlined />}>\n              <Link to=\"/settings\">Settings</Link>\n            </Menu.Item>\n          </Menu>\n        </Layout.Header>\n        <GlobalAuthContext.Provider value={authState}>\n          <Layout.Content>\n            <Switch>\n              <Route path=\"/games\">\n                <GamesRoute />\n              </Route>\n              <Route path=\"/account\">\n                <AccountRoute onChange={updateAuth} />\n              </Route>\n              <Route path=\"/settings\">Hello Settings</Route>\n              <Route path=\"/\">\n                {!authState ? (\n                  <>\n                    <Button type=\"dashed\">\n                      <Link to=\"/account\">\n                        <UserOutlined /> Login Required\n                      </Link>\n                    </Button>\n                  </>\n                ) : (\n                  <Default />\n                )}\n              </Route>\n            </Switch>\n          </Layout.Content>\n        </GlobalAuthContext.Provider>\n      </Layout>\n    </Router>\n  );\n}\n\nexport const App = hot(module)(app);\n","import { Button, Form } from 'antd';\nimport React, { useContext } from 'react';\nimport { GlobalAuthContext, GlobalAuthState } from '../contexts/auth';\nimport './Account.scss';\n\nexport interface AccountRateProps {\n  onChange: (newState: GlobalAuthState) => void;\n}\n\nexport function AccountRoute(props: AccountRateProps): JSX.Element {\n  const context = useContext(GlobalAuthContext);\n\n  return (\n    <Form\n      className=\"account-form\"\n      labelCol={{ span: 8 }}\n      wrapperCol={{ span: 16 }}\n    >\n      <h1>Account</h1>\n      <p>\n        A login is required to play <strong>Third Conflict</strong>. Currently\n        you can login as a <strong>Guest</strong> and create and play games\n        locally. In <em>future</em> releases you will be able to login with{' '}\n        <strong>Discord</strong> and play online.\n      </p>\n      {!context && (\n        <Form.Item>\n          <Button type=\"primary\" onClick={() => props.onChange('Guest')}>\n            Login as Guest\n          </Button>\n          <Button type=\"ghost\" disabled>\n            Login with Discord\n          </Button>\n        </Form.Item>\n      )}\n      {context && (\n        <Button type=\"primary\" danger onClick={() => props.onChange(null)}>\n          Logout\n        </Button>\n      )}\n    </Form>\n  );\n}\n","import { useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport { LocalStorageContext } from '../contexts/storage';\nimport './Default.scss';\n\nexport function Default(): JSX.Element {\n  const storage = useContext(LocalStorageContext);\n  return (\n    <>\n      <h1>\n        Welcome back to <strong>Third Conflict</strong>\n      </h1>\n      <p>\n        You have <Link to=\"/games\">{storage.games.length} pending game(s)</Link>\n        .\n      </p>\n    </>\n  );\n}\n","import Prando from 'prando';\n\nexport class NameGenerator {\n  constructor(\n    private readonly rng = new Prando(),\n    private readonly adjectives: string[] = [\n      'angry',\n      'attractive',\n      'bald',\n      'big',\n      'brave',\n      'clumsy',\n      'fierce',\n      'happy',\n      'itchy',\n      'handsome',\n      'petite',\n      'repulsive',\n      'silly',\n      'stocky',\n      'tall',\n      'tiny',\n      'wonderful',\n      'zealous',\n    ],\n    private readonly nouns: string[] = [\n      'antelope',\n      'cat',\n      'dog',\n      'eagle',\n      'gorilla',\n      'lion',\n      'rabbit',\n      'snake',\n      'tiger',\n      'vulture',\n      'zebra',\n    ],\n  ) {}\n\n  next(): string {\n    return `${this.rng.nextArrayItem(this.adjectives)}-${this.rng.nextArrayItem(\n      this.nouns,\n    )}-${this.rng.nextInt(0, 99).toString().padStart(2, '0')}`;\n  }\n}\n","import { LaptopOutlined, PlusOutlined, UserOutlined } from '@ant-design/icons';\nimport { Button, Form, Input, InputNumber, List, Radio, Table } from 'antd';\nimport Prando from 'prando';\nimport React, { useContext, useEffect } from 'react';\nimport { Link, Route, Switch, useHistory, useParams } from 'react-router-dom';\nimport { GameLobbyData } from '../../common/game-lobby';\nimport { NameGenerator } from '../../common/name-generator';\nimport { GlobalAuthContext } from '../contexts/auth';\nimport { LocalStorageContext } from '../contexts/storage';\nimport './Games.scss';\n\nfunction CreateGame(): JSX.Element {\n  const [form] = Form.useForm<GameLobbyData>();\n  const { replace } = useHistory();\n  const storage = useContext(LocalStorageContext);\n  useEffect(() => {\n    form.setFieldsValue({\n      name: new NameGenerator().next(),\n      players: 2,\n      online: false,\n    });\n  }, []);\n  return (\n    <>\n      <h1>Create a Game</h1>\n      <p>\n        Currently, you can create <strong>local</strong> (offline) games with AI\n        opponents. In future builds, once logged in with{' '}\n        <strong>Discord</strong>, you will be able to create and play online\n        games.\n      </p>\n      <Form\n        labelCol={{ span: 1 }}\n        wrapperCol={{ span: 4 }}\n        form={form}\n        onFinish={(values) => {\n          storage.set({ ...values, kind: 'Lobby' });\n          replace(`/games/${values.name}`);\n        }}\n      >\n        <Form.Item\n          name=\"name\"\n          label=\"Name\"\n          extra={<>This name is just used for reference only.</>}\n        >\n          <Input maxLength={30} />\n        </Form.Item>\n        <Form.Item\n          name=\"players\"\n          label=\"Players\"\n          extra={<>2-4 players currently supported.</>}\n        >\n          <InputNumber min={2} max={4} />\n        </Form.Item>\n        <Form.Item\n          name=\"online\"\n          label=\"Connectivity\"\n          extra={<>Local games are versus AI and played offline.</>}\n        >\n          <Radio.Group>\n            <Radio.Button value={false}>Local</Radio.Button>\n            <Radio.Button value={true} disabled>\n              Online\n            </Radio.Button>\n          </Radio.Group>\n        </Form.Item>\n        <Form.Item wrapperCol={{ span: 5 }}>\n          <Button type=\"primary\" style={{ width: '100%' }} htmlType=\"submit\">\n            Create\n          </Button>\n        </Form.Item>\n      </Form>\n    </>\n  );\n}\n\ninterface GameSetup {\n  name: string;\n  seed: string;\n  systems: number;\n}\n\nfunction ViewLobby(props: GameLobbyData): JSX.Element {\n  const storage = useContext(LocalStorageContext);\n  const { replace } = useHistory();\n  const aiPlayers = new Array(props.players - 1).fill('');\n  const [form] = Form.useForm<GameSetup>();\n  useEffect(() => {\n    form.setFieldsValue({\n      name: props.name,\n      seed: new Prando().nextString(10),\n      systems: Math.ceil(props.players * 2.5),\n    });\n  }, []);\n  return (\n    <>\n      <h3>Players</h3>\n      <List>\n        <List.Item>\n          <List.Item.Meta\n            avatar={<UserOutlined />}\n            title={'Human'}\n            description={'Ready'}\n          />\n        </List.Item>\n        {aiPlayers.map((_, i) => {\n          return (\n            <List.Item key={i}>\n              <List.Item.Meta\n                avatar={<LaptopOutlined />}\n                title={`AI: ${i + 1}`}\n                description={'Ready'}\n              />\n            </List.Item>\n          );\n        })}\n      </List>\n      <h3>Settings</h3>\n      <Form labelCol={{ span: 1 }} wrapperCol={{ span: 4 }} form={form}>\n        <Form.Item\n          label=\"Name\"\n          name=\"name\"\n          extra={<>Used for identifying the game only.</>}\n        >\n          <Input readOnly minLength={10} maxLength={20} />\n        </Form.Item>\n        <Form.Item\n          label=\"Seed\"\n          name=\"seed\"\n          extra={<>Used for procedural generation of systems.</>}\n        >\n          <Input readOnly minLength={10} maxLength={20} />\n        </Form.Item>\n        <Form.Item\n          label=\"Systems\"\n          name=\"systems\"\n          extra={<>A recommended number is 2-3 systems per player.</>}\n        >\n          <InputNumber min={props.players} max={26} />\n        </Form.Item>\n        <p className=\"games-buttons\">\n          <Button type=\"primary\" disabled htmlType=\"submit\">\n            Start\n          </Button>\n          <Button\n            danger\n            onClick={() => {\n              storage.remove(props.name);\n              replace('/games');\n            }}\n          >\n            Delete\n          </Button>\n        </p>\n      </Form>\n    </>\n  );\n}\n\nfunction ViewGameOrLobby(): JSX.Element {\n  const params = useParams<{ readonly name: string }>();\n  const storage = useContext(LocalStorageContext);\n  const localGame = storage.get(params.name);\n  const { goBack } = useHistory();\n  if (!localGame) {\n    return (\n      <>\n        <h1>\n          Game <code>{params.name}</code> not found.\n        </h1>\n        <p>Either this game has been deleted, or the link is expired.</p>\n        <Button onClick={goBack}>Go Back</Button>\n      </>\n    );\n  } else if (localGame.kind === 'Lobby') {\n    return <ViewLobby {...localGame} />;\n  } else {\n    return (\n      <>\n        Game for <code>{params.name}</code>\n      </>\n    );\n  }\n}\n\nfunction ListGames(): JSX.Element {\n  const context = useContext(GlobalAuthContext);\n  const storage = useContext(LocalStorageContext);\n  const { push } = useHistory();\n  const dataSource = storage.games\n    .sort((a, b) => a.lastUpdate - b.lastUpdate)\n    .map((v) => {\n      return {\n        name: <Link to={`/games/${v.name}`}>{v.name}</Link>,\n        key: v.name,\n        players: v.players,\n        status: v.kind === 'Lobby' && !v.online ? 'Lobby (Host)' : 'Unknown',\n      };\n    });\n  return (\n    <>\n      <h1>Games</h1>\n      <p className=\"games-buttons\">\n        <Button\n          icon={<PlusOutlined />}\n          type=\"dashed\"\n          disabled={!context}\n          onClick={() => {\n            push('/games/create');\n          }}\n        >\n          Create Game\n        </Button>\n\n        <Button\n          icon={<PlusOutlined />}\n          type=\"dashed\"\n          disabled\n          onClick={() => {\n            push('/games/join');\n          }}\n        >\n          Join Game\n        </Button>\n      </p>\n      <Table\n        columns={[\n          { title: 'Name', dataIndex: 'name' },\n          { title: 'Players', dataIndex: 'players' },\n          { title: 'Status', dataIndex: 'status' },\n        ]}\n        dataSource={dataSource}\n        locale={{ emptyText: 'You are not in any games.' }}\n        pagination={false}\n      />\n    </>\n  );\n}\n\nexport function GamesRoute(): JSX.Element {\n  return (\n    <>\n      <Switch>\n        <Route path=\"/games/create\">\n          <CreateGame />\n        </Route>\n        <Route path=\"/games/join\">Join</Route>\n        <Route path=\"/games/:name\">\n          <ViewGameOrLobby />\n        </Route>\n        <Route exact path=\"/games\" component={ListGames} />\n      </Switch>\n    </>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './app/App';\nimport './index.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","import { GameLobbyData } from './game-lobby';\nimport { GameStateData } from './game-state';\n\nexport class LocalGameStorage {\n  public readonly games: (GameStateData | GameLobbyData)[];\n\n  constructor() {\n    const data = localStorage.getItem('games') || '[]';\n    try {\n      this.games = JSON.parse(data);\n    } catch (e) {\n      console.warn(e);\n      this.games = [];\n    }\n  }\n\n  protected writeChanges(): void {\n    localStorage.setItem('games', JSON.stringify(this.games));\n  }\n\n  set(data: GameLobbyData | GameStateData): void {\n    for (let i = 0; i < this.games.length; i++) {\n      if (this.games[i].name === data.name) {\n        this.games[i] = {\n          ...data,\n          lastUpdate: new Date().getTime(),\n        };\n        this.writeChanges();\n        return;\n      }\n    }\n    this.games.push(data);\n    this.writeChanges();\n  }\n\n  get(name: string): GameLobbyData | GameStateData | undefined {\n    for (const lobby of this.games) {\n      if (lobby.name === name) {\n        return lobby;\n      }\n    }\n  }\n\n  remove(name: string): void {\n    for (let i = 0; i < this.games.length; i++) {\n      if (this.games[i].name === name) {\n        this.games.splice(i, 1);\n        break;\n      }\n    }\n    this.writeChanges();\n  }\n}\n","import React from 'react';\nimport { LocalGameStorage } from '../../common/local-game-storage';\n\nexport const LocalStorageContext = React.createContext(new LocalGameStorage());\n","import React from 'react';\n\n/**\n * Authentication state.\n *\n * Represents either logged out, logged in as a guest, logged in with Discord.\n */\nexport type GlobalAuthState = null | 'Guest' | { discordId: string };\nexport const GlobalAuthContext = React.createContext<GlobalAuthState>(null);\n"],"sourceRoot":""}