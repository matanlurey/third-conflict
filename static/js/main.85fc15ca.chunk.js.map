{"version":3,"sources":["app/contexts/auth.ts","common/game-state.ts","common/map-generator.ts","app/App.tsx","app/routes/Account.tsx","app/routes/Default.tsx","app/routes/Settings.tsx","common/name-generator.ts","app/routes/Games/Create.tsx","app/routes/Games/List.tsx","app/ui/Map.tsx","app/routes/Games/Lobby.tsx","app/ui/Header.tsx","app/routes/Games/Play.tsx","app/routes/Games.tsx","index.tsx","common/game-client.ts","common/game-logic.ts","app/contexts/client.ts","common/game-server.ts","common/utils.ts","common/poisson-disk.ts"],"names":["GlobalAuthContext","React","createContext","Point","data","to","this","x","y","x1","y1","Array","x2","y2","parseFloat","Math","sqrt","pow","toFixed","PoissonMapGenerator","sampler","prando","names","isArray","PoissonDiskSampler","undefined","systems","players","fetchNames","sort","nextInt","points","result","i","length","push","name","position","max","ceil","home","pickFairestHomeSystem","reducePositionsToOrigin","Prando","amount","slice","maxDistance","distance","isHome","weight","positions","lowSum","Number","MAX_SAFE_INTEGER","a","b","weights","computeDistanceWeight","sumWeight","reduce","p","c","open","filter","s","Error","nextArrayItem","minX","minY","system","map","App","hot","module","useCookies","cookies","setCookies","useState","authState","setAuthState","Header","className","src","theme","mode","selectable","Item","disabled","icon","Provider","value","Content","path","component","GamesRoute","onChange","state","SettingsRoute","type","AccountRoute","props","context","useContext","labelCol","span","wrapperCol","onClick","danger","Default","client","GameClientContext","pendingGames","setPendingGames","useEffect","gamesList","gameList","localStorage","clear","location","replace","NameGenerator","rng","adjectives","nouns","toString","padStart","CreateGames","Form","useForm","form","useHistory","saving","setSaving","setFieldsValue","next","onFinish","values","gamesCreate","label","extra","maxLength","min","Group","Button","LoadingOutlined","style","width","htmlType","ListGames","games","setGames","fetchGames","dataSource","lastUpdated","v","key","status","kind","PlusOutlined","columns","title","dataIndex","locale","emptyText","pagination","MapPreview","height","forEach","determineBounds","elements","matrix","decorators","toLowerCase","substring","toUpperCase","repeat","ViewGameLobby","listAiPlayers","fill","seed","setSeed","pending","setPending","setSystems","preview","setPreview","ratio","generator","generateMap","Meta","avatar","UserOutlined","description","_","LaptopOutlined","onStart","readOnly","minLength","target","parseInt","gamesDelete","GameHeader","pendingPromise","setPendingPromise","disableEndTurn","setDisableEndTurn","waitingForPlayers","endedTurn","clearTimeout","onEndTurn","handle","setTimeout","window","confirm","onResign","PlayGame","defaultActiveKey","TabPane","tab","ViewGameOrLobby","params","useParams","game","setGame","pullGameState","gamesFetch","fetchedGame","pollTimer","setInterval","clearInterval","goBack","gamesStart","gameResign","gameEndTurn","exact","ReactDOM","render","document","getElementById","GameClient","viewGameStateAs","perspective","player","userId","fogOfWar","FogOfWar","serverAgent","currentTurn","determineStatus","owner","RandomSpawner","initialFactories","floor","transports","troops","warships","morale","recruit","settings","deepClone","stub","orbit","factories","planets","splice","spawnPlayerFleet","spawnPlanet","spawnEmpireFleet","randomEmpireFactories","TurnProcessor","LocalGameServer","storage","getItem","JSON","parse","setItem","stringify","spawner","turnProcessor","currentTime","Date","getTime","readState","writeState","Object","request","nextString","createdBy","_player","deleteState","shipSpeedATurn","spawnInitialSystems","initialState","stateWithFogOfWar","createInitialFogOfWar","writePlayer","every","nextTurn","LocalGameClient","server","onGamesFetch","onGamesList","onGamesDelete","onGamesCreate","onGamesStart","onGameEndTurn","onGameResign","input","viewport","minDistance","maxTries","xMin","yMin","xMax","yMax","radius","cellSize","k","queue","firstPoint","SQRT1_2","reset","index","point","col","row","j","createPoint","angle","PI","cos","sin","isValidPoint","nextPoint"],"mappings":"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","file":"static/js/main.85fc15ca.chunk.js","sourcesContent":["import React from 'react';\n\n/**\n * Authentication state.\n *\n * Represents either logged out, logged in as a guest, logged in with Discord.\n */\nexport type GlobalAuthState = null | 'Guest' | { discordId: string };\nexport const GlobalAuthContext = React.createContext<GlobalAuthState>(null);\n","/**\n * Represents minimal information about a game for listing purposes.\n */\nexport interface GameListData {\n  /**\n   * Name of the game, used for matchmaking and reference purposes.\n   */\n  readonly name: string;\n\n  /**\n   * Number of players.\n   */\n  readonly players: number;\n\n  /**\n   * Last updated timestamp.\n   */\n  readonly lastUpdated: number;\n\n  /**\n   * Type of game saved data.\n   */\n  readonly kind: 'Lobby' | 'Game';\n}\n\n/**\n * Represents a game that has not yet been started.\n */\nexport interface GameLobbyData {\n  /**\n   * Name of the game, used for matchmaking and reference purposes.\n   */\n  readonly name: string;\n\n  /**\n   * Used to procedurally generate the map and empire.\n   */\n  readonly seed: string;\n\n  /**\n   * Which player created and administrates the game.\n   */\n  readonly createdBy: string;\n\n  /**\n   * Last updated timestamp.\n   */\n  readonly lastUpdated: number;\n\n  /**\n   * Number of players.\n   */\n  readonly players: number;\n\n  /**\n   * Type of game saved data.\n   */\n  readonly kind: 'Lobby';\n}\n\n/**\n * Represents the complete game state at a point of time.\n */\nexport interface GameStateData {\n  /**\n   * Name of the game, used for matchmaking and reference purposes.\n   */\n  readonly name: string;\n\n  /**\n   * Last updated timestamp.\n   */\n  readonly lastUpdated: number;\n\n  /**\n   * Which player created and administrates the game.\n   */\n  readonly createdBy: string;\n\n  /**\n   * Current turn number.\n   */\n  readonly currentTurn: number;\n\n  /**\n   * Players in the game.\n   */\n  readonly players: PlayerStateData[];\n\n  /**\n   * Systems in the game.\n   */\n  readonly systems: SystemData[];\n\n  /**\n   * Type of game saved data.\n   */\n  readonly kind: 'Game';\n\n  /**\n   * Settings in the game.\n   */\n  readonly settings: GameSettingsData;\n}\n\n/**\n * Represents settings in the game.\n */\nexport interface GameSettingsData {\n  /**\n   * How many factories initial systems start with.\n   *\n   * The more factories the faster a system can churn out units. This number\n   * is also used as the maximum number of factories that an imperial system\n   * will build.\n   */\n  readonly initialFactories: number;\n\n  /**\n   * How many units of distance a ship moves a turn, maximum.\n   *\n   * The faster the speed the farther ships can make it every \"tick\" of the game.\n   */\n  readonly shipSpeedATurn: number;\n}\n\n/**\n * Represents the state of a player within a game.\n */\nexport interface PlayerStateData {\n  /**\n   * Name of the player.\n   */\n  readonly name: string;\n\n  /**\n   * User ID of the player (guaranteed unique).\n   */\n  readonly userId: string;\n\n  /**\n   * Whether this player is run by a server-driven agent.\n   */\n  readonly serverAgent: boolean;\n\n  /**\n   * A view of the game revealed to the player.\n   */\n  readonly fogOfWar: FogOfWarGameData;\n}\n\n/**\n * Represents a player's view of @see GameStateData.\n */\nexport interface FogOfWarGameData {\n  /**\n   * @see GameStateData.kind.\n   */\n  readonly kind: 'Game';\n\n  /**\n   * @see GameStateData.name.\n   */\n  readonly name: string;\n\n  /**\n   * @see GameStateData.players.\n   */\n  readonly players: number;\n\n  /**\n   * @see GameStateData.currentTurn.\n   */\n  readonly currentTurn: number;\n\n  /**\n   * Whether player ended their turn.\n   */\n  readonly endedTurn: boolean;\n\n  /**\n   * @see GameStateData.systems.\n   */\n  readonly systems: FogOfWarSystemData[];\n}\n\n/**\n * How a @see SystemData is seen by another player.\n */\nexport type HudIndicatorTag = 'Self' | 'Empire' | 'Enemy' | undefined;\n\n/**\n * Represents an {X, Y} coordinate pair.\n */\nexport type PointData = [number, number];\n\n/**\n * A helper class for wrapping and manipulating @see {PointData} instances.\n */\nexport class Point {\n  constructor(private readonly data: PointData) {}\n\n  get x(): number {\n    return this.data[0];\n  }\n\n  get y(): number {\n    return this.data[1];\n  }\n\n  distance(to: Point | PointData): number {\n    const [x1, y1] = [this.x, this.y];\n    const [x2, y2] = to instanceof Array ? to : [to.x, to.y];\n    return parseFloat(\n      Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2)).toFixed(2),\n    );\n  }\n}\n\n/**\n * Represents a \"tag\" for control of an entity.\n */\nexport type OwnerData = 'Empire' | { player: string };\n\n/**\n * Represents a star system.\n */\nexport interface SystemData {\n  /**\n   * Position of the system.\n   */\n  readonly position: PointData;\n\n  /**\n   * Name of the system.\n   */\n  readonly name: string;\n\n  /**\n   * The userId of the which player this is a home system of.\n   */\n  readonly home: OwnerData;\n\n  /**\n   * The userId of which player controls the system.\n   *\n   * Note, this may conflict with @member home or individual planet control.\n   */\n  readonly owner: OwnerData;\n\n  /**\n   * Orbiting fleet controlled by @member owner.\n   */\n  readonly orbit: FleetData;\n\n  /**\n   * Number of factories present in the system.\n   */\n  readonly factories: number;\n\n  /**\n   * Planets in the system.\n   */\n  readonly planets: PlanetData[];\n}\n\n/**\n * Represents a planet in a star system.\n */\nexport interface PlanetData {\n  /**\n   * Troops garrisoned on the planet.\n   */\n  readonly troops: number;\n\n  /**\n   * Number of troops recruited per turn.\n   */\n  readonly recruit: number;\n\n  /**\n   * Morale of the planet.\n   */\n  readonly morale: number;\n\n  /**\n   * Owner of the planet.\n   */\n  readonly owner: OwnerData;\n}\n\n/**\n * Represents a player's view of @see SystemData.\n */\nexport interface FogOfWarSystemData {\n  /**\n   * @see SystemData.name.\n   */\n  readonly name: string;\n\n  /**\n   * @see SystemData.position.\n   */\n  readonly position: PointData;\n\n  /**\n   * @see HudIndicatorTag.\n   */\n  readonly status: HudIndicatorTag;\n\n  /**\n   * Number of factories present in the system.\n   *\n   * If `undefined`, then it is unknown to the current player.\n   */\n  readonly factories?: number;\n}\n\n/**\n * Represents a collection of ships.\n */\nexport interface FleetData {\n  /**\n   * WarShips that are part of this fleet.\n   */\n  readonly warships: number;\n\n  /**\n   * Transports that are part of this fleet.\n   */\n  readonly transports: number;\n\n  /**\n   * Troops that are on board @member transports.\n   */\n  readonly troops: number;\n}\n","import Prando from 'prando';\nimport { Point, PointData } from './game-state';\nimport { PoissonDiskSampler } from './poisson-disk';\n\nexport abstract class MapGenerator {\n  constructor(\n    protected readonly prando = new Prando(),\n    protected readonly names = [\n      'Alfa',\n      'Bravo',\n      'Charlie',\n      'Delta',\n      'Echo',\n      'Foxtrot',\n      'Golf',\n      'Hotel',\n      'India',\n      'Juliett',\n      'Kilo',\n      'Lima',\n      'Mike',\n      'November',\n      'Oscar',\n      'Papa',\n      'Quebec',\n      'Romeo',\n      'Sierra',\n      'Tango',\n      'Uniform',\n      'Victor',\n      'Whiskey',\n      'Xray',\n      'Yankee',\n      'Zulu',\n    ],\n  ) {}\n\n  /**\n   * Returns a set @param amount of system names.\n   */\n  protected fetchNames(amount: number): string[] {\n    // TODO: Validate input (int, at least 1, at most names.length).\n    return this.names.slice(0, amount);\n  }\n\n  /**\n   * Given the inputs, determines an appropriate \"weighted\" @param distance.\n   */\n  protected computeDistanceWeight(\n    maxDistance: number,\n    distance: number,\n    isHome: boolean,\n  ): number {\n    let weight = maxDistance - distance;\n    if (isHome) {\n      weight = Math.pow(2, weight);\n    }\n    return weight;\n  }\n\n  /**\n   * Given @param positions, returns the farthest open system to use as a home.\n   */\n  protected pickFairestHomeSystem<\n    T extends {\n      position: PointData;\n      home?: unknown;\n    }\n  >(positions: T[]): T {\n    let result: T | undefined;\n    let lowSum = Number.MAX_SAFE_INTEGER;\n    let maxDistance = 0;\n    for (const a of positions) {\n      for (const b of positions) {\n        const distance = new Point(a.position).distance(b.position);\n        if (distance > maxDistance) {\n          maxDistance = distance;\n        }\n      }\n    }\n    for (const a of positions) {\n      if (a.home) {\n        continue;\n      }\n      const weights: number[] = [];\n      for (const b of positions) {\n        const distance = new Point(a.position).distance(b.position);\n        const weight = this.computeDistanceWeight(\n          maxDistance,\n          distance,\n          !!b.home,\n        );\n        weights.push(weight);\n      }\n      const sumWeight = weights.reduce((p, c) => p + c, 0);\n      if (sumWeight < lowSum) {\n        lowSum = sumWeight;\n        result = a;\n      }\n    }\n    if (!result) {\n      const open = positions.filter((s) => !s.home);\n      if (open.length === 0) {\n        throw new Error('Failed to find an open system.');\n      }\n      result = this.prando.nextArrayItem(open);\n    }\n    return result;\n  }\n\n  /**\n   * Given a set of @param positions where the `{x, y}` coordinate pairs might\n   * be scattered, finds the smallest `x` and `y` coordinate, and re-aligns all\n   * positions to be as close as possible to `{0, 0}`.\n   */\n  protected reducePositionsToOrigin<\n    T extends {\n      position: PointData;\n    }\n  >(positions: T[]): T[] {\n    let minX = Number.MAX_SAFE_INTEGER;\n    let minY = Number.MAX_SAFE_INTEGER;\n    for (const system of positions) {\n      const [x, y] = system.position;\n      if (x < minX) {\n        minX = x;\n      }\n      if (y < minY) {\n        minY = y;\n      }\n    }\n    return positions.map((system) => {\n      let [x, y] = system.position;\n      x -= minX;\n      y -= minY;\n      return {\n        ...system,\n        position: [x, y],\n      };\n    });\n  }\n\n  abstract generateMap(\n    systems: number,\n    players: number,\n  ): { position: PointData; name: string }[];\n}\n\nexport class PoissonMapGenerator extends MapGenerator {\n  private readonly sampler: PoissonDiskSampler;\n\n  constructor(\n    sampler: PoissonDiskSampler | [number, number],\n    prando?: Prando,\n    names?: string[],\n  ) {\n    super(prando, names);\n    this.sampler = Array.isArray(sampler)\n      ? new PoissonDiskSampler(sampler, 4, undefined, prando)\n      : sampler;\n  }\n\n  generateMap(\n    systems: number,\n    players: number,\n  ): { position: PointData; name: string; home: boolean }[] {\n    const names = this.fetchNames(systems);\n    names.sort(() => this.prando.nextInt(-1, 1));\n    const points = this.sampler.points(systems);\n    const result: { position: PointData; name: string; home: boolean }[] = [];\n    for (let i = 0; i < points.length; i++) {\n      result.push({\n        name: names[i],\n        position: [\n          Math.max(Math.ceil(points[i][0] - 1), 0),\n          Math.max(Math.ceil(points[i][1] - 1), 0),\n        ],\n        home: false,\n      });\n    }\n    while (players--) {\n      this.pickFairestHomeSystem(result).home = true;\n    }\n    return this.reducePositionsToOrigin(result);\n  }\n}\n","import {\n  DatabaseOutlined,\n  SettingOutlined,\n  UserOutlined,\n} from '@ant-design/icons';\nimport { Button, Layout, Menu } from 'antd';\nimport React, { useState } from 'react';\nimport { useCookies } from 'react-cookie';\nimport { hot } from 'react-hot-loader';\nimport { BrowserRouter as Router, Link, Route, Switch } from 'react-router-dom';\nimport './App.scss';\nimport { GlobalAuthContext, GlobalAuthState } from './contexts/auth';\nimport { AccountRoute } from './routes/Account';\nimport { Default } from './routes/Default';\nimport { GamesRoute } from './routes/Games';\nimport { SettingsRoute } from './routes/Settings';\n\nfunction app(): JSX.Element {\n  const [cookies, setCookies] = useCookies(['auth']);\n  const [authState, setAuthState] = useState<GlobalAuthState>(cookies['auth']);\n\n  const updateAuth = (state: GlobalAuthState) => {\n    setCookies('auth', state);\n    setAuthState(state);\n  };\n\n  return (\n    <Router>\n      <Layout>\n        <Layout.Header>\n          <div className=\"logo\">\n            <Link to=\"/\">\n              <img src=\"/images/logo.png\" />\n            </Link>\n          </div>\n          <Menu theme=\"dark\" mode=\"horizontal\" selectable={false}>\n            <Menu.Item disabled={!authState} icon={<DatabaseOutlined />}>\n              <Link to=\"/games\">Games</Link>\n            </Menu.Item>\n            <Menu.Item icon={<UserOutlined />}>\n              <Link to=\"/account\">Account</Link>\n            </Menu.Item>\n            <Menu.Item icon={<SettingOutlined />}>\n              <Link to=\"/settings\">Settings</Link>\n            </Menu.Item>\n          </Menu>\n        </Layout.Header>\n        <GlobalAuthContext.Provider value={authState}>\n          <Layout.Content>\n            <Switch>\n              <Route path=\"/games\" component={GamesRoute} />\n              <Route path=\"/account\">\n                <AccountRoute onChange={updateAuth} />\n              </Route>\n              <Route path=\"/settings\" component={SettingsRoute} />\n              <Route path=\"/\">\n                {!authState ? (\n                  <>\n                    <Button type=\"dashed\">\n                      <Link to=\"/account\">\n                        <UserOutlined /> Login Required\n                      </Link>\n                    </Button>\n                  </>\n                ) : (\n                  <Default />\n                )}\n              </Route>\n            </Switch>\n          </Layout.Content>\n        </GlobalAuthContext.Provider>\n      </Layout>\n    </Router>\n  );\n}\n\nexport const App = hot(module)(app);\n","import { Button, Form } from 'antd';\nimport React, { useContext } from 'react';\nimport { GlobalAuthContext, GlobalAuthState } from '../contexts/auth';\nimport './Account.scss';\n\nexport interface AccountRateProps {\n  onChange: (newState: GlobalAuthState) => void;\n}\n\nexport function AccountRoute(props: AccountRateProps): JSX.Element {\n  const context = useContext(GlobalAuthContext);\n\n  return (\n    <Form\n      className=\"account-form\"\n      labelCol={{ span: 8 }}\n      wrapperCol={{ span: 16 }}\n    >\n      <h1>Account</h1>\n      <p>\n        A login is required to play <strong>Third Conflict</strong>. Currently\n        you can login as a <strong>Guest</strong> and create and play games\n        locally. In <em>future</em> releases you will be able to login with{' '}\n        <strong>Discord</strong> and play online.\n      </p>\n      {!context && (\n        <Form.Item>\n          <Button type=\"primary\" onClick={() => props.onChange('Guest')}>\n            Login as Guest\n          </Button>\n          <Button type=\"ghost\" disabled>\n            Login with Discord\n          </Button>\n        </Form.Item>\n      )}\n      {context && (\n        <Button type=\"primary\" danger onClick={() => props.onChange(null)}>\n          Logout\n        </Button>\n      )}\n    </Form>\n  );\n}\n","import { useContext, useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { GameClientContext } from '../contexts/client';\nimport './Default.scss';\n\nexport function Default(): JSX.Element {\n  const client = useContext(GameClientContext);\n  const [pendingGames, setPendingGames] = useState<number | undefined>();\n  useEffect(() => {\n    (async () => {\n      const gameList = await client.gamesList();\n      setPendingGames(gameList.length);\n    })();\n  }, [client]);\n  return (\n    <>\n      <h1>\n        Welcome back to <strong>Third Conflict</strong>\n      </h1>\n      <p>\n        {/* TODO: Show loading indicator. */}\n        You have <Link to=\"/games\">{pendingGames} pending game(s)</Link>.\n      </p>\n    </>\n  );\n}\n","import { Button, Form } from 'antd';\nimport React from 'react';\nimport './Settings.scss';\n\nexport function SettingsRoute(): JSX.Element {\n  return (\n    <>\n      <h1>Settings</h1>\n      <p>\n        This game is in active development. As such, the data model is\n        constantly evolving, and it's possible to get into a state where you\n        have invalid data and the app/game is no longer functioning properly.\n      </p>\n      <Form\n        className=\"account-form\"\n        labelCol={{ span: 8 }}\n        wrapperCol={{ span: 16 }}\n      >\n        <Form.Item>\n          <Button\n            type=\"primary\"\n            danger\n            onClick={() => {\n              localStorage.clear();\n              location.replace('/');\n            }}\n          >\n            Reset all data\n          </Button>\n        </Form.Item>\n      </Form>\n    </>\n  );\n}\n","import Prando from 'prando';\n\nexport class NameGenerator {\n  constructor(\n    private readonly rng = new Prando(),\n    private readonly adjectives: string[] = [\n      'angry',\n      'attractive',\n      'bald',\n      'big',\n      'brave',\n      'clumsy',\n      'fierce',\n      'happy',\n      'itchy',\n      'handsome',\n      'petite',\n      'repulsive',\n      'silly',\n      'stocky',\n      'tall',\n      'tiny',\n      'wonderful',\n      'zealous',\n    ],\n    private readonly nouns: string[] = [\n      'antelope',\n      'cat',\n      'dog',\n      'eagle',\n      'gorilla',\n      'lion',\n      'rabbit',\n      'snake',\n      'tiger',\n      'vulture',\n      'zebra',\n    ],\n  ) {}\n\n  next(): string {\n    return `${this.rng.nextArrayItem(this.adjectives)}-${this.rng.nextArrayItem(\n      this.nouns,\n    )}-${this.rng.nextInt(0, 99).toString().padStart(2, '0')}`;\n  }\n}\n","import { LoadingOutlined } from '@ant-design/icons';\nimport { Button, Form, Input, InputNumber, Radio } from 'antd';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { NameGenerator } from '../../../common/name-generator';\nimport { GameClientContext } from '../../contexts/client';\n\ninterface CreateGameForm {\n  name: string;\n  players: number;\n}\n\nexport function CreateGames(): JSX.Element {\n  const [form] = Form.useForm<CreateGameForm>();\n  const { replace } = useHistory();\n  const client = useContext(GameClientContext);\n  const [saving, setSaving] = useState(false);\n\n  function initializeForm() {\n    form.setFieldsValue({ name: new NameGenerator().next(), players: 2 });\n  }\n\n  useEffect(initializeForm, []);\n  return (\n    <>\n      <h1>Create a Game</h1>\n      <p>\n        Currently, you can create <strong>local</strong> (offline) games with AI\n        opponents. In future builds, once logged in with{' '}\n        <strong>Discord</strong>, you will be able to create and play online\n        games.\n      </p>\n      <Form\n        labelCol={{ span: 1 }}\n        wrapperCol={{ span: 4 }}\n        form={form}\n        onFinish={async (values) => {\n          setSaving(true);\n          const result = await client.gamesCreate(values.name, values.players);\n          replace(`/games/${result.name}`);\n        }}\n      >\n        <Form.Item\n          name=\"name\"\n          label=\"Name\"\n          extra={<>This name is just used for reference only.</>}\n        >\n          <Input maxLength={30} />\n        </Form.Item>\n        <Form.Item\n          name=\"players\"\n          label=\"Players\"\n          extra={<>2-4 players currently supported.</>}\n        >\n          <InputNumber min={2} max={4} />\n        </Form.Item>\n        <Form.Item\n          name=\"online\"\n          label=\"Connectivity\"\n          extra={<>Local games are versus AI and played offline.</>}\n        >\n          <Radio.Group>\n            <Radio.Button value={false}>Local</Radio.Button>\n            <Radio.Button value={true} disabled>\n              Online\n            </Radio.Button>\n          </Radio.Group>\n        </Form.Item>\n        <Form.Item wrapperCol={{ span: 5 }}>\n          <Button\n            disabled={saving}\n            icon={saving ? <LoadingOutlined /> : undefined}\n            type=\"primary\"\n            style={{ width: '100%' }}\n            htmlType=\"submit\"\n          >\n            {saving ? <>Saving</> : <>Create Game</>}\n          </Button>\n        </Form.Item>\n      </Form>\n    </>\n  );\n}\n","import { PlusOutlined } from '@ant-design/icons';\nimport { Button, Table } from 'antd';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport { GameListData } from '../../../common/game-state';\nimport { GameClientContext } from '../../contexts/client';\n\nexport function ListGames(): JSX.Element {\n  const client = useContext(GameClientContext);\n  const { push } = useHistory();\n  const [games, setGames] = useState<GameListData[]>([]);\n\n  async function fetchGames() {\n    setGames(await client.gamesList());\n  }\n\n  useEffect(() => {\n    fetchGames();\n  }, [client]);\n\n  const dataSource = games\n    .sort((a, b) => a.lastUpdated - b.lastUpdated)\n    .map((v) => {\n      return {\n        name: <Link to={`/games/${v.name}`}>{v.name}</Link>,\n        key: v.name,\n        players: v.players,\n        status: v.kind === 'Lobby' ? 'Not Started' : 'In Progress',\n      };\n    });\n\n  return (\n    <>\n      <h1>Games</h1>\n      <p className=\"games-buttons\">\n        <Button\n          icon={<PlusOutlined />}\n          type=\"dashed\"\n          onClick={() => {\n            push('/games/create');\n          }}\n        >\n          Create Game\n        </Button>\n\n        <Button\n          icon={<PlusOutlined />}\n          type=\"dashed\"\n          disabled\n          onClick={() => {\n            push('/games/join');\n          }}\n        >\n          Join Game\n        </Button>\n      </p>\n      <Table\n        columns={[\n          { title: 'Name', dataIndex: 'name' },\n          { title: 'Players', dataIndex: 'players' },\n          { title: 'Status', dataIndex: 'status' },\n        ]}\n        dataSource={dataSource}\n        locale={{ emptyText: 'You are not in any games.' }}\n        pagination={false}\n      />\n    </>\n  );\n}\n","import { HudIndicatorTag, PointData } from '../../common/game-state';\nimport { matrix, repeat } from '../../common/utils';\nimport './Map.scss';\n\nexport interface MapProps {\n  systems: {\n    /**\n     * Position of the system (x, y).\n     */\n    position: PointData;\n\n    /**\n     * Name of the system.\n     */\n    name: string;\n\n    /**\n     * Last known reconnaissance information showing ownership.\n     *\n     * May be left `undefined` if unknown.\n     */\n    status?: HudIndicatorTag;\n  }[];\n}\n\nfunction determineBounds(\n  systems: { position: PointData }[],\n): { width: number; height: number } {\n  let width = 0;\n  let height = 0;\n  systems.forEach((system) => {\n    const [x, y] = system.position;\n    if (x > width) {\n      width = x;\n    }\n    if (y > height) {\n      height = y;\n    }\n  });\n  return { width, height };\n}\n\nexport function MapPreview(props: MapProps): JSX.Element {\n  let { width, height } = determineBounds(props.systems);\n  width += 1;\n  height += 1;\n  const elements: JSX.Element[][] = matrix(height, width);\n  const decorators: string[][] = matrix(height, width);\n  for (const system of props.systems) {\n    const [x, y] = system.position;\n    decorators[y][x] = `${(system.status || '').toLowerCase()}`;\n    elements[y][x] = <>{system.name.substring(0, 1).toUpperCase()}</>;\n  }\n  return (\n    <table className=\"map-preview\">\n      <tbody>\n        {repeat(height).map((y) => {\n          return (\n            <tr key={y}>\n              {repeat(width).map((x) => {\n                return (\n                  <td key={x} className={decorators[y][x]}>\n                    {elements[y][x]}\n                  </td>\n                );\n              })}\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n}\n","import { LaptopOutlined, UserOutlined } from '@ant-design/icons';\nimport { Button, Form, Input, InputNumber, List } from 'antd';\nimport Prando from 'prando';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { GameLobbyData, PointData } from '../../../common/game-state';\nimport { PoissonMapGenerator } from '../../../common/map-generator';\nimport { PoissonDiskSampler } from '../../../common/poisson-disk';\nimport { GameClientContext } from '../../contexts/client';\nimport { MapPreview } from '../../ui/Map';\n\nexport function ViewGameLobby(props: {\n  data: GameLobbyData;\n  onStart: (seed: string, systems: number) => void;\n}): JSX.Element {\n  const client = useContext(GameClientContext);\n  const { replace } = useHistory();\n  const listAiPlayers = new Array(props.data.players - 1).fill('');\n  const [seed, setSeed] = useState(props.data.seed);\n  const [pending, setPending] = useState(false);\n  const [systems, setSystems] = useState(Math.ceil(props.data.players * 3));\n  const [preview, setPreview] = useState<\n    { position: PointData; name: string; home: boolean }[]\n  >([]);\n\n  useEffect(() => {\n    const prando = new Prando(seed);\n    const ratio = systems / 26;\n    const sampler = new PoissonDiskSampler(\n      [Math.ceil(50 * ratio), Math.ceil(30 * ratio)],\n      4,\n      undefined,\n      prando,\n    );\n    const generator = new PoissonMapGenerator(sampler, prando);\n    setPreview(generator.generateMap(systems, props.data.players));\n  }, [seed, systems]);\n\n  return (\n    <>\n      <h3>Players</h3>\n      <List>\n        <List.Item>\n          <List.Item.Meta\n            avatar={<UserOutlined />}\n            title={'Human'}\n            description={'Ready'}\n          />\n        </List.Item>\n        {listAiPlayers.map((_, i) => {\n          return (\n            <List.Item key={i}>\n              <List.Item.Meta\n                avatar={<LaptopOutlined />}\n                title={`AI: ${i + 1}`}\n                description={'Ready'}\n              />\n            </List.Item>\n          );\n        })}\n      </List>\n      <h3>Settings</h3>\n      <Form\n        labelCol={{ span: 1 }}\n        wrapperCol={{ span: 4 }}\n        onFinish={() => {\n          setPending(true);\n          props.onStart(seed, systems);\n        }}\n      >\n        <Form.Item\n          label=\"Name\"\n          extra={<>Used for identifying the game only.</>}\n        >\n          <Input\n            readOnly\n            minLength={10}\n            maxLength={20}\n            value={props.data.name}\n          />\n        </Form.Item>\n        <Form.Item\n          label=\"Seed\"\n          extra={<>Used for procedural generation of systems.</>}\n        >\n          <Input\n            readOnly\n            minLength={10}\n            maxLength={20}\n            value={seed}\n            onChange={(v) => setSeed(v.target.value)}\n          />\n        </Form.Item>\n        <Form.Item label=\"Preview\">\n          <MapPreview systems={preview} />\n        </Form.Item>\n        <Form.Item\n          label=\"Maximum Systems\"\n          extra={<>A recommended number is 3 systems per player.</>}\n        >\n          <InputNumber\n            min={props.data.players}\n            max={26}\n            value={systems}\n            onChange={(v) => setSystems(parseInt(`${v}`))}\n          />\n        </Form.Item>\n        <p className=\"games-buttons\">\n          <Button type=\"primary\" htmlType=\"submit\" disabled={pending}>\n            Start\n          </Button>\n          <Button\n            danger\n            disabled={pending}\n            onClick={async () => {\n              setPending(true);\n              await client.gamesDelete(props.data.name);\n              replace('/games');\n            }}\n          >\n            Delete\n          </Button>\n        </p>\n      </Form>\n    </>\n  );\n}\n","import { Button } from 'antd';\nimport { useEffect, useState } from 'react';\nimport './Header.scss';\n\nexport interface GameHeaderProps {\n  name: string;\n  players: number;\n  systems: number;\n  endedTurn: boolean;\n\n  onEndTurn: () => Promise<void>;\n  onResign: () => Promise<void>;\n}\n\nexport function GameHeader(props: GameHeaderProps): JSX.Element {\n  const [pendingPromise, setPendingPromise] = useState(false);\n  const [disableEndTurn, setDisableEndTurn] = useState<number>();\n  const waitingForPlayers = props.endedTurn || pendingPromise;\n  useEffect(() => {\n    return () => {\n      clearTimeout(disableEndTurn);\n    };\n  }, []);\n  return (\n    <header className=\"game-header\">\n      <div>\n        <strong>{props.name}</strong>\n        <br />\n        <span>{props.players}</span> players, <span>{props.systems}</span>{' '}\n        systems.\n      </div>\n      <ul>\n        <li>\n          <Button\n            type=\"primary\"\n            disabled={waitingForPlayers}\n            onClick={async () => {\n              setPendingPromise(true);\n              await props.onEndTurn();\n              const handle = setTimeout(() => {\n                setPendingPromise(false);\n              }, 2000);\n              setDisableEndTurn((handle as unknown) as number);\n            }}\n          >\n            {waitingForPlayers ? 'Waiting...' : 'End Turn'}\n          </Button>\n        </li>\n        <li>\n          <Button\n            danger\n            onClick={async () => {\n              if (\n                !window.confirm(\n                  'Are you sure? This will remove you from the game',\n                )\n              ) {\n                return;\n              }\n              setPendingPromise(true);\n              await props.onResign();\n              setPendingPromise(false);\n            }}\n          >\n            Resign\n          </Button>\n        </li>\n      </ul>\n    </header>\n  );\n}\n","import { Tabs } from 'antd';\nimport React from 'react';\nimport { FogOfWarGameData } from '../../../common/game-state';\nimport { GameHeader } from '../../ui/Header';\nimport { MapPreview } from '../../ui/Map';\n\nexport function PlayGame(props: {\n  state: FogOfWarGameData;\n  onEndTurn: () => Promise<void>;\n  onResign: () => Promise<void>;\n}): JSX.Element {\n  const { state } = props;\n  return (\n    <>\n      <GameHeader\n        name={state.name}\n        players={state.players}\n        systems={state.systems.length}\n        endedTurn={state.endedTurn}\n        onEndTurn={props.onEndTurn}\n        onResign={props.onResign}\n      />\n      <Tabs defaultActiveKey=\"1\">\n        <Tabs.TabPane tab=\"Overview\" key=\"1\">\n          <MapPreview systems={state.systems} />\n        </Tabs.TabPane>\n        <Tabs.TabPane tab=\"Reports\" key=\"2\"></Tabs.TabPane>\n        <Tabs.TabPane tab=\"Systems\" key=\"3\"></Tabs.TabPane>\n        <Tabs.TabPane tab=\"Fleets\" key=\"4\"></Tabs.TabPane>\n      </Tabs>\n    </>\n  );\n}\n","import { Button } from 'antd';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { Route, Switch, useHistory, useParams } from 'react-router-dom';\nimport {\n  FogOfWarGameData,\n  GameListData,\n  GameLobbyData,\n} from '../../common/game-state';\nimport { GameClientContext } from '../contexts/client';\nimport './Games.scss';\nimport { CreateGames } from './Games/Create';\nimport { ListGames } from './Games/List';\nimport { ViewGameLobby } from './Games/Lobby';\nimport { PlayGame } from './Games/Play';\n\nfunction ViewGameOrLobby(): JSX.Element {\n  const params = useParams<{ readonly name: string }>();\n  const client = useContext(GameClientContext);\n\n  const [game, setGame] = useState<\n    GameListData | FogOfWarGameData | undefined\n  >();\n\n  async function pullGameState() {\n    const fetchedGame = await client.gamesFetch(params.name);\n    setGame(fetchedGame);\n  }\n\n  useEffect(() => {\n    pullGameState();\n    // TODO: Make the polling exponentially back-off when idle.\n    const pollTimer = setInterval(pullGameState, 1000);\n    return () => {\n      clearInterval(pollTimer);\n    };\n  }, [client]);\n\n  const { goBack } = useHistory();\n  if (!game) {\n    return (\n      <>\n        <h1>\n          Game <code>{params.name}</code> not found.\n        </h1>\n        <p>Either this game has been deleted, or the link is expired.</p>\n        <Button onClick={goBack}>Go Back</Button>\n      </>\n    );\n  } else if (game.kind === 'Lobby') {\n    return (\n      <ViewGameLobby\n        data={game as GameLobbyData}\n        onStart={async (seed, systems) => {\n          setGame(await client.gamesStart(params.name, seed, systems));\n        }}\n      />\n    );\n  } else {\n    return (\n      <PlayGame\n        state={game as FogOfWarGameData}\n        onResign={async () => {\n          await client.gameResign(game.name);\n        }}\n        onEndTurn={async () => {\n          // TODO: Make a context object tied to this game.\n          await client.gameEndTurn(game.name);\n        }}\n      />\n    );\n  }\n}\n\nexport function GamesRoute(): JSX.Element {\n  return (\n    <>\n      <Switch>\n        <Route exact path=\"/games/create\" component={CreateGames} />\n        <Route path=\"/games/:name\" component={ViewGameOrLobby} />\n        <Route exact path=\"/games\" component={ListGames} />\n      </Switch>\n    </>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './app/App';\nimport './index.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","import { FogOfWarGameData, GameListData, GameLobbyData } from './game-state';\n\n/**\n * Represents a connection to a game server.\n */\nexport abstract class GameClient {\n  /**\n   * Logs in the user.\n   */\n  abstract accountLogin(): Promise<void>;\n\n  /**\n   * Logs out the user.\n   */\n  abstract accountLogout(): Promise<void>;\n\n  /**\n   * Fetches a single game.\n   */\n  abstract gamesFetch(\n    name: string,\n  ): Promise<FogOfWarGameData | GameListData | undefined>;\n\n  /**\n   * Lists active games.\n   */\n  abstract gamesList(): Promise<GameListData[]>;\n\n  /**\n   * Deletes a game.\n   */\n  abstract gamesDelete(name: string): Promise<void>;\n\n  /**\n   * Creates a game (lobby).\n   */\n  abstract gamesCreate(name: string, players: number): Promise<GameLobbyData>;\n\n  /**\n   * Starts a game.\n   */\n  abstract gamesStart(\n    name: string,\n    seed: string,\n    systems: number,\n  ): Promise<FogOfWarGameData>;\n\n  /**\n   * Ends your turn.\n   */\n  abstract gameEndTurn(name: string): Promise<void>;\n\n  /**\n   * Resigns from the game.\n   */\n  abstract gameResign(name: string): Promise<void>;\n}\n","import Prando from 'prando';\nimport {\n  FleetData,\n  FogOfWarGameData,\n  GameSettingsData,\n  GameStateData,\n  HudIndicatorTag,\n  OwnerData,\n  PlanetData,\n  PlayerStateData,\n  SystemData,\n} from './game-state';\nimport { PoissonMapGenerator } from './map-generator';\nimport { PoissonDiskSampler } from './poisson-disk';\nimport { deepClone } from './utils';\n\nexport function viewGameStateAs(\n  state: GameStateData,\n  perspective: string,\n): FogOfWarGameData | undefined {\n  for (const player of state.players) {\n    if (player.userId === perspective) {\n      return player.fogOfWar;\n    }\n  }\n}\n\nexport class FogOfWar {\n  createInitialFogOfWar(\n    state: GameStateData,\n    serverAgent: boolean,\n    player: string,\n  ): FogOfWarGameData {\n    return {\n      kind: 'Game',\n      currentTurn: state.currentTurn,\n      name: state.name,\n      players: state.players.length,\n      endedTurn: serverAgent,\n      systems: state.systems.map((system) => {\n        return {\n          name: system.name,\n          position: system.position,\n          status: this.determineStatus(system, player),\n        };\n      }),\n    };\n  }\n\n  private determineStatus(system: SystemData, player: string): HudIndicatorTag {\n    if (system.owner === 'Empire') {\n      return;\n    }\n    if (system.owner.player === player) {\n      return 'Self';\n    }\n  }\n}\n\nexport class RandomSpawner {\n  private randomEmpireFactories(\n    prando: Prando,\n    initialFactories: number,\n  ): number {\n    return prando.nextInt(\n      Math.floor(initialFactories / 4),\n      Math.floor(initialFactories / 2),\n    );\n  }\n\n  private spawnEmpireFleet(prando: Prando): FleetData {\n    // TODO: Make this scale with difficulty, once that's a thing.\n    const ratio = 1;\n    const warships = prando.nextInt(10, 30) * ratio;\n    return {\n      // TODO: Determine whether these are applicable for Empire.\n      transports: 0,\n      troops: 0,\n      warships,\n    };\n  }\n\n  private spawnPlayerFleet(prando: Prando): FleetData {\n    const warships = prando.nextInt(180, 240);\n    const transports = prando.nextInt(20, 30);\n    const troops = transports * 50;\n    return { transports, troops, warships };\n  }\n\n  spawnPlanet(prando: Prando, owner: OwnerData): PlanetData {\n    // TODO: Make initial generation more fair by giving players a chance to\n    // have a slight advantage in some area (i.e. better planets, more troops,\n    // more ships) without possibly having all of those or none of those.\n    return {\n      morale: 1,\n      owner,\n      troops: prando.nextInt(20, 80),\n      // TODO: Weight this, so it's more common to get ~4.\n      recruit: prando.nextInt(1, 10),\n    };\n  }\n\n  spawnInitialSystems(\n    prando: Prando,\n    systems: number,\n    settings: GameSettingsData,\n    players: PlayerStateData[],\n  ): SystemData[] {\n    const ratio = systems / 26;\n    const sampler = new PoissonDiskSampler(\n      [Math.ceil(50 * ratio), Math.ceil(30 * ratio)],\n      4,\n      undefined,\n      prando,\n    );\n    const generator = new PoissonMapGenerator(sampler, prando);\n    players = deepClone(players).sort(() => prando.nextInt(-1, 1));\n    return generator.generateMap(systems, players.length).map((stub) => {\n      let owner: OwnerData;\n      let orbit: FleetData;\n      let factories: number;\n      let planets: PlanetData[];\n      if (stub.home) {\n        owner = { player: players.splice(0, 1)[0].userId };\n        orbit = this.spawnPlayerFleet(prando);\n        factories = settings.initialFactories;\n        planets = new Array(10)\n          .fill(null)\n          .map(() => this.spawnPlanet(prando, owner));\n      } else {\n        owner = 'Empire';\n        orbit = this.spawnEmpireFleet(prando);\n        factories = this.randomEmpireFactories(\n          prando,\n          settings.initialFactories,\n        );\n        planets = new Array(prando.nextInt(2, 5))\n          .fill(null)\n          .map(() => this.spawnPlanet(prando, owner));\n      }\n      return {\n        name: stub.name,\n        home: owner,\n        owner,\n        position: stub.position,\n        orbit,\n        factories,\n        planets,\n      };\n    });\n  }\n}\n\nexport class TurnProcessor {\n  nextTurn(state: GameStateData): GameStateData {\n    return {\n      ...state,\n      currentTurn: state.currentTurn + 1,\n      players: state.players.map((player) => {\n        return {\n          ...player,\n          fogOfWar: {\n            ...player.fogOfWar,\n            currentTurn: player.fogOfWar.currentTurn + 1,\n            endedTurn: player.serverAgent,\n          },\n        };\n      }),\n    };\n  }\n}\n","import React from 'react';\nimport { GameClient } from '../../common/game-client';\nimport { GameServer } from '../../common/game-server';\nimport {\n  FogOfWarGameData,\n  GameListData,\n  GameLobbyData,\n  GameStateData,\n} from '../../common/game-state';\n\nexport class LocalGameServer extends GameServer {\n  constructor(private readonly storage = localStorage) {\n    super(\n      (() => {\n        const result = storage.getItem('games');\n        return result ? JSON.parse(result) : {};\n      })(),\n    );\n  }\n\n  protected async writeState<T extends GameLobbyData | GameStateData>(\n    name: string,\n    data: T,\n  ): Promise<T> {\n    const result = await super.writeState(name, data);\n    this.storage.setItem('games', JSON.stringify(this.games));\n    return result;\n  }\n\n  protected async deleteState(name: string): Promise<void> {\n    await super.deleteState(name);\n    this.storage.setItem('games', JSON.stringify(this.games));\n  }\n}\n\nexport class LocalGameClient extends GameClient {\n  constructor(\n    private player: string = 'Guest',\n    private readonly server: GameServer = new LocalGameServer(),\n  ) {\n    super();\n  }\n\n  async accountLogin(): Promise<void> {\n    // Intentionally left blank.\n  }\n\n  async accountLogout(): Promise<void> {\n    // Intentionally left blank.\n  }\n\n  async gamesFetch(\n    name: string,\n  ): Promise<GameLobbyData | GameListData | FogOfWarGameData | undefined> {\n    return this.server.onGamesFetch(this.player, name);\n  }\n\n  async gamesList(): Promise<GameListData[]> {\n    return this.server.onGamesList();\n  }\n\n  async gamesDelete(name: string): Promise<void> {\n    return this.server.onGamesDelete(this.player, { name });\n  }\n\n  async gamesCreate(name: string, players: number): Promise<GameLobbyData> {\n    return this.server.onGamesCreate(this.player, { name, players });\n  }\n\n  async gamesStart(\n    name: string,\n    seed: string,\n    systems: number,\n  ): Promise<FogOfWarGameData> {\n    return this.server.onGamesStart(this.player, { name, seed, systems });\n  }\n\n  async gameEndTurn(name: string): Promise<void> {\n    return this.server.onGameEndTurn(this.player, { name });\n  }\n\n  async gameResign(name: string): Promise<void> {\n    return this.server.onGameResign(this.player, { name });\n  }\n}\n\nexport const GameClientContext = React.createContext<GameClient>(\n  new LocalGameClient(),\n);\n","import Prando from 'prando';\nimport {\n  FogOfWar,\n  RandomSpawner,\n  TurnProcessor,\n  viewGameStateAs,\n} from './game-logic';\nimport {\n  FogOfWarGameData,\n  GameListData,\n  GameLobbyData,\n  GameSettingsData,\n  GameStateData,\n  PlayerStateData,\n} from './game-state';\nimport { deepClone } from './utils';\n\n/**\n * Represents a game server.\n */\nexport class GameServer {\n  private readonly fogOfWar = new FogOfWar();\n  private readonly spawner = new RandomSpawner();\n  private readonly turnProcessor = new TurnProcessor();\n\n  constructor(\n    protected readonly games: {\n      [key: string]: GameLobbyData | GameStateData;\n    },\n    protected readonly prando = new Prando(),\n  ) {}\n\n  protected async readState(\n    name: string,\n  ): Promise<GameLobbyData | GameStateData | undefined> {\n    const result = this.games[name];\n    return result ? deepClone(result) : undefined;\n  }\n\n  /**\n   * Implementations of @see GameServer that persist data should override.\n   */\n  protected async writeState<T extends GameLobbyData | GameStateData>(\n    name: string,\n    data: T,\n  ): Promise<T> {\n    data = { ...deepClone(data), lastUpdated: this.currentTime() };\n    return (this.games[name] = data);\n  }\n\n  /**\n   * Implementations of @see GameServer that persist data should override.\n   */\n  protected async deleteState(name: string): Promise<void> {\n    delete this.games[name];\n  }\n\n  /**\n   * Returns the current timestamp.\n   */\n  protected currentTime(): number {\n    return new Date().getTime();\n  }\n\n  /**\n   * Maps and replaces the @see PlayerStateData for @param game/@param player.\n   */\n  protected async writePlayer(\n    game: string,\n    player: string,\n    map: (data: PlayerStateData) => PlayerStateData,\n  ): Promise<GameStateData | undefined> {\n    const state = await this.readState(game);\n    if (state && state.kind === 'Game') {\n      for (let i = 0; i < state.players.length; i++) {\n        if (state.players[i].userId === player) {\n          state.players[i] = map(state.players[i]);\n        }\n      }\n      return this.writeState(game, state);\n    }\n    // TODO: Handle this case.\n    return;\n  }\n\n  /**\n   * Processes a login request.\n   *\n   * Implementations that want authorization should override this method.\n   */\n  async onAccountLogin(): Promise<void> {\n    // Intentionally left blank.\n  }\n\n  /**\n   * Processes a game fetch request.\n   */\n  async onGamesFetch(\n    player: string,\n    name: string,\n  ): Promise<GameLobbyData | GameListData | FogOfWarGameData | undefined> {\n    for (const game of Object.values(this.games)) {\n      if (game.name === name) {\n        if (game.kind === 'Lobby') {\n          return game;\n        } else {\n          return viewGameStateAs(game, player);\n        }\n      }\n    }\n  }\n\n  /**\n   * Processes a game list request.\n   */\n  async onGamesList(): Promise<GameListData[]> {\n    return Object.values(this.games).map((value) => {\n      return {\n        name: value.name,\n        kind: value.kind,\n        lastUpdated: value.lastUpdated,\n        players:\n          typeof value.players === 'number'\n            ? value.players\n            : value.players.length,\n      };\n    });\n  }\n\n  /**\n   * Processes a game creation request.\n   */\n  async onGamesCreate(\n    player: string,\n    request: {\n      name: string;\n      players: number;\n    },\n  ): Promise<GameLobbyData> {\n    return this.writeState(request.name, {\n      ...request,\n      seed: this.prando.nextString(10),\n      createdBy: player,\n      kind: 'Lobby',\n      lastUpdated: this.currentTime(),\n    });\n  }\n\n  /**\n   * Processes a game deletion request.\n   *\n   * @param _player\n   * @param request\n   */\n  async onGamesDelete(\n    _player: string,\n    request: {\n      name: string;\n    },\n  ): Promise<void> {\n    // TODO: Enforce player created the game being deleted or is an admin.\n    // TODO: Enforce the game exists.\n    return this.deleteState(request.name);\n  }\n\n  /**\n   * Processes a game start request.\n   *\n   * @param player\n   * @param request\n   */\n  async onGamesStart(\n    player: string,\n    request: {\n      name: string;\n      seed: string;\n      systems: number;\n    },\n  ): Promise<FogOfWarGameData> {\n    // TODO: Enforce player created the game being started.\n    // TODO: Enforce the game exists and hasn't already been started.\n    // TODO: Enforce the player is in the game that is starting.\n    // TODO: Enforce systems are valid.\n    const pending = (await this.readState(request.name)) as GameLobbyData;\n    // TODO: Support multiplayer.\n    const players: PlayerStateData[] = [\n      {\n        name: 'Human',\n        userId: 'Guest',\n        fogOfWar: {} as FogOfWarGameData,\n        serverAgent: false,\n      },\n      ...new Array(pending.players - 1).fill(null).map((_, i) => {\n        return {\n          name: `AI ${i + 1}`,\n          userId: `ai-${i + 1}`,\n          fogOfWar: {} as FogOfWarGameData,\n          serverAgent: true,\n        };\n      }),\n    ];\n    // TODO: Allow customization of these settings.\n    const settings: GameSettingsData = {\n      initialFactories: 10,\n      shipSpeedATurn: 4,\n    };\n    // TODO: Move all this logic into a logic class.\n    const systems = this.spawner.spawnInitialSystems(\n      new Prando(request.seed),\n      request.systems,\n      settings,\n      players,\n    );\n    const initialState: GameStateData = {\n      name: pending.name,\n      lastUpdated: this.currentTime(),\n      createdBy: player,\n      currentTurn: 1,\n      kind: 'Game',\n      players,\n      systems,\n      settings,\n    };\n    const stateWithFogOfWar: GameStateData = {\n      ...initialState,\n      players: initialState.players.map((player) => {\n        return {\n          ...player,\n          fogOfWar: this.fogOfWar.createInitialFogOfWar(\n            initialState,\n            player.serverAgent,\n            player.userId,\n          ),\n        };\n      }),\n    };\n    await this.writeState(request.name, stateWithFogOfWar);\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return viewGameStateAs(stateWithFogOfWar, player)!;\n  }\n\n  /**\n   * Processes an \"end turn\" request.\n   */\n  async onGameEndTurn(\n    player: string,\n    request: { name: string },\n  ): Promise<void> {\n    const result = await this.writePlayer(request.name, player, (data) => {\n      return {\n        ...data,\n        fogOfWar: {\n          ...data.fogOfWar,\n          endedTurn: true,\n        },\n      };\n    });\n    if (result) {\n      const processTurn = result.players.every((p) => p.fogOfWar.endedTurn);\n      if (processTurn) {\n        await this.writeState(\n          request.name,\n          this.turnProcessor.nextTurn(result),\n        );\n      }\n    }\n  }\n\n  async onGameResign(player: string, request: { name: string }): Promise<void> {\n    const result = await this.writePlayer(request.name, player, (data) => {\n      return {\n        ...data,\n        serverAgent: true,\n        fogOfWar: {\n          ...data.fogOfWar,\n          endedTurn: true,\n        },\n      };\n    });\n    if (result) {\n      // TODO: Add this to the end-turn report for players.\n      const terminateGame = result.players.every((p) => p.serverAgent);\n      if (terminateGame) {\n        await this.deleteState(request.name);\n      } else {\n        const processTurn = result.players.every((p) => p.fogOfWar.endedTurn);\n        if (processTurn) {\n          await this.writeState(\n            request.name,\n            this.turnProcessor.nextTurn(result),\n          );\n        }\n      }\n    }\n  }\n}\n","export function deepClone<T>(input: T): T {\n  return JSON.parse(JSON.stringify(input));\n}\n\nexport function repeat(length: number): number[] {\n  return new Array(length).fill(null).map((_, i) => i);\n}\n\nexport function matrix<T>(height: number, width: number): T[][] {\n  return new Array(height).fill(null).map(() => new Array(width).fill(null));\n}\n","import Prando from 'prando';\nimport { PointData } from './game-state';\n\nfunction dist2(x1: number, y1: number, x2: number, y2: number): number {\n  return (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);\n}\n\n/**\n * @see https://github.com/ogus/poisson-disk/blob/master/src/poisson-disk.js.\n */\nexport class PoissonDiskSampler {\n  private readonly xMin = 0;\n  private readonly yMin = 0;\n  private readonly xMax: number;\n  private readonly yMax: number;\n  private readonly radius: number;\n  private readonly cellSize: number;\n  private readonly k: number;\n\n  private state!: {\n    width: number;\n    height: number;\n    data: [number, number][];\n  };\n  private queue!: [number, number][];\n  private firstPoint = true;\n\n  constructor(\n    viewport: [number, number],\n    minDistance = 1,\n    maxTries = 30,\n    private readonly prando = new Prando(),\n  ) {\n    this.xMax = viewport[0];\n    this.yMax = viewport[1];\n    this.radius = Math.max(minDistance, 1);\n    this.cellSize = this.radius * Math.SQRT1_2;\n    this.k = Math.max(maxTries, 2);\n    this.reset();\n  }\n\n  /**\n   * Reset the sampler.\n   */\n  reset(): void {\n    const width = Math.ceil((this.xMax - this.xMin) / this.cellSize);\n    const height = Math.ceil((this.yMax - this.yMin) / this.cellSize);\n    this.state = {\n      width,\n      height,\n      data: new Array(width * height).fill(null),\n    };\n    this.queue = [];\n    this.firstPoint = true;\n  }\n\n  /**\n   * Creates and returns a new point.\n   *\n   * @param x\n   * @param y\n   */\n  private createPoint(x: number, y: number): PointData {\n    const index =\n      Math.floor(x / this.cellSize) +\n      Math.floor(y / this.cellSize) * this.state.width;\n    const point = (this.state.data[index] = [x, y]);\n    this.queue.push(point);\n    return point;\n  }\n\n  /**\n   * Returns whether the provided points are valid.\n   *\n   * @param x\n   * @param y\n   */\n  private isValidPoint(x: number, y: number): boolean {\n    if (x < this.xMin || x > this.xMax || y < this.yMin || y > this.yMax) {\n      return false;\n    }\n    const col = Math.floor((x - this.xMin) / this.cellSize);\n    const row = Math.floor((y - this.yMin) / this.cellSize);\n    let index = 0;\n    for (let i = col - 2; i <= col + 2; i++) {\n      for (let j = row - 2; j <= row + 2; j++) {\n        if (i >= 0 && i < this.state.width && j >= 0 && j < this.state.height) {\n          index = i + j * this.state.width;\n          if (\n            this.state.data[index] !== null &&\n            dist2(x, y, this.state.data[index][0], this.state.data[index][1]) <=\n              this.radius * this.radius\n          ) {\n            return false;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Returns a standard `Math.random()`-like result.\n   */\n  private rng(): number {\n    return this.prando.next();\n  }\n\n  /**\n   * Returns the next point in the sampling, or `null` if there is no more.\n   */\n  nextPoint(): PointData | null {\n    let x = 0;\n    let y = 0;\n    if (this.firstPoint) {\n      this.firstPoint = false;\n      x = this.xMin + (this.xMax - this.xMin) * this.rng();\n      y = this.yMin + (this.yMax - this.yMin) * this.rng();\n      return this.createPoint(x, y);\n    }\n    let index = 0;\n    let distance = 0;\n    let angle = 0;\n    while (this.queue.length) {\n      index = (this.queue.length * this.rng()) | 0;\n      for (let i = 0; i < this.k; i++) {\n        distance = this.radius * (this.rng() + 1);\n        angle = 2 * Math.PI * this.rng();\n        x = this.queue[index][0] + distance * Math.cos(angle);\n        y = this.queue[index][1] + distance * Math.sin(angle);\n        if (this.isValidPoint(x, y)) {\n          return this.createPoint(x, y);\n        }\n      }\n      this.queue.splice(index, 1);\n    }\n    return null;\n  }\n\n  /**\n   * Returns whether there are no points.\n   */\n  get done(): boolean {\n    return !this.firstPoint && this.queue.length === 0;\n  }\n\n  /**\n   * Returns all the points possible, up to a maximum requested.\n   *\n   * @param max\n   */\n  points(max: number = Number.MAX_SAFE_INTEGER): [number, number][] {\n    const result: [number, number][] = [];\n    for (let i = 0; i < max; i++) {\n      const point = this.nextPoint();\n      if (point) {\n        result.push(point);\n      }\n    }\n    return result;\n  }\n}\n"],"sourceRoot":""}